import { EventEmitter, OnInit } from '@angular/core';
import { IEvent, ILanguageItem, IProcessFull, IStage, Step } from '@azavista/servicelib';
import { AzavistaSharedService, IAclObject, IFieldIdWithOptions, IIdWithLabel, INumericIdWithLabel, NotificationsService } from '@azavista/components/shared';
import { AzavistaFlowBuilderComponent, FlowBuilderAddNewConfig, FlowBuilderEmailTemplate, FlowBuilderEntityTypeFields, FlowBuilderStepType, IIntegrationPartial, ITemplateEventFieldsSubjectMessage } from '@azavista/components/flow-builder';
import { Subject } from 'rxjs';
import { ProcessType } from '../../types';
import { AzavistaWorkflowBuilderController } from '../../workflow-builder.controller';
import * as i0 from "@angular/core";
export declare class WorkflowBuilderProcessBuilderComponent implements OnInit {
    private controller;
    private cmpSharedSvc;
    private notificationsSvc;
    eventId?: string;
    getAclObjectForCurrentUser?: () => IAclObject;
    event?: IEvent;
    fullProcess?: IProcessFull;
    showOnlyFlowBuilder: boolean;
    processType: ProcessType;
    addNewConfig?: FlowBuilderAddNewConfig;
    stages: IStage[];
    /** Field stage options */
    fieldsOptions: IFieldIdWithOptions[];
    fields?: FlowBuilderEntityTypeFields[];
    loaded: boolean;
    emailTemplates?: FlowBuilderEmailTemplate[];
    workflowTeams?: INumericIdWithLabel[] | undefined;
    emailCampaigns?: IIdWithLabel[];
    languages?: IIdWithLabel[];
    templateEvents: IIdWithLabel[] | undefined;
    integrations?: IIntegrationPartial[];
    users?: INumericIdWithLabel[];
    templateEventFieldsSubject: Subject<ITemplateEventFieldsSubjectMessage>;
    docxDocuments?: IIdWithLabel[];
    documentFields?: IIdWithLabel[];
    azFlowBuilder?: AzavistaFlowBuilderComponent;
    stepsSaved: EventEmitter<Step[]>;
    private destroyed$;
    constructor(controller: AzavistaWorkflowBuilderController, cmpSharedSvc: AzavistaSharedService, notificationsSvc: NotificationsService);
    ngOnInit(): Promise<void>;
    private initData;
    processEventFieldsSubject(data: ITemplateEventFieldsSubjectMessage): Promise<void>;
    onChangesSaved(steps: Step[]): Promise<void>;
    changeDecisionConfigs(steps: Step[]): void;
    changeEmailFromEventFieldToEmailFromField(steps: Step[]): void;
    changeEmailFromFieldToEmailFromEventField(steps: Step[]): void;
    loadProcess(processId: string): Promise<void>;
    getAvailableStepTypes(): FlowBuilderStepType[];
    getAddNewConfig(): FlowBuilderAddNewConfig;
    onFlowPausedChanged(paused: boolean): Promise<void>;
    onFlowInterrupted(): Promise<void>;
    showProcessInterruptionConfirmation(): Promise<boolean>;
    onNotConfigured(): void;
    getSelectedLanguageItems(selectedIds: string[], languageItems: ILanguageItem[]): ILanguageItem[];
    static ɵfac: i0.ɵɵFactoryDeclaration<WorkflowBuilderProcessBuilderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WorkflowBuilderProcessBuilderComponent, "azavista-workflow-builder-process-builder", never, { "eventId": { "alias": "eventId"; "required": false; }; "getAclObjectForCurrentUser": { "alias": "getAclObjectForCurrentUser"; "required": false; }; "fullProcess": { "alias": "fullProcess"; "required": false; }; "showOnlyFlowBuilder": { "alias": "showOnlyFlowBuilder"; "required": false; }; "processType": { "alias": "processType"; "required": false; }; }, { "stepsSaved": "stepsSaved"; }, never, never, false, never>;
}
