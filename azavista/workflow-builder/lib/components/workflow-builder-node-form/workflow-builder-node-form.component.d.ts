import { ElementRef, EventEmitter, NgZone, OnInit } from '@angular/core';
import { AzavistaSharedService, IAzavistaGroupedFieldsComponentData, IField, IValueChangesWithObject } from '@azavista/components/shared';
import { Canvas, CanvasWorkflowItem, WorkflowProperty, WorkflowType } from '@azavista/workflow-builder-shared';
import { NgResizeObserver } from 'ng-resize-observer';
import { AzavistaGroupedFieldsComponent } from '@azavista/components/grouped-fields';
import { FormGroup } from '@angular/forms';
import { AzavistaWorkflowBuilderController } from '../../workflow-builder.controller';
import { CanvasControllerData, CanvasWorkflowFactory } from '../../types';
import { AzavistaWorkflowBuilderFormFieldService } from '../../services/workflow-builder.form-field.service';
import { WorkflowBuilderNodeFormHeaderComponent } from '../workflow-builder-node-form-header/workflow-builder-node-form-header.component';
import * as i0 from "@angular/core";
export declare class WorkflowBuilderNodeFormComponent implements OnInit {
    private sharedSvc;
    private host;
    controller: AzavistaWorkflowBuilderController;
    private resize$;
    private ngZone;
    private formFieldService;
    node: NodeModel<string>;
    eventId: string;
    diagramEl: Diagram;
    attrNodeId: string;
    workflowSettingsChanges: EventEmitter<IValueChangesWithObject>;
    canvasChanges: EventEmitter<Partial<Canvas>>;
    removeNode: EventEmitter<void>;
    workflowSettingsGroupedFieldEl: AzavistaGroupedFieldsComponent;
    formHeader?: WorkflowBuilderNodeFormHeaderComponent;
    workflowSettingsGroupedFieldData?: IAzavistaGroupedFieldsComponentData | undefined;
    canvasGroupFieldData?: IAzavistaGroupedFieldsComponentData | undefined;
    workflowItem?: CanvasWorkflowItem;
    properties: WorkflowProperty[];
    fields: IField[];
    trackByWorkflowProperty: (index: number, item: WorkflowProperty) => string;
    formGroup?: FormGroup;
    get workflowId(): string;
    get controllerData(): CanvasControllerData<WorkflowType> | undefined;
    get isWorkflowValid(): boolean;
    constructor(sharedSvc: AzavistaSharedService, host: ElementRef<HTMLElement>, controller: AzavistaWorkflowBuilderController, resize$: NgResizeObserver, ngZone: NgZone, formFieldService: AzavistaWorkflowBuilderFormFieldService);
    ngOnInit(): Promise<void>;
    onKeyDown(event: KeyboardEvent): void;
    private initFormGroup;
    createWorkflowSettingsGroupedFieldFields(factory: CanvasWorkflowFactory<WorkflowType>): Promise<IField[]>;
    createWorkflowSettingsGroupFieldData<T extends WorkflowType>(controllerData: CanvasControllerData<T>): Promise<IAzavistaGroupedFieldsComponentData>;
    toggleExpandPanels(): Promise<void>;
    createCanvasGroupedFieldsData<T extends WorkflowType>(controllerData: CanvasControllerData<T>): IAzavistaGroupedFieldsComponentData;
    onUpdateCanvasFields(data: Partial<Canvas>): void;
    onUpdateWorkflowSettingsFields(data: IValueChangesWithObject): void;
    loadFieldsCssClass(): void;
    openProcessPopup(): void;
    private getNodeInstance;
    static ɵfac: i0.ɵɵFactoryDeclaration<WorkflowBuilderNodeFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WorkflowBuilderNodeFormComponent, "azavista-workflow-builder-node-form", never, { "node": { "alias": "node"; "required": false; }; "eventId": { "alias": "eventId"; "required": false; }; "diagramEl": { "alias": "diagramEl"; "required": false; }; }, { "workflowSettingsChanges": "workflowSettingsChanges"; "canvasChanges": "canvasChanges"; "removeNode": "removeNode"; }, never, never, false, never>;
}
