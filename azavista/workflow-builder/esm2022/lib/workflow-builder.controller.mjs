import { Injectable } from '@angular/core';
import { CrmStatus } from '@azavista/azavista-types';
import { BehaviorSubject, filter, firstValueFrom, map } from 'rxjs';
import { getWorkflowFactory, objectKeys } from './utils';
import * as i0 from "@angular/core";
export const getCrmStatusArray = () => {
    return objectKeys(CrmStatus).reduce((result, data) => {
        const crmStatus = CrmStatus[data];
        // eslint-disable-next-line eqeqeq
        if (crmStatus != undefined) {
            result.push(crmStatus);
        }
        return result;
    }, []);
};
export const crmStatusArray = getCrmStatusArray();
export class AzavistaWorkflowBuilderController {
    constructor() {
        this.dataMap = {};
        this.validityMap = {};
        this.initStatus$ = new BehaviorSubject(undefined);
    }
    async initFromProvider(dataProvider, eventId) {
        this.initStatus$.next('processing');
        this.eventId = eventId;
        this.dataProvider = dataProvider;
        this.init({
            workflows: await this.dataProvider.getAllWorkflowsForInit(eventId),
        });
        this.initStatus$.next('completed');
    }
    init(workflowData) {
        workflowData?.workflows.forEach(({ workflow, canvas }) => {
            this.addWorkflow(workflow.type, canvas, workflow);
        });
    }
    addWorkflow(type, canvas, data) {
        const factory = getWorkflowFactory(type, data);
        const createdData = { factory, ...canvas };
        this.dataMap[factory.getId()] = createdData;
        this.updateValidityMap(factory);
        this.save();
        return createdData;
    }
    updateWorkflowSettings(workflowId, data) {
        const { factory } = this.dataMap[workflowId];
        factory?.setValues(data);
        this.updateValidityMap(factory);
        this.save();
    }
    updateWorkflowCoordinate(workflowId, coordinate) {
        if (this.dataMap[workflowId]?.coordinate) {
            this.dataMap[workflowId].coordinate = coordinate;
            this.save();
        }
    }
    updateWorkflowNextWorkflow(outputType, sourceWorkflowId, targetWorkflowId) {
        if (!sourceWorkflowId) {
            return;
        }
        const { factory } = this.dataMap[sourceWorkflowId];
        factory?.setNextWorkflow(outputType, targetWorkflowId);
        this.updateValidityMap(factory);
        this.save();
    }
    updateWorkflowCanvas(workflowId, data) {
        if (this.dataMap[workflowId]) {
            this.dataMap[workflowId] = {
                ...this.dataMap[workflowId],
                ...data,
            };
            this.save();
        }
    }
    updateWorkflowProcess(workflowId, attribute, steps) {
        const { factory } = this.dataMap[workflowId];
        factory?.setCustomProcess(attribute, steps);
        this.updateValidityMap(factory);
        this.save();
    }
    isValidNextWorkflow(outputType, sourceWorkflowId, targetWorkflowId, isNewConnection = false) {
        const isTargetingSelf = sourceWorkflowId === targetWorkflowId;
        const sourceWorkflow = sourceWorkflowId
            ? this.dataMap[sourceWorkflowId]
            : null;
        const possibleWorkflows = sourceWorkflow?.factory.getPossibleWorkflows(outputType, Object.values(this.dataMap).map(({ factory }) => factory)) ?? [];
        const noOutputPin = possibleWorkflows.length === 0;
        const inValidTargetPin = targetWorkflowId && !possibleWorkflows.includes(targetWorkflowId);
        const isAddingMultipleConnection = !!(isNewConnection &&
            sourceWorkflow?.factory.getNextWorkflows()[outputType]);
        const isAddingEmptySourceConnection = isNewConnection && !sourceWorkflowId;
        if (noOutputPin ||
            inValidTargetPin ||
            isTargetingSelf ||
            isAddingMultipleConnection ||
            isAddingEmptySourceConnection) {
            this.log('isValidNextWorkflow', {
                isTargetingSelf,
                sourceWorkflow,
                possibleWorkflows,
                noOutputPin,
                inValidTargetPin,
                isAddingMultipleConnection,
                isAddingEmptySourceConnection,
            });
            return false;
        }
        return true;
    }
    deleteWorkflow(workflowId) {
        delete this.dataMap[workflowId];
        delete this.validityMap[workflowId];
        this.validityMap = {
            ...this.validityMap,
        };
        this.save();
    }
    getCurrentState() {
        const workflows = Object.entries(this.dataMap).reduce((result, [, { factory, coordinate, description, name }]) => {
            return result.concat([
                {
                    canvas: { coordinate, description, name },
                    workflow: factory.getWorkflow(),
                },
            ]);
        }, []);
        return { workflows };
    }
    async save() {
        this.log('save', {
            eventId: this.eventId,
            getCurrentState: this.getCurrentState(),
        });
        if (this.eventId) {
            this.dataProvider?.saveBuilderData(this.eventId, this.getCurrentState());
        }
    }
    async publish() {
        if (this.eventId) {
            this.dataProvider?.publishBuilderData(this.eventId, this.getCurrentState());
        }
    }
    async getInitializedWorkflowsMap() {
        return firstValueFrom(this.initStatus$.pipe(filter((status) => status === 'completed'), map(() => this.dataMap)));
    }
    log(logName, ...params) {
        if (this.isDebugCallback?.()) {
            console.groupCollapsed(logName);
            console.trace(params);
            console.groupEnd();
        }
    }
    updateValidityMap(factory) {
        this.validityMap = {
            ...this.validityMap,
            [factory.getId()]: factory.isValidated(),
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: AzavistaWorkflowBuilderController, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: AzavistaWorkflowBuilderController, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: AzavistaWorkflowBuilderController, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
export class WorkflowBuilderProviderAbstract {
    constructor(workflowController) {
        this.workflowController = workflowController;
    }
    async getBuilderData(eventId) {
        const unformattedWorkflows = await this.getAllWorkflowsForInit(eventId);
        return {
            draftConnectors: [],
            workflows: unformattedWorkflows,
        };
    }
    async getAllWorkflowsForDataSource(skippedWorkflowIds) {
        const dataMap = await this.workflowController.getInitializedWorkflowsMap();
        return Object.values(dataMap)
            .filter((data) => !skippedWorkflowIds.includes(data.factory.getId()))
            .map((data) => data.factory);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: WorkflowBuilderProviderAbstract, deps: [{ token: AzavistaWorkflowBuilderController }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: WorkflowBuilderProviderAbstract }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: WorkflowBuilderProviderAbstract, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: AzavistaWorkflowBuilderController }]; } });
//# sourceMappingURL=data:application/json;base64,