import { flatSearchToRecursive, } from '@azavista/advanced-search';
import { getAzavistaServiceLibCacheProxy } from './servicelib-cache.service';
import { WorkflowBuilderProviderAbstract, crmStatusArray, } from '../workflow-builder.controller';
import { getOrderedIEventWorkflows } from '../utils';
// eslint-disable-next-line max-len
export class WorkflowBuilderProviderApi extends WorkflowBuilderProviderAbstract {
    constructor(apiSvc, controller) {
        super(controller);
        this.apiSvc = apiSvc;
        this.controller = controller;
        this.cacheService = getAzavistaServiceLibCacheProxy(this.apiSvc, [
            'getAllPages',
            'getAllEventEmailCampaigns',
            'getAllUsers',
            'searchTeams',
            'getAllEvents',
            'getAllEventFields',
            'getAllEventParticipantFields',
            'getAllEventAssets',
            'getEventSettings',
            'getProcess',
            'getEvent',
            'searchIntegrations',
        ]);
        this.dataSourceCallbacks = {
            Form: async (eventId) => this.getAllPageForms(eventId),
            Page: (eventId) => this.getAllPagesNonForm(eventId),
            Email: (eventId) => this.cacheService.getAllEventEmailCampaigns(eventId),
            CrmStatus: async () => crmStatusArray,
            Workflow: (eventId, options) => this.getAllWorkflowsForDataSource(options.skippedWorkflowIds),
            ProfilePage: (eventId) => this.cacheService.getAllPages("Profile" /* PageType.profile */, eventId),
        };
        this.processDataSourceCallback = {
            users: () => this.cacheService.getAllUsers(),
            event: async (eventId) => this.getProcessDataSourceEvent(eventId),
            getEventFields: async (eventId) => this.cacheService.getAllEventFields(eventId),
            integrations: () => this.apiSvc.getAllPagedItems((req) => this.cacheService.searchIntegrations(req), (res) => res.integrations),
        };
    }
    async getAllPageForms(eventId) {
        const allPages = await this.cacheService.getAllPages("Page" /* PageType.page */, eventId);
        return allPages.filter((page) => page.is_form && page.is_published);
    }
    async getAllPagesNonForm(eventId) {
        const allPages = await this.cacheService.getAllPages("Page" /* PageType.page */, eventId);
        return allPages.filter((page) => !page.is_form && page.is_published);
    }
    async getAllWorkflowsForInit(eventId) {
        const response = await this.apiSvc.getAllEventWorkflows("event" /* EventWorkflowParentType.event */, eventId);
        return getOrderedIEventWorkflows(response.workflows);
    }
    async saveBuilderData(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    eventId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    data) {
        // TODO: save workflows action
    }
    async publishBuilderData(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    eventId, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    data) {
        // TODO: publish workflows action
    }
    async getProcessDataSourceEvent(eventId) {
        const eventDetail = await this.cacheService.getEvent(eventId);
        const [assets, participantFields, eventSettings, teams, templateEvents,] = await Promise.all([
            this.cacheService.getAllEventAssets(eventId),
            this.cacheService.getAllEventParticipantFields(eventId),
            this.cacheService.getEventSettings(eventId),
            this.getEventTeams(eventDetail),
            this.getTemplateEvents(eventDetail),
        ]);
        return {
            detail: eventDetail,
            assets,
            participantFields,
            settings: eventSettings.settings,
            teams,
            templateEvents,
        };
    }
    async getEventTeams(event) {
        if (event.type === "workflow" /* EventType.workflow */) {
            const searchTeamsRequest = {
                limit: 50,
                offset: 0,
            };
            const params = [
                {
                    field: { name: 'id' },
                    value: event.team_ids,
                    operator: 'in',
                },
            ];
            searchTeamsRequest.advancedQuery = flatSearchToRecursive(params, 'name');
            const searchTeamsResponse = await this.cacheService.searchTeams(searchTeamsRequest);
            return searchTeamsResponse.teams;
        }
        return undefined;
    }
    async getTemplateEvents(event) {
        if (event.type === "workflow" /* EventType.workflow */) {
            const allTemplateEvents = await this.apiSvc.getAllEvents("template" /* EventType.template */);
            return allTemplateEvents;
        }
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,