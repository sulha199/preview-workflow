import { Injectable } from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators, } from '@angular/forms';
import { WORKFLOW_NAME_TRANSLATIONS, WORKFLOW_EXPLANATION_TRANSLATIONS, } from '../types';
import { crmStatusArray, } from '../workflow-builder.controller';
import { createFormGroupFromData, delay, mergeDeep } from '../utils';
import * as i0 from "@angular/core";
import * as i1 from "@azavista/components/shared";
import * as i2 from "@ngx-translate/core";
export class AzavistaWorkflowBuilderFormFieldService {
    constructor(sharedSvc, translateSvc) {
        this.sharedSvc = sharedSvc;
        this.translateSvc = translateSvc;
        this.getPageAttributeTranslation = (pages) => {
            return pages.map((page) => ({
                value: page.id,
                trans: {
                    [this.translateSvc.currentLang]: page.name,
                },
            }));
        };
        this.getWorkflowAttributeTranslations = (workflows, skippedId) => {
            return workflows.reduce((result, factory) => {
                const id = factory.getId();
                if (!skippedId?.includes(id)) {
                    const workflow = factory.getWorkflow();
                    result.push({
                        value: id,
                        trans: {
                            [this.translateSvc.currentLang]: workflow.type,
                        },
                    });
                }
                return result;
            }, []);
        };
        this.getEmailCampaignAttributeTranslations = (emails) => {
            return emails.map((email) => ({
                value: email.id,
                trans: {
                    [this.translateSvc.currentLang]: email.name,
                },
            }));
        };
        this.getCrmAttributeTranslations = () => {
            return crmStatusArray.map((crmStatus) => ({
                value: crmStatus,
                trans: {
                    [this.translateSvc.currentLang]: crmStatus,
                },
            }));
        };
        this.translationsMapCallback = {
            CrmStatus: this.getCrmAttributeTranslations,
            Email: this.getEmailCampaignAttributeTranslations,
            Form: this.getPageAttributeTranslation,
            Page: this.getPageAttributeTranslation,
            ProfilePage: this.getPageAttributeTranslation,
            Workflow: this.getWorkflowAttributeTranslations,
        };
        this.getCanvasDataFields = (workflowType) => {
            const baseField = {
                category: '',
                builtin: true,
                editable: true,
                mandatory_for_planners: true,
                schema: {
                    type: 'string',
                },
            };
            return [
                {
                    ...baseField,
                    id: 'name',
                    name: 'name',
                    label: this.sharedSvc.translate('NAME'),
                    placeholder: this.sharedSvc.translate(WORKFLOW_NAME_TRANSLATIONS[workflowType]),
                },
                {
                    ...baseField,
                    id: 'description',
                    name: 'description',
                    label: this.sharedSvc.translate('DESCRIPTION'),
                    placeholder: this.sharedSvc.translate(WORKFLOW_EXPLANATION_TRANSLATIONS[workflowType]),
                    component: "textarea" /* FieldComponentType.textarea */,
                },
            ];
        };
    }
    getFormGroupFromWorkflowFactory(properties, factory) {
        const formGroup = new FormGroup({});
        properties.forEach((property) => {
            formGroup.addControl(property.attribute, this.getFormControlFromWorkflowProperty(property, factory));
        });
        return formGroup;
    }
    getFormControlFromWorkflowProperty(property, factory) {
        const { type } = property;
        const workflowSettings = factory.getWorkflow().settings;
        const validators = property.mandatory ? Validators.required : [];
        const asyncValidators = async (
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        control) => {
            await delay(500);
            control.markAsDirty();
            control.markAsTouched();
            return factory.validateAttribute(property)
                ? null
                : { validatorError: control.value };
        };
        switch (type) {
            case 'multiselect': {
                return new FormArray(workflowSettings[property.attribute]?.map((value) => {
                    return new FormControl(value);
                }) ?? [], validators, asyncValidators);
            }
            case 'select':
            case 'boolean':
            case 'number':
            case 'text': {
                return new FormControl(workflowSettings[property.attribute], 
                // property.mandatory ? Validators.required : [],
                validators, asyncValidators);
            }
            case 'process': {
                return createFormGroupFromData(factory.getCustomProcess(property.attribute) ?? []);
            }
        }
    }
    async getFieldFromWorkflowProperty(property, provider, options) {
        const { attribute, schema, datasource, label, mandatory, type } = property;
        const baseField = {
            category: '',
            builtin: true,
            editable: true,
            id: attribute,
            name: attribute,
            label: this.sharedSvc.translate(label),
            mandatory_for_planners: mandatory,
        };
        switch (type) {
            case 'select': {
                const attributeTranslations = await this.getFieldDataSourceTranslations(datasource, provider, options);
                return {
                    ...baseField,
                    type: 'select',
                    schema: mergeDeep(schema ?? {}, {
                        type: 'string',
                        enum: attributeTranslations.map(({ value }) => value),
                    }),
                    attributeTranslations,
                };
            }
            case 'multiselect': {
                const attributeTranslations = await this.getFieldDataSourceTranslations(property.datasource, provider, options);
                return {
                    ...baseField,
                    type: 'multi-select',
                    schema: mergeDeep(schema ?? {}, {
                        type: 'array',
                        items: {
                            type: 'string',
                            enum: attributeTranslations.map(({ value }) => value),
                        },
                    }),
                    attributeTranslations,
                };
            }
            case 'boolean':
            case 'number':
            case 'text': {
                return {
                    ...baseField,
                    type: type,
                    schema: mergeDeep(schema ?? {}, {
                        type: type === 'text' ? 'string' : type,
                    }),
                };
            }
            case 'process': {
                return {
                    ...baseField,
                    type: 'boolean',
                    schema: {
                        type: 'boolean',
                    },
                };
            }
        }
    }
    async getFieldDataSourceTranslations(dataSource, provider, options) {
        const dataSourceCallback = provider.dataSourceCallbacks[dataSource];
        const dataSourceRows = await dataSourceCallback(options.eventId, {
            skippedWorkflowIds: [options.workflowId],
        });
        const translationsCallback = this.translationsMapCallback[dataSource];
        return translationsCallback(dataSourceRows);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: AzavistaWorkflowBuilderFormFieldService, deps: [{ token: i1.AzavistaSharedService }, { token: i2.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: AzavistaWorkflowBuilderFormFieldService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: AzavistaWorkflowBuilderFormFieldService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.AzavistaSharedService }, { type: i2.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,