import { Component, Input } from '@angular/core';
import { firstValueFrom } from 'rxjs';
import { FormArray } from '@angular/forms';
import { WorkflowBuilderNodeFormFieldBaseComponent } from '../workflow-builder-node-form-field-text/workflow-builder-node-form-field-text.component';
import { WorkflowBuilderProcessBuilderDialogComponent, } from '../workflow-builder-process-builder-dialog/workflow-builder-process-builder-dialog.component';
import { createFormGroupFromData } from '../../utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "../../workflow-builder.controller";
import * as i3 from "@angular/common";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/icon";
import * as i6 from "@ngx-translate/core";
// eslint-disable-next-line max-len
export class WorkflowBuilderNodeFormFieldProcessComponent extends WorkflowBuilderNodeFormFieldBaseComponent {
    constructor(dialog, controller) {
        super();
        this.dialog = dialog;
        this.controller = controller;
    }
    async openSteps() {
        const fullProcess = {
            name: '',
            steps: this.control && Array.isArray(this.control?.value)
                ? this.control.value
                : [],
            // TODO: define trigger
            trigger: undefined,
            stage_submit: '',
            paused: false,
        };
        const dialogData = {
            eventId: this.eventId,
            processType: "participant" /* ProcessType.participant */,
            showOnlyFlowBuilder: true,
            fullProcess,
            getAclObjectForCurrentUser: () => ({
                allowed: true,
                availableScopes: [],
                requiredScopes: [],
            }),
        };
        const results = await firstValueFrom(this.dialog
            .open(WorkflowBuilderProcessBuilderDialogComponent, {
            data: dialogData,
            width: `800px`,
        })
            .afterClosed());
        if (results && this.control && this.control instanceof FormArray) {
            const controlArray = this.control;
            controlArray.controls.forEach(() => {
                controlArray.removeAt(-1);
            });
            results.forEach((step) => controlArray.push(createFormGroupFromData(step)));
            // controlArray.insert(new FormGroup<FormGroupType<Step>({
            // }))
            if (this.workflowId && this.property) {
                this.controller.updateWorkflowProcess(this.workflowId, this.property?.attribute, results);
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: WorkflowBuilderNodeFormFieldProcessComponent, deps: [{ token: i1.MatDialog }, { token: i2.AzavistaWorkflowBuilderController }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.10", type: WorkflowBuilderNodeFormFieldProcessComponent, selector: "azavista-workflow-builder-node-form-field-process", inputs: { property: "property" }, usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"property\">\r\n  <button\r\n    mat-flat-button\r\n    (click)=\"openSteps()\"\r\n    [class.has-steps]=\"control?.value?.length\"\r\n  >\r\n    <mat-icon *ngIf=\"!control?.value?.length\">add</mat-icon>\r\n    <mat-icon *ngIf=\"control?.value?.length\">settings</mat-icon>\r\n    {{ property.label | translate }}\r\n  </button>\r\n</ng-container>\r\n", styles: [":host{display:block}button{width:100%;border:2px dashed #C2D8F8;border-radius:4px;padding-left:1em;padding-right:1em}button:hover{background-color:#eee;border-width:3px;padding-left:calc(1em - 1px);padding-right:calc(1em - 1px)}button:hover ::ng-deep .mat-mdc-button-persistent-ripple:before,button:hover .mat-mdc-unelevated-button:hover .mat-mdc-button-persistent-ripple:before{opacity:0}button.has-steps{background-color:#e4ffd7}button.has-steps mat-icon{order:2;margin:0}button.has-steps ::ng-deep .mdc-button__label{flex:1;text-align:left}\n"], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: WorkflowBuilderNodeFormFieldProcessComponent, decorators: [{
            type: Component,
            args: [{ selector: 'azavista-workflow-builder-node-form-field-process', template: "<ng-container *ngIf=\"property\">\r\n  <button\r\n    mat-flat-button\r\n    (click)=\"openSteps()\"\r\n    [class.has-steps]=\"control?.value?.length\"\r\n  >\r\n    <mat-icon *ngIf=\"!control?.value?.length\">add</mat-icon>\r\n    <mat-icon *ngIf=\"control?.value?.length\">settings</mat-icon>\r\n    {{ property.label | translate }}\r\n  </button>\r\n</ng-container>\r\n", styles: [":host{display:block}button{width:100%;border:2px dashed #C2D8F8;border-radius:4px;padding-left:1em;padding-right:1em}button:hover{background-color:#eee;border-width:3px;padding-left:calc(1em - 1px);padding-right:calc(1em - 1px)}button:hover ::ng-deep .mat-mdc-button-persistent-ripple:before,button:hover .mat-mdc-unelevated-button:hover .mat-mdc-button-persistent-ripple:before{opacity:0}button.has-steps{background-color:#e4ffd7}button.has-steps mat-icon{order:2;margin:0}button.has-steps ::ng-deep .mdc-button__label{flex:1;text-align:left}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i2.AzavistaWorkflowBuilderController }]; }, propDecorators: { property: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,