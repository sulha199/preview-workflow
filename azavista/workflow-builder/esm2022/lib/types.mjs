import { InputPin, OutputPin, WorkflowType, } from '@azavista/workflow-builder-shared';
import { Diagram as DiagramSyncfusion, } from '@syncfusion/ej2-angular-diagrams';
export const PREFIX_NODE = 'node_';
export const PREFIX_PORT = 'port_';
export const PREFIX_CONNECTOR = 'connector_';
export const DEFAULT_NODE_WIDTH = 250;
export const DEFAULT_NODE_HEIGHT = 150;
export const DEFAULT_STROKE_WIDTH = 2;
export const DEFAULT_STROKE_COLOR = '#aaa';
export const DEFAULT_SELECTED_STROKE_COLOR = 'blue';
export const DEFAULT_ERROR_STROKE_COLOR = '#f00';
export const DEFAULT_CONNECTOR = {
    cornerRadius: 8,
    allowNodeOverlap: false,
    type: 'Orthogonal',
    segments: [{ type: 'Orthogonal' }],
    style: {
        strokeColor: DEFAULT_STROKE_COLOR,
        strokeWidth: DEFAULT_STROKE_WIDTH,
        fill: DEFAULT_STROKE_COLOR,
    },
    targetDecorator: {
        style: {
            fill: DEFAULT_STROKE_COLOR,
            strokeColor: DEFAULT_STROKE_COLOR,
            strokeWidth: DEFAULT_STROKE_WIDTH,
        },
        pivot: {
            x: -0.3,
        },
    },
    sourcePortID: 'port__output_pin',
    targetPortID: 'port__input_pin',
    // margin: {
    //     right: DEFAULT_PIN_SIZE * 2,
    //     bottom: DEFAULT_PIN_SIZE * 2,
    //     left: DEFAULT_PIN_SIZE * 2,
    //     top: DEFAULT_PIN_SIZE * 2,
    // },
};
export const OUTPUT_PIN_PAIR = {
    [OutputPin.OUTPUT]: InputPin.INPUT,
    [OutputPin.CANCELLATION_OUTPUT]: InputPin.CANCELLATION_INPUT,
    [OutputPin.DECLINE_OUTPUT]: InputPin.DECLINE_INPUT,
    [OutputPin.EXISTING_CONTACT]: InputPin.INPUT,
    [OutputPin.INVITED_CONTACT]: InputPin.INPUT,
    [OutputPin.NEW_CONTACT]: InputPin.INPUT,
};
export const WORKFLOW_NAME_TRANSLATIONS = {
    [WorkflowType.ARRIVAL]: 'ARRIVAL_WORKFLOW_NAME',
    [WorkflowType.CANCELLATION]: 'CANCELLATION_WORKFLOW_NAME',
    [WorkflowType.EVENT_CANCELLATION]: 'EVENT_CANCELLATION_WORKFLOW_NAME',
    [WorkflowType.INVITATION]: 'INVITATION_WORKFLOW_NAME',
    [WorkflowType.MULTI_REGISTRATION]: 'MULTI_REGISTRATION_WORKFLOW_NAME',
    [WorkflowType.PAYMENT]: 'PAYMENT_WORKFLOW_NAME',
    [WorkflowType.PAYMENT_WAITINGLIST]: 'PAYMENT_WAITINGLIST_WORKFLOW_NAME',
    [WorkflowType.PRE_ARRIVAL]: 'PRE_ARRIVAL_WORKFLOW_NAME',
    [WorkflowType.PROFILE]: 'PROFILE_WORKFLOW_NAME',
    [WorkflowType.PUBLIC_REGISTRATION]: 'PUBLIC_REGISTRATION_WORKFLOW_NAME',
    [WorkflowType.REGISTRATION]: 'REGISTRATION_WORKFLOW_NAME',
    [WorkflowType.REGISTRAION_WAITINGLIST]: 'REGISTRATION_WAITINGLIST_WORKFLOW_NAME',
    [WorkflowType.STAGE_ACTION]: 'STAGE_ACTION_WORKFLOW_NAME',
    [WorkflowType.DECLINE]: 'DECLINE_WORKFLOW_NAME',
    [WorkflowType.PUBLIC_REGISTRATION_AND_MEMBERSHIP]: 'PUBLIC_REGISTRATION_AND_MEMBERSHIP_WORKFLOW_NAME',
    [WorkflowType.WAITINGLIST]: 'WAITING_LIST_WORKFLOW_NAME',
    'create-work-block': 'CREATE_WORKBLOCK_NAME',
};
export const WORKFLOW_EXPLANATION_TRANSLATIONS = {
    [WorkflowType.ARRIVAL]: 'ARRIVAL_WORKFLOW_EXPLANATION',
    [WorkflowType.CANCELLATION]: 'CANCELLATION_WORKFLOW_EXPLANATION',
    [WorkflowType.EVENT_CANCELLATION]: 'EVENT_CANCELLATION_WORKFLOW_EXPLANATION',
    [WorkflowType.INVITATION]: 'INVITATION_WORKFLOW_EXPLANATION',
    [WorkflowType.MULTI_REGISTRATION]: 'MULTI_REGISTRATION_WORKFLOW_EXPLANATION',
    [WorkflowType.PAYMENT]: 'PAYMENT_WORKFLOW_EXPLANATION',
    [WorkflowType.PAYMENT_WAITINGLIST]: 'PAYMENT_WAITING_LIST_WORKFLOW_EXPLANATION',
    [WorkflowType.PRE_ARRIVAL]: 'PRE_ARRIVAL_WORKFLOW_EXPLANATION',
    [WorkflowType.PROFILE]: 'PROFILE_WORKFLOW_EXPLANATION',
    [WorkflowType.PUBLIC_REGISTRATION]: 'PUBLIC_REGISTRATION_WORKFLOW_EXPLANATION',
    [WorkflowType.REGISTRATION]: 'REGISTRATION_WORKFLOW_EXPLANATION',
    [WorkflowType.REGISTRAION_WAITINGLIST]: 'REGISTRATION_WAITING_LIST_WORKFLOW_EXPLANATION',
    [WorkflowType.STAGE_ACTION]: 'STAGE_ACTION_WORKFLOW_EXPLANATION',
    [WorkflowType.DECLINE]: 'DECLINE_WORKFLOW_EXPLANATION',
    [WorkflowType.PUBLIC_REGISTRATION_AND_MEMBERSHIP]: 'PUBLIC_REGISTRATION_AND_MEMBERSHIP_WORKFLOW_EXPLANATION',
    [WorkflowType.WAITINGLIST]: 'WAITING_LIST_WORKFLOW_EXPLANATION',
};
// TODO: Remove this when we have API endpoint with constants
export const ISO_LANGUAGES = [
    { id: 'en-US', label: 'English (United States)' },
    { id: 'en-GB', label: 'English (Great Britain)' },
    { id: 'de-DE', label: 'German' },
    { id: 'nl-NL', label: 'Dutch' },
    { id: 'fr-FR', label: 'French' },
    { id: 'es-ES', label: 'Spanish' },
    { id: 'ca-ES', label: 'Catalan (Spain)' },
    { id: 'da-DK', label: 'Danish' },
    { id: 'it-IT', label: 'Italian' },
    { id: 'pt-PT', label: 'Portuguese' },
    { id: 'pt-BR', label: 'Portuguese (Brazilizan)' },
    { id: 'sv-SE', label: 'Swedish' },
    { id: 'cs-CZ', label: 'Czech' },
    { id: 'el-GR', label: 'Greek' },
    { id: 'he-IL', label: 'Hebrew' },
    { id: 'hr-HR', label: 'Croatian' },
    { id: 'hu-HU', label: 'Hungarian' },
    { id: 'ja-JP', label: 'Japanese' },
    { id: 'ko-KR', label: 'Korean' },
    { id: 'nn-NO', label: 'Norwegian' },
    { id: 'pl-PL', label: 'Polish' },
    { id: 'ro-RO', label: 'Romanian' },
    { id: 'ru-RU', label: 'Russian' },
    { id: 'fi-FI', label: 'Finnish' },
    { id: 'zh-CN', label: 'Chinese (Simplified)' },
    { id: 'vi-VN', label: 'Vietnamese' },
    { id: 'sk-SK', label: 'Slovak' },
    { id: 'bg-BG', label: 'Bulgarian' },
    { id: 'tr-TR', label: 'Turkish' },
    { id: 'ur-PK', label: 'Urdu' },
    { id: 'hi-IN', label: 'Hindi' },
    { id: 'th-TH', label: 'Thai' },
    { id: 'ms-MY', label: 'Malay' },
    { id: 'id-ID', label: 'Indonesian' },
    { id: 'fil-PH', label: 'Filipino' },
    { id: 'sr-Latn', label: 'Serbian' },
    { id: 'ar-AE', label: 'Arabic' },
];
export const PALETTE_CATEGORIES_ORDER = [
    'INVITATION_WORKFLOWS',
    'REGISTRATION_WORKFLOWS',
    'WAITING_LIST_WORKFLOWS',
    'CANCELLATION_WORKFLOWS',
    'PAYMENT_WORKFLOWS',
    'OTHER_WORKFLOWS',
];
export const PALETTE_CATEGORIES_INDEX = {
    INVITATION_WORKFLOWS: 1,
    REGISTRATION_WORKFLOWS: 2,
    PAYMENT_WORKFLOWS: 3,
    WAITING_LIST_WORKFLOWS: 4,
    OTHER_WORKFLOWS: 5,
    CANCELLATION_WORKFLOWS: 0,
};
export const WORKFLOW_TYPE_CATEGORIES = {
    'create-work-block': ['OTHER_WORKFLOWS'],
    [WorkflowType.ARRIVAL]: ['REGISTRATION_WORKFLOWS'],
    [WorkflowType.CANCELLATION]: ['CANCELLATION_WORKFLOWS'],
    [WorkflowType.DECLINE]: ['CANCELLATION_WORKFLOWS'],
    [WorkflowType.EVENT_CANCELLATION]: ['CANCELLATION_WORKFLOWS'],
    [WorkflowType.INVITATION]: ['INVITATION_WORKFLOWS'],
    [WorkflowType.MULTI_REGISTRATION]: ['REGISTRATION_WORKFLOWS'],
    [WorkflowType.PAYMENT]: ['PAYMENT_WORKFLOWS'],
    [WorkflowType.PAYMENT_WAITINGLIST]: [
        'PAYMENT_WORKFLOWS',
        'WAITING_LIST_WORKFLOWS',
    ],
    [WorkflowType.PRE_ARRIVAL]: ['REGISTRATION_WORKFLOWS'],
    [WorkflowType.PROFILE]: ['OTHER_WORKFLOWS'],
    [WorkflowType.PUBLIC_REGISTRATION]: ['REGISTRATION_WORKFLOWS'],
    [WorkflowType.PUBLIC_REGISTRATION_AND_MEMBERSHIP]: [
        'REGISTRATION_WORKFLOWS',
    ],
    [WorkflowType.REGISTRAION_WAITINGLIST]: [
        'REGISTRATION_WORKFLOWS',
        'WAITING_LIST_WORKFLOWS',
    ],
    [WorkflowType.REGISTRATION]: ['REGISTRATION_WORKFLOWS'],
    [WorkflowType.STAGE_ACTION]: ['OTHER_WORKFLOWS'],
    [WorkflowType.WAITINGLIST]: ['WAITING_LIST_WORKFLOWS'],
};
export const WORKFLOW_TYPE_ORDER = {
    [WorkflowType.DECLINE]: 0,
    [WorkflowType.CANCELLATION]: 1,
    [WorkflowType.EVENT_CANCELLATION]: 2,
    [WorkflowType.INVITATION]: 3,
    [WorkflowType.PUBLIC_REGISTRATION]: 4,
    [WorkflowType.PUBLIC_REGISTRATION_AND_MEMBERSHIP]: 5,
    [WorkflowType.REGISTRAION_WAITINGLIST]: 6,
    [WorkflowType.REGISTRATION]: 7,
    [WorkflowType.MULTI_REGISTRATION]: 8,
    [WorkflowType.PAYMENT]: 9,
    [WorkflowType.PAYMENT_WAITINGLIST]: 10,
    [WorkflowType.WAITINGLIST]: 11,
    [WorkflowType.PRE_ARRIVAL]: 12,
    [WorkflowType.ARRIVAL]: 13,
    [WorkflowType.PROFILE]: 14,
    [WorkflowType.STAGE_ACTION]: 15,
};
export const getPaletteCategoryMap = () => {
    return Object.keys(WORKFLOW_TYPE_CATEGORIES).reduce((record, key) => {
        const paletteSymbol = key;
        WORKFLOW_TYPE_CATEGORIES[paletteSymbol].forEach((category) => {
            record[category] = [...(record[category] ?? []), paletteSymbol];
        });
        return record;
    }, {});
};
export const PALETTE_CATEGORIES_MAP = getPaletteCategoryMap();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hemF2aXN0YS93b3JrZmxvdy1idWlsZGVyL3NyYy9saWIvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUdILFFBQVEsRUFDUixTQUFTLEVBQ1QsWUFBWSxHQUNmLE1BQU0sbUNBQW1DLENBQUM7QUFFM0MsT0FBTyxFQUlILE9BQU8sSUFBSSxpQkFBaUIsR0FFL0IsTUFBTSxrQ0FBa0MsQ0FBQztBQUUxQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsT0FBZ0IsQ0FBQztBQUM1QyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsT0FBZ0IsQ0FBQztBQUM1QyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxZQUFxQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEdBQVksQ0FBQztBQUMvQyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxHQUFZLENBQUM7QUFFaEQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLE1BQU0sQ0FBQztBQUMzQyxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxNQUFNLENBQUM7QUFDcEQsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsTUFBTSxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFxQztJQUMvRCxZQUFZLEVBQUUsQ0FBQztJQUNmLGdCQUFnQixFQUFFLEtBQUs7SUFDdkIsSUFBSSxFQUFFLFlBQVk7SUFDbEIsUUFBUSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUM7SUFDbEMsS0FBSyxFQUFFO1FBQ0gsV0FBVyxFQUFFLG9CQUFvQjtRQUNqQyxXQUFXLEVBQUUsb0JBQW9CO1FBQ2pDLElBQUksRUFBRSxvQkFBb0I7S0FDN0I7SUFDRCxl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WUFBWSxFQUFFO0lBQ3BDLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUseUJBQXlCLEVBQUU7SUFDakQsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDakMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7SUFDL0IsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7SUFDL0IsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDaEMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUU7SUFDbEMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDbkMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUU7SUFDbEMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDaEMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDbkMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDaEMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUU7SUFDbEMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDakMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDakMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxzQkFBc0IsRUFBRTtJQUM5QyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUNwQyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUNoQyxFQUFFLEVBQUUsRUFB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RSxFQUFFO1lBQ3pELE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDLEVBQUUsRUFBd0IsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xyXG5pbXBvcnQgeyBGb3JtQXJyYXksIEZvcm1Db250cm9sLCBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IElFdmVudFdvcmtmbG93LCBJTGFuZ3VhZ2VJdGVtLCBJUGFnZSB9IGZyb20gJ0BhemF2aXN0YS9zZXJ2aWNlbGliJztcclxuaW1wb3J0IHtcclxuICAgIENhbnZhcyxcclxuICAgIENhbnZhc0l0ZW0sXHJcbiAgICBJbnB1dFBpbixcclxuICAgIE91dHB1dFBpbixcclxuICAgIFdvcmtmbG93VHlwZSxcclxufSBmcm9tICdAYXphdmlzdGEvd29ya2Zsb3ctYnVpbGRlci1zaGFyZWQnO1xyXG5pbXBvcnQgeyBnZXRDYW52YXNXb3JrZmxvdyB9IGZyb20gJ0BhemF2aXN0YS93b3JrZmxvdy1idWlsZGVyLXNoYXJlZC9saWIvZmFjdG9yeSc7XHJcbmltcG9ydCB7XHJcbiAgICBDb25uZWN0b3JNb2RlbCBhcyBDb25uZWN0b3JNb2RlbFN5bmNmdXNpb24sXHJcbiAgICBOb2RlTW9kZWwgYXMgTm9kZU1vZGVsU3luY2Z1c2lvbixcclxuICAgIFBvaW50UG9ydE1vZGVsIGFzIFBvaW50UG9ydE1vZGVsU3luY2Z1c2lvbixcclxuICAgIERpYWdyYW0gYXMgRGlhZ3JhbVN5bmNmdXNpb24sXHJcbiAgICBDb25uZWN0b3IsXHJcbn0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItZGlhZ3JhbXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBSRUZJWF9OT0RFID0gJ25vZGVfJyBhcyBjb25zdDtcclxuZXhwb3J0IGNvbnN0IFBSRUZJWF9QT1JUID0gJ3BvcnRfJyBhcyBjb25zdDtcclxuZXhwb3J0IGNvbnN0IFBSRUZJWF9DT05ORUNUT1IgPSAnY29ubmVjdG9yXycgYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9OT0RFX1dJRFRIID0gMjUwIGFzIGNvbnN0O1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9OT0RFX0hFSUdIVCA9IDE1MCBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NUUk9LRV9XSURUSCA9IDI7XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NUUk9LRV9DT0xPUiA9ICcjYWFhJztcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VMRUNURURfU1RST0tFX0NPTE9SID0gJ2JsdWUnO1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9FUlJPUl9TVFJPS0VfQ09MT1IgPSAnI2YwMCc7XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTk5FQ1RPUjogQ29ubmVjdG9yTW9kZWw8T3V0cHV0UGluLk9VVFBVVD4gPSB7XHJcbiAgICBjb3JuZXJSYWRpdXM6IDgsXHJcbiAgICBhbGxvd05vZGVPdmVybGFwOiBmYWxzZSxcclxuICAgIHR5cGU6ICdPcnRob2dvbmFsJyxcclxuICAgIHNlZ21lbnRzOiBbeyB0eXBlOiAnT3J0aG9nb25hbCcgfV0sXHJcbiAgICBzdHlsZToge1xyXG4gICAgICAgIHN0cm9rZUNvbG9yOiBERUZBVUxUX1NUUk9LRV9DT0xPUixcclxuICAgICAgICBzdHJva2VXaWR0aDogREVGQVVMVF9TVFJPS0VfV0lEVEgsXHJcbiAgICAgICAgZmlsbDogREVGQVVMVF9TVFJPS0VfQ09MT1IsXHJcbiAgICB9LFxyXG4gICAgdGFyZ2V0RGVjb3JhdG9yOiB7XHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgZmlsbDogREVGQVVMVF9TVFJPS0VfQ09MT1IsXHJcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBERUZBVUxUX1NUUk9LRV9DT0xPUixcclxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IERFRkFVTFRfU1RST0tFX1dJRFRILFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGl2b3Q6IHtcclxuICAgICAgICAgICAgeDogLTAuMyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHNvdXJjZVBvcnRJRDogJ3BvcnRfX291dHB1dF9waW4nLFxyXG4gICAgdGFyZ2V0UG9ydElEOiAncG9ydF9faW5wdXRfcGluJyxcclxuICAgIC8vIG1hcmdpbjoge1xyXG4gICAgLy8gICAgIHJpZ2h0OiBERUZBVUxUX1BJTl9TSVpFICogMixcclxuICAgIC8vICAgICBib3R0b206IERFRkFVTFRfUElOX1NJWkUgKiAyLFxyXG4gICAgLy8gICAgIGxlZnQ6IERFRkFVTFRfUElOX1NJWkUgKiAyLFxyXG4gICAgLy8gICAgIHRvcDogREVGQVVMVF9QSU5fU0laRSAqIDIsXHJcbiAgICAvLyB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IE9VVFBVVF9QSU5fUEFJUiA9IHtcclxuICAgIFtPdXRwdXRQaW4uT1VUUFVUXTogSW5wdXRQaW4uSU5QVVQsXHJcbiAgICBbT3V0cHV0UGluLkNBTkNFTExBVElPTl9PVVRQVVRdOiBJbnB1dFBpbi5DQU5DRUxMQVRJT05fSU5QVVQsXHJcbiAgICBbT3V0cHV0UGluLkRFQ0xJTkVfT1VUUFVUXTogSW5wdXRQaW4uREVDTElORV9JTlBVVCxcclxuICAgIFtPdXRwdXRQaW4uRVhJU1RJTkdfQ09OVEFDVF06IElucHV0UGluLklOUFVULFxyXG4gICAgW091dHB1dFBpbi5JTlZJVEVEX0NPTlRBQ1RdOiBJbnB1dFBpbi5JTlBVVCxcclxuICAgIFtPdXRwdXRQaW4uTkVXX0NPTlRBQ1RdOiBJbnB1dFBpbi5JTlBVVCxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCB0eXBlIEN1c3RvbVBhbGV0dGVUeXBlID0gJ2NyZWF0ZS13b3JrLWJsb2NrJztcclxuXHJcbmV4cG9ydCB0eXBlIFBhbGV0dGVTeW1ib2wgPSBXb3JrZmxvd1R5cGUgfCBDdXN0b21QYWxldHRlVHlwZTtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGV4cG9ydCB0eXBlIFBvcnRJZElucHV0TW9kZWw8VCBleHRlbmRzIElucHV0UGluID0gSW5wdXRQaW4+ID1cclxuICAgICAgICBgJHt0eXBlb2YgUFJFRklYX1BPUlR9XyR7VH1fcGluYDtcclxuICAgIGV4cG9ydCB0eXBlIFBvcnRJZE91dHB1dE1vZGVsPFQgZXh0ZW5kcyBPdXRwdXRQaW4gPSBPdXRwdXRQaW4+ID1cclxuICAgICAgICBgJHt0eXBlb2YgUFJFRklYX1BPUlR9XyR7VH1fcGluYDtcclxuICAgIGV4cG9ydCB0eXBlIFBvcnRJZE1vZGVsID0gUG9ydElkSW5wdXRNb2RlbCB8IFBvcnRJZE91dHB1dE1vZGVsO1xyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUG9pbnRQb3J0TW9kZWwgZXh0ZW5kcyBQb2ludFBvcnRNb2RlbFN5bmNmdXNpb24ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmluZXMgdGhlIHVuaXF1ZSBpZCBvZiB0aGUgcG9ydCB3aXRoIHRoZSBwaW4gdHlwZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlkOiBQb3J0SWRNb2RlbDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgdHlwZSBOb2RlSWRNb2RlbDxOb2RlSWQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+ID1cclxuICAgICAgICBgJHt0eXBlb2YgUFJFRklYX05PREV9JHtOb2RlSWR9YDtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIE5vZGVNb2RlbDxOb2RlSWQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+XHJcbiAgICAgICAgZXh0ZW5kcyBOb2RlTW9kZWxTeW5jZnVzaW9uIHtcclxuICAgICAgICBpZDogTm9kZUlkTW9kZWw8Tm9kZUlkPjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWZpbmVzIHRoZSBjb2xsZWN0aW9uIG9mIGNvbm5lY3Rpb24gcG9pbnRzIG9mIG5vZGVzL2Nvbm5lY3RvcnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBwb3J0czogUG9pbnRQb3J0TW9kZWxbXTtcclxuICAgICAgICBzaGFwZTogeyB0eXBlOiAnSFRNTCc7IGNvbnRlbnQ/OiBzdHJpbmcgfTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgdHlwZSBOb2RlTW9kZWxGb3JQYWxldHRlPFxyXG4gICAgICAgIE5vZGVJZCBleHRlbmRzIFBhbGV0dGVTeW1ib2wgPSBXb3JrZmxvd1R5cGUsXHJcbiAgICA+ID0gT21pdDxOb2RlTW9kZWw8Tm9kZUlkPiwgJ2lkJyB8ICdhZGRJbmZvJz4gJiB7XHJcbiAgICAgICAgaWQ6IE5vZGVJZDtcclxuICAgICAgICBhZGRJbmZvOiB7IHR5cGU6IE5vZGVJZDsgbGFiZWw6IHN0cmluZyB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbm5lY3Rvck1vZGVsPFxyXG4gICAgICAgIE91dHB1dCBleHRlbmRzIE91dHB1dFBpbiA9IE91dHB1dFBpbixcclxuICAgICAgICBTb3VyY2VJZCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcclxuICAgICAgICBUYXJnZXRJZCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcclxuICAgID4gZXh0ZW5kcyBDb25uZWN0b3JNb2RlbFN5bmNmdXNpb24ge1xyXG4gICAgICAgIHNvdXJjZUlEPzogTm9kZUlkTW9kZWw8U291cmNlSWQ+O1xyXG4gICAgICAgIHNvdXJjZVBvcnRJRDogUG9ydElkT3V0cHV0TW9kZWw8T3V0cHV0PjtcclxuICAgICAgICB0YXJnZXRJRD86IE5vZGVJZE1vZGVsPFRhcmdldElkPjtcclxuICAgICAgICB0YXJnZXRQb3J0SUQ6IFBvcnRJZElucHV0TW9kZWw8KHR5cGVvZiBPVVRQVVRfUElOX1BBSVIpW091dHB1dF0+O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBEaWFncmFtIGV4dGVuZHMgRGlhZ3JhbVN5bmNmdXNpb24ge1xyXG4gICAgICAgIG5vZGVzOiBOb2RlTW9kZWw8c3RyaW5nPltdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBDb29yZGluYXRlID0ge1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgV29ya2Zsb3dJdGVtRGlhZ3JhbURhdGEgPSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgZGlhZ3JhbToge1xyXG4gICAgICAgIHBvc2l0aW9uOiBDb29yZGluYXRlO1xyXG4gICAgfTtcclxuICAgIHdvcmtmbG93OiBJRXZlbnRXb3JrZmxvdztcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIERyYWZ0Q29ubmVjdG9yUG9zaXRpb24gPVxyXG4gICAgfCB7XHJcbiAgICAgICAgICBzdGFnZUlkOiBzdHJpbmc7XHJcbiAgICAgICAgICBjb29yZGluYXRlPzogbmV2ZXI7XHJcbiAgICAgIH1cclxuICAgIHwge1xyXG4gICAgICAgICAgc3RhZ2VJZD86IG5ldmVyO1xyXG4gICAgICAgICAgY29vcmRpbmF0ZTogQ29vcmRpbmF0ZTtcclxuICAgICAgfTtcclxuZXhwb3J0IHR5cGUgRHJhZnRDb25uZWN0b3IgPSB7XHJcbiAgICBzb3VyY2U6IERyYWZ0Q29ubmVjdG9yUG9zaXRpb247XHJcbiAgICB0YXJnZXQ6IERyYWZ0Q29ubmVjdG9yUG9zaXRpb247XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBXb3JrZmxvd0J1aWxkZXJEYXRhID0ge1xyXG4gICAgd29ya2Zsb3dzOiBDYW52YXNJdGVtW107XHJcbiAgICBkcmFmdENvbm5lY3RvcnM6IERyYWZ0Q29ubmVjdG9yW107XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBTYXZlV29ya2Zsb3dTdGFnZURyYWZ0ID0gV29ya2Zsb3dCdWlsZGVyRGF0YTtcclxuXHJcbmV4cG9ydCB0eXBlIFB1Ymxpc2hXb3JrZmxvd1N0YWdlID0gV29ya2Zsb3dCdWlsZGVyRGF0YTtcclxuXHJcbmV4cG9ydCB0eXBlIElCYXNpY1BhZ2UgPSBPbWl0PFxyXG4gICAgSVBhZ2UsXHJcbiAgICAnZ3JhcGVzX2pzb24nIHwgJ3BhZ2Vfc3VidHlwZScgfCAncGFnZV90eXBlJyB8ICdmb290ZXJfcGFnZV9pZCdcclxuPiAmIHtcclxuICAgIGZvb3Rlcl9wYWdlX2lkPzogSVBhZ2VbJ2Zvb3Rlcl9wYWdlX2lkJ10gfCBudWxsO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgVmFsaWRDb25uZWN0b3JNb2RlbDxcclxuICAgIE91dHB1dCBleHRlbmRzIE91dHB1dFBpbixcclxuICAgIFNvdXJjZUlkIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxyXG4gICAgVGFyZ2V0SWQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmcsXHJcbj4gPSBDb25uZWN0b3JNb2RlbDxPdXRwdXQsIFNvdXJjZUlkLCBUYXJnZXRJZD4gJiB7XHJcbiAgICBzb3VyY2VJRDogTm9kZUlkTW9kZWw8U291cmNlSWQ+O1xyXG4gICAgdGFyZ2V0SUQ6IE5vZGVJZE1vZGVsPFRhcmdldElkPjtcclxuICAgIHNvdXJjZVBvcnRJRDogUG9ydElkT3V0cHV0TW9kZWw8T3V0cHV0PjtcclxuICAgIHRhcmdldFBvcnRJRDogUG9ydElkSW5wdXRNb2RlbDwodHlwZW9mIE9VVFBVVF9QSU5fUEFJUilbT3V0cHV0XT47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBEaWFncmFtRXZlbnRCYXNlID0ge1xyXG4gICAgc3RhdGU6ICdTdGFydCcgfCAnUHJvZ3Jlc3MnIHwgJ0NvbXBsZXRlZCc7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBDb25uZWN0aW9uUG9pbnRDaGFuZ2VFdmVudCA9IERpYWdyYW1FdmVudEJhc2UgJiB7XHJcbiAgICBjb25uZWN0b3I6IENvbm5lY3RvcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEVsZW1lbnREcmF3Q29ubmVjdG9yRXZlbnQgPSBEaWFncmFtRXZlbnRCYXNlICYge1xyXG4gICAgb2JqZWN0VHlwZTogJ0Nvbm5lY3Rvcic7XHJcbiAgICBzb3VyY2U6IENvbm5lY3RvcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEVsZW1lbnREcmF3RXZlbnQgPSBFbGVtZW50RHJhd0Nvbm5lY3RvckV2ZW50O1xyXG5cclxuZXhwb3J0IHR5cGUgQ2FudmFzV29ya2Zsb3dGYWN0b3J5PFQgZXh0ZW5kcyBXb3JrZmxvd1R5cGU+ID0gUmV0dXJuVHlwZTxcclxuICAgIHR5cGVvZiBnZXRDYW52YXNXb3JrZmxvdzxUPlxyXG4+O1xyXG5cclxuZXhwb3J0IHR5cGUgQ2FudmFzQ29udHJvbGxlckRhdGE8VyBleHRlbmRzIFdvcmtmbG93VHlwZT4gPSB7XHJcbiAgICBmYWN0b3J5OiBDYW52YXNXb3JrZmxvd0ZhY3Rvcnk8Vz47XHJcbn0gJiBDYW52YXM7XHJcblxyXG5leHBvcnQgdHlwZSBDYW52YXNXb3JrZmxvd01hcDxUPiA9IHtcclxuICAgIFt3b3JrZmxvd0lkOiBzdHJpbmddOiBUO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgV29ya2Zsb3dQcm9wZXJ0eVR5cGUgPVxyXG4gICAgfCAnc2VsZWN0J1xyXG4gICAgfCAnbXVsdGlzZWxlY3QnXHJcbiAgICB8ICd0ZXh0J1xyXG4gICAgfCAnYm9vbGVhbidcclxuICAgIHwgJ251bWJlcic7XHJcbmV4cG9ydCBjb25zdCBXT1JLRkxPV19OQU1FX1RSQU5TTEFUSU9OUzogUmVjb3JkPFxyXG4gICAgV29ya2Zsb3dUeXBlIHwgQ3VzdG9tUGFsZXR0ZVR5cGUsXHJcbiAgICBgJHtzdHJpbmd9X05BTUVgXHJcbj4gPSB7XHJcbiAgICBbV29ya2Zsb3dUeXBlLkFSUklWQUxdOiAnQVJSSVZBTF9XT1JLRkxPV19OQU1FJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuQ0FOQ0VMTEFUSU9OXTogJ0NBTkNFTExBVElPTl9XT1JLRkxPV19OQU1FJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuRVZFTlRfQ0FOQ0VMTEFUSU9OXTogJ0VWRU5UX0NBTkNFTExBVElPTl9XT1JLRkxPV19OQU1FJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuSU5WSVRBVElPTl06ICdJTlZJVEFUSU9OX1dPUktGTE9XX05BTUUnLFxyXG4gICAgW1dvcmtmbG93VHlwZS5NVUxUSV9SRUdJU1RSQVRJT05dOiAnTVVMVElfUkVHSVNUUkFUSU9OX1dPUktGTE9XX05BTUUnLFxyXG4gICAgW1dvcmtmbG93VHlwZS5QQVlNRU5UXTogJ1BBWU1FTlRfV09SS0ZMT1dfTkFNRScsXHJcbiAgICBbV29ya2Zsb3dUeXBlLlBBWU1FTlRfV0FJVElOR0xJU1RdOiAnUEFZTUVOVF9XQUlUSU5HTElTVF9XT1JLRkxPV19OQU1FJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFJFX0FSUklWQUxdOiAnUFJFX0FSUklWQUxfV09SS0ZMT1dfTkFNRScsXHJcbiAgICBbV29ya2Zsb3dUeXBlLlBST0ZJTEVdOiAnUFJPRklMRV9XT1JLRkxPV19OQU1FJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFVCTElDX1JFR0lTVFJBVElPTl06ICdQVUJMSUNfUkVHSVNUUkFUSU9OX1dPUktGTE9XX05BTUUnLFxyXG4gICAgW1dvcmtmbG93VHlwZS5SRUdJU1RSQVRJT05dOiAnUkVHSVNUUkFUSU9OX1dPUktGTE9XX05BTUUnLFxyXG4gICAgW1dvcmtmbG93VHlwZS5SRUdJU1RSQUlPTl9XQUlUSU5HTElTVF06XHJcbiAgICAgICAgJ1JFR0lTVFJBVElPTl9XQUlUSU5HTElTVF9XT1JLRkxPV19OQU1FJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuU1RBR0VfQUNUSU9OXTogJ1NUQUdFX0FDVElPTl9XT1JLRkxPV19OQU1FJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuREVDTElORV06ICdERUNMSU5FX1dPUktGTE9XX05BTUUnLFxyXG4gICAgW1dvcmtmbG93VHlwZS5QVUJMSUNfUkVHSVNUUkFUSU9OX0FORF9NRU1CRVJTSElQXTpcclxuICAgICAgICAnUFVCTElDX1JFR0lTVFJBVElPTl9BTkRfTUVNQkVSU0hJUF9XT1JLRkxPV19OQU1FJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuV0FJVElOR0xJU1RdOiAnV0FJVElOR19MSVNUX1dPUktGTE9XX05BTUUnLFxyXG4gICAgJ2NyZWF0ZS13b3JrLWJsb2NrJzogJ0NSRUFURV9XT1JLQkxPQ0tfTkFNRScsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgV09SS0ZMT1dfRVhQTEFOQVRJT05fVFJBTlNMQVRJT05TOiBSZWNvcmQ8XHJcbiAgICBXb3JrZmxvd1R5cGUsXHJcbiAgICBgJHtzdHJpbmd9X0VYUExBTkFUSU9OYFxyXG4+ID0ge1xyXG4gICAgW1dvcmtmbG93VHlwZS5BUlJJVkFMXTogJ0FSUklWQUxfV09SS0ZMT1dfRVhQTEFOQVRJT04nLFxyXG4gICAgW1dvcmtmbG93VHlwZS5DQU5DRUxMQVRJT05dOiAnQ0FOQ0VMTEFUSU9OX1dPUktGTE9XX0VYUExBTkFUSU9OJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuRVZFTlRfQ0FOQ0VMTEFUSU9OXTpcclxuICAgICAgICAnRVZFTlRfQ0FOQ0VMTEFUSU9OX1dPUktGTE9XX0VYUExBTkFUSU9OJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuSU5WSVRBVElPTl06ICdJTlZJVEFUSU9OX1dPUktGTE9XX0VYUExBTkFUSU9OJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuTVVMVElfUkVHSVNUUkFUSU9OXTpcclxuICAgICAgICAnTVVMVElfUkVHSVNUUkFUSU9OX1dPUktGTE9XX0VYUExBTkFUSU9OJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuUEFZTUVOVF06ICdQQVlNRU5UX1dPUktGTE9XX0VYUExBTkFUSU9OJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuUEFZTUVOVF9XQUlUSU5HTElTVF06XHJcbiAgICAgICAgJ1BBWU1FTlRfV0FJVElOR19MSVNUX1dPUktGTE9XX0VYUExBTkFUSU9OJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFJFX0FSUklWQUxdOiAnUFJFX0FSUklWQUxfV09SS0ZMT1dfRVhQTEFOQVRJT04nLFxyXG4gICAgW1dvcmtmbG93VHlwZS5QUk9GSUxFXTogJ1BST0ZJTEVfV09SS0ZMT1dfRVhQTEFOQVRJT04nLFxyXG4gICAgW1dvcmtmbG93VHlwZS5QVUJMSUNfUkVHSVNUUkFUSU9OXTpcclxuICAgICAgICAnUFVCTElDX1JFR0lTVFJBVElPTl9XT1JLRkxPV19FWFBMQU5BVElPTicsXHJcbiAgICBbV29ya2Zsb3dUeXBlLlJFR0lTVFJBVElPTl06ICdSRUdJU1RSQVRJT05fV09SS0ZMT1dfRVhQTEFOQVRJT04nLFxyXG4gICAgW1dvcmtmbG93VHlwZS5SRUdJU1RSQUlPTl9XQUlUSU5HTElTVF06XHJcbiAgICAgICAgJ1JFR0lTVFJBVElPTl9XQUlUSU5HX0xJU1RfV09SS0ZMT1dfRVhQTEFOQVRJT04nLFxyXG4gICAgW1dvcmtmbG93VHlwZS5TVEFHRV9BQ1RJT05dOiAnU1RBR0VfQUNUSU9OX1dPUktGTE9XX0VYUExBTkFUSU9OJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuREVDTElORV06ICdERUNMSU5FX1dPUktGTE9XX0VYUExBTkFUSU9OJyxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFVCTElDX1JFR0lTVFJBVElPTl9BTkRfTUVNQkVSU0hJUF06XHJcbiAgICAgICAgJ1BVQkxJQ19SRUdJU1RSQVRJT05fQU5EX01FTUJFUlNISVBfV09SS0ZMT1dfRVhQTEFOQVRJT04nLFxyXG4gICAgW1dvcmtmbG93VHlwZS5XQUlUSU5HTElTVF06ICdXQUlUSU5HX0xJU1RfV09SS0ZMT1dfRVhQTEFOQVRJT04nLFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQ29udHJvbFR5cGU8TW9kZWw+ID0gTW9kZWwgZXh0ZW5kcyBhbnlbXVxyXG4gICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcclxuICAgICAgQXJyYXlDb250cm9sVHlwZTxNb2RlbFtudW1iZXJdPlxyXG4gICAgOiBNb2RlbCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYW55IH1cclxuICAgICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIEZvcm1Hcm91cDxGb3JtR3JvdXBUeXBlPE1vZGVsPj5cclxuICAgICAgOiBGb3JtQ29udHJvbDxNb2RlbCB8IG51bGw+O1xyXG5cclxudHlwZSBBcnJheUNvbnRyb2xUeXBlPFJvdz4gPSBGb3JtQXJyYXk8Q29udHJvbFR5cGU8Um93Pj47XHJcblxyXG4vKiogR2VuZXJhdGUgRm9ybS1Hcm91cCB0eXBlIHVzaW5nIGludGVyZmFjZS90eXBlICovXHJcbmV4cG9ydCB0eXBlIEZvcm1Hcm91cFR5cGU8TW9kZWwgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IGFueSB9PiA9IHtcclxuICAgIFtLIGluIGtleW9mIFJlcXVpcmVkPE1vZGVsPl06IENvbnRyb2xUeXBlPE1vZGVsW0tdPjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIFByb2Nlc3NUeXBlIHtcclxuICAgIHBhcnRpY2lwYW50ID0gJ3BhcnRpY2lwYW50JyxcclxuICAgIGV2ZW50ID0gJ2V2ZW50JyxcclxuICAgIGJvb2tpbmcgPSAnYm9va2luZycsXHJcbn1cclxuXHJcbi8vIFRPRE86IFJlbW92ZSB0aGlzIHdoZW4gd2UgaGF2ZSBBUEkgZW5kcG9pbnQgd2l0aCBjb25zdGFudHNcclxuZXhwb3J0IGNvbnN0IElTT19MQU5HVUFHRVM6IElMYW5ndWFnZUl0ZW1bXSA9IFtcclxuICAgIHsgaWQ6ICdlbi1VUycsIGxhYmVsOiAnRW5nbGlzaCAoVW5pdGVkIFN0YXRlcyknIH0sXHJcbiAgICB7IGlkOiAnZW4tR0InLCBsYWJlbDogJ0VuZ2xpc2ggKEdyZWF0IEJyaXRhaW4pJyB9LFxyXG4gICAgeyBpZDogJ2RlLURFJywgbGFiZWw6ICdHZXJtYW4nIH0sXHJcbiAgICB7IGlkOiAnbmwtTkwnLCBsYWJlbDogJ0R1dGNoJyB9LFxyXG4gICAgeyBpZDogJ2ZyLUZSJywgbGFiZWw6ICdGcmVuY2gnIH0sXHJcbiAgICB7IGlkOiAnZXMtRVMnLCBsYWJlbDogJ1NwYW5pc2gnIH0sXHJcbiAgICB7IGlkOiAnY2EtRVMnLCBsYWJlbDogJ0NhdGFsYW4gKFNwYWluKScgfSxcclxuICAgIHsgaWQ6ICdkYS1ESycsIGxhYmVsOiAnRGFuaXNoJyB9LFxyXG4gICAgeyBpZDogJ2l0LUlUJywgbGFiZWw6ICdJdGFsaWFuJyB9LFxyXG4gICAgeyBpZDogJ3B0LVBUJywgbGFiZWw6ICdQb3J0dWd1ZXNlJyB9LFxyXG4gICAgeyBpZDogJ3B0LUJSJywgbGFiZWw6ICdQb3J0dWd1ZXNlIChCcmF6aWxpemFuKScgfSxcclxuICAgIHsgaWQ6ICdzdi1TRScsIGxhYmVsOiAnU3dlZGlzaCcgfSxcclxuICAgIHsgaWQ6ICdjcy1DWicsIGxhYmVsOiAnQ3plY2gnIH0sXHJcbiAgICB7IGlkOiAnZWwtR1InLCBsYWJlbDogJ0dyZWVrJyB9LFxyXG4gICAgeyBpZDogJ2hlLUlMJywgbGFiZWw6ICdIZWJyZXcnIH0sXHJcbiAgICB7IGlkOiAnaHItSFInLCBsYWJlbDogJ0Nyb2F0aWFuJyB9LFxyXG4gICAgeyBpZDogJ2h1LUhVJywgbGFiZWw6ICdIdW5nYXJpYW4nIH0sXHJcbiAgICB7IGlkOiAnamEtSlAnLCBsYWJlbDogJ0phcGFuZXNlJyB9LFxyXG4gICAgeyBpZDogJ2tvLUtSJywgbGFiZWw6ICdLb3JlYW4nIH0sXHJcbiAgICB7IGlkOiAnbm4tTk8nLCBsYWJlbDogJ05vcndlZ2lhbicgfSxcclxuICAgIHsgaWQ6ICdwbC1QTCcsIGxhYmVsOiAnUG9saXNoJyB9LFxyXG4gICAgeyBpZDogJ3JvLVJPJywgbGFiZWw6ICdSb21hbmlhbicgfSxcclxuICAgIHsgaWQ6ICdydS1SVScsIGxhYmVsOiAnUnVzc2lhbicgfSxcclxuICAgIHsgaWQ6ICdmaS1GSScsIGxhYmVsOiAnRmlubmlzaCcgfSxcclxuICAgIHsgaWQ6ICd6aC1DTicsIGxhYmVsOiAnQ2hpbmVzZSAoU2ltcGxpZmllZCknIH0sXHJcbiAgICB7IGlkOiAndmktVk4nLCBsYWJlbDogJ1ZpZXRuYW1lc2UnIH0sXHJcbiAgICB7IGlkOiAnc2stU0snLCBsYWJlbDogJ1Nsb3ZhaycgfSxcclxuICAgIHsgaWQ6ICdiZy1CRycsIGxhYmVsOiAnQnVsZ2FyaWFuJyB9LFxyXG4gICAgeyBpZDogJ3RyLVRSJywgbGFiZWw6ICdUdXJraXNoJyB9LFxyXG4gICAgeyBpZDogJ3VyLVBLJywgbGFiZWw6ICdVcmR1JyB9LFxyXG4gICAgeyBpZDogJ2hpLUlOJywgbGFiZWw6ICdIaW5kaScgfSxcclxuICAgIHsgaWQ6ICd0aC1USCcsIGxhYmVsOiAnVGhhaScgfSxcclxuICAgIHsgaWQ6ICdtcy1NWScsIGxhYmVsOiAnTWFsYXknIH0sXHJcbiAgICB7IGlkOiAnaWQtSUQnLCBsYWJlbDogJ0luZG9uZXNpYW4nIH0sXHJcbiAgICB7IGlkOiAnZmlsLVBIJywgbGFiZWw6ICdGaWxpcGlubycgfSxcclxuICAgIHsgaWQ6ICdzci1MYXRuJywgbGFiZWw6ICdTZXJiaWFuJyB9LFxyXG4gICAgeyBpZDogJ2FyLUFFJywgbGFiZWw6ICdBcmFiaWMnIH0sXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgUEFMRVRURV9DQVRFR09SSUVTX09SREVSID0gW1xyXG4gICAgJ0lOVklUQVRJT05fV09SS0ZMT1dTJyxcclxuICAgICdSRUdJU1RSQVRJT05fV09SS0ZMT1dTJyxcclxuICAgICdXQUlUSU5HX0xJU1RfV09SS0ZMT1dTJyxcclxuICAgICdDQU5DRUxMQVRJT05fV09SS0ZMT1dTJyxcclxuICAgICdQQVlNRU5UX1dPUktGTE9XUycsXHJcbiAgICAnT1RIRVJfV09SS0ZMT1dTJyxcclxuXSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCB0eXBlIFBhbGV0dGVDYXRlZ29yeSA9ICh0eXBlb2YgUEFMRVRURV9DQVRFR09SSUVTX09SREVSKVtudW1iZXJdO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBBTEVUVEVfQ0FURUdPUklFU19JTkRFWDogUmVjb3JkPFBhbGV0dGVDYXRlZ29yeSwgbnVtYmVyPiA9IHtcclxuICAgIElOVklUQVRJT05fV09SS0ZMT1dTOiAxLFxyXG4gICAgUkVHSVNUUkFUSU9OX1dPUktGTE9XUzogMixcclxuICAgIFBBWU1FTlRfV09SS0ZMT1dTOiAzLFxyXG4gICAgV0FJVElOR19MSVNUX1dPUktGTE9XUzogNCxcclxuICAgIE9USEVSX1dPUktGTE9XUzogNSxcclxuICAgIENBTkNFTExBVElPTl9XT1JLRkxPV1M6IDAsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgV09SS0ZMT1dfVFlQRV9DQVRFR09SSUVTOiBSZWNvcmQ8XHJcbiAgICBQYWxldHRlU3ltYm9sLFxyXG4gICAgUGFsZXR0ZUNhdGVnb3J5W11cclxuPiA9IHtcclxuICAgICdjcmVhdGUtd29yay1ibG9jayc6IFsnT1RIRVJfV09SS0ZMT1dTJ10sXHJcbiAgICBbV29ya2Zsb3dUeXBlLkFSUklWQUxdOiBbJ1JFR0lTVFJBVElPTl9XT1JLRkxPV1MnXSxcclxuICAgIFtXb3JrZmxvd1R5cGUuQ0FOQ0VMTEFUSU9OXTogWydDQU5DRUxMQVRJT05fV09SS0ZMT1dTJ10sXHJcbiAgICBbV29ya2Zsb3dUeXBlLkRFQ0xJTkVdOiBbJ0NBTkNFTExBVElPTl9XT1JLRkxPV1MnXSxcclxuICAgIFtXb3JrZmxvd1R5cGUuRVZFTlRfQ0FOQ0VMTEFUSU9OXTogWydDQU5DRUxMQVRJT05fV09SS0ZMT1dTJ10sXHJcbiAgICBbV29ya2Zsb3dUeXBlLklOVklUQVRJT05dOiBbJ0lOVklUQVRJT05fV09SS0ZMT1dTJ10sXHJcbiAgICBbV29ya2Zsb3dUeXBlLk1VTFRJX1JFR0lTVFJBVElPTl06IFsnUkVHSVNUUkFUSU9OX1dPUktGTE9XUyddLFxyXG4gICAgW1dvcmtmbG93VHlwZS5QQVlNRU5UXTogWydQQVlNRU5UX1dPUktGTE9XUyddLFxyXG4gICAgW1dvcmtmbG93VHlwZS5QQVlNRU5UX1dBSVRJTkdMSVNUXTogW1xyXG4gICAgICAgICdQQVlNRU5UX1dPUktGTE9XUycsXHJcbiAgICAgICAgJ1dBSVRJTkdfTElTVF9XT1JLRkxPV1MnLFxyXG4gICAgXSxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFJFX0FSUklWQUxdOiBbJ1JFR0lTVFJBVElPTl9XT1JLRkxPV1MnXSxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFJPRklMRV06IFsnT1RIRVJfV09SS0ZMT1dTJ10sXHJcbiAgICBbV29ya2Zsb3dUeXBlLlBVQkxJQ19SRUdJU1RSQVRJT05dOiBbJ1JFR0lTVFJBVElPTl9XT1JLRkxPV1MnXSxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFVCTElDX1JFR0lTVFJBVElPTl9BTkRfTUVNQkVSU0hJUF06IFtcclxuICAgICAgICAnUkVHSVNUUkFUSU9OX1dPUktGTE9XUycsXHJcbiAgICBdLFxyXG4gICAgW1dvcmtmbG93VHlwZS5SRUdJU1RSQUlPTl9XQUlUSU5HTElTVF06IFtcclxuICAgICAgICAnUkVHSVNUUkFUSU9OX1dPUktGTE9XUycsXHJcbiAgICAgICAgJ1dBSVRJTkdfTElTVF9XT1JLRkxPV1MnLFxyXG4gICAgXSxcclxuICAgIFtXb3JrZmxvd1R5cGUuUkVHSVNUUkFUSU9OXTogWydSRUdJU1RSQVRJT05fV09SS0ZMT1dTJ10sXHJcbiAgICBbV29ya2Zsb3dUeXBlLlNUQUdFX0FDVElPTl06IFsnT1RIRVJfV09SS0ZMT1dTJ10sXHJcbiAgICBbV29ya2Zsb3dUeXBlLldBSVRJTkdMSVNUXTogWydXQUlUSU5HX0xJU1RfV09SS0ZMT1dTJ10sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgV09SS0ZMT1dfVFlQRV9PUkRFUjogUmVjb3JkPFdvcmtmbG93VHlwZSwgbnVtYmVyPiA9IHtcclxuICAgIFtXb3JrZmxvd1R5cGUuREVDTElORV06IDAsXHJcbiAgICBbV29ya2Zsb3dUeXBlLkNBTkNFTExBVElPTl06IDEsXHJcbiAgICBbV29ya2Zsb3dUeXBlLkVWRU5UX0NBTkNFTExBVElPTl06IDIsXHJcbiAgICBbV29ya2Zsb3dUeXBlLklOVklUQVRJT05dOiAzLFxyXG4gICAgW1dvcmtmbG93VHlwZS5QVUJMSUNfUkVHSVNUUkFUSU9OXTogNCxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFVCTElDX1JFR0lTVFJBVElPTl9BTkRfTUVNQkVSU0hJUF06IDUsXHJcbiAgICBbV29ya2Zsb3dUeXBlLlJFR0lTVFJBSU9OX1dBSVRJTkdMSVNUXTogNixcclxuICAgIFtXb3JrZmxvd1R5cGUuUkVHSVNUUkFUSU9OXTogNyxcclxuICAgIFtXb3JrZmxvd1R5cGUuTVVMVElfUkVHSVNUUkFUSU9OXTogOCxcclxuICAgIFtXb3JrZmxvd1R5cGUuUEFZTUVOVF06IDksXHJcbiAgICBbV29ya2Zsb3dUeXBlLlBBWU1FTlRfV0FJVElOR0xJU1RdOiAxMCxcclxuICAgIFtXb3JrZmxvd1R5cGUuV0FJVElOR0xJU1RdOiAxMSxcclxuICAgIFtXb3JrZmxvd1R5cGUuUFJFX0FSUklWQUxdOiAxMixcclxuICAgIFtXb3JrZmxvd1R5cGUuQVJSSVZBTF06IDEzLFxyXG4gICAgW1dvcmtmbG93VHlwZS5QUk9GSUxFXTogMTQsXHJcbiAgICBbV29ya2Zsb3dUeXBlLlNUQUdFX0FDVElPTl06IDE1LFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUGFsZXR0ZUNhdGVnb3J5TWFwID0gUGFydGlhbDxcclxuICAgIFJlY29yZDxQYWxldHRlQ2F0ZWdvcnksIFBhbGV0dGVTeW1ib2xbXT5cclxuPjtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQYWxldHRlQ2F0ZWdvcnlNYXAgPSAoKTogUGFsZXR0ZUNhdGVnb3J5TWFwID0+IHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhXT1JLRkxPV19UWVBFX0NBVEVHT1JJRVMpLnJlZHVjZSgocmVjb3JkLCBrZXkpID0+IHtcclxuICAgICAgICBjb25zdCBwYWxldHRlU3ltYm9sID0ga2V5IGFzIFBhbGV0dGVTeW1ib2w7XHJcbiAgICAgICAgV09SS0ZMT1dfVFlQRV9DQVRFR09SSUVTW3BhbGV0dGVTeW1ib2xdLmZvckVhY2goKGNhdGVnb3J5KSA9PiB7XHJcbiAgICAgICAgICAgIHJlY29yZFtjYXRlZ29yeV0gPSBbLi4uKHJlY29yZFtjYXRlZ29yeV0gPz8gW10pLCBwYWxldHRlU3ltYm9sXTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgfSwge30gYXMgUGFsZXR0ZUNhdGVnb3J5TWFwKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBQQUxFVFRFX0NBVEVHT1JJRVNfTUFQID0gZ2V0UGFsZXR0ZUNhdGVnb3J5TWFwKCk7XHJcbiJdfQ==