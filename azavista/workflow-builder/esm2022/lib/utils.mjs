/**
 * Please place the code according to the `// #region` comment tag
 *
 * For example `// #region General utils` `// #region Diagram utils`
 */
import { ConnectorConstraints, NodeConstraints, PortConstraints, PortVisibility, } from '@syncfusion/ej2-angular-diagrams';
import { InputPin, OutputPin, WorkflowType, } from '@azavista/workflow-builder-shared';
import { getCanvasWorkflow } from '@azavista/workflow-builder-shared/lib/factory';
import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { DEFAULT_CONNECTOR, DEFAULT_NODE_HEIGHT, DEFAULT_NODE_WIDTH, DEFAULT_STROKE_WIDTH, OUTPUT_PIN_PAIR, PREFIX_CONNECTOR, PREFIX_NODE, PREFIX_PORT, WORKFLOW_NAME_TRANSLATIONS, WORKFLOW_TYPE_CATEGORIES, WORKFLOW_TYPE_ORDER, } from './types';
// #region General utils
export const omit = (data, properties) => {
    const result = { ...data };
    properties.forEach((key) => delete result[key]);
    return result;
};
export const objectKeys = (o) => {
    return Object.keys(o);
};
export const delay = (milliSeconds) => {
    return new Promise((resolve) => {
        setTimeout(resolve, milliSeconds);
    });
};
export const getGroupByValue = (rows, fieldName) => {
    return rows.reduce((group, row) => {
        group[row[fieldName]] = [...(group[row[fieldName]] ?? []), row];
        return group;
    }, {});
};
export const getMapByValue = (rows, fieldName) => {
    return rows.reduce((group, row) => {
        group[row[fieldName]] = row;
        return group;
    }, {});
};
export const isObject = (item) => {
    return item && typeof item === 'object' && !Array.isArray(item);
};
/**
 *
 * @param target
 * @param source
 * @returns new object that merged both `target` & `source` with properties from `source` replacing existing `target`'s properties
 */
export const mergeDeep = (target, source) => {
    const output = { ...target };
    if (isObject(target) && isObject(source)) {
        objectKeys(source).forEach((key) => {
            if (isObject(source[key])) {
                if (!(key in target))
                    Object.assign(output, { [key]: source[key] });
                else
                    output[key] = mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(output, { [key]: source[key] });
            }
        });
    }
    return output;
};
// #endregion
// #region HTML template utils
export const trackByWorkflowProperty = (index, item) => {
    return item.attribute;
};
export const trackBy = (attribute) => (index, item) => item[attribute];
export const trackByAttributeTranslations = (index, item) => {
    return item.value;
};
// #endregion
// #region Diagram utils
export const getConnectorAnnotation = (outputPin) => {
    return outputPin !== OutputPin.OUTPUT
        ? [
            {
                content: outputPin.split('-')[0],
            },
        ]
        : [];
};
export const getValidConnectorsFromWorkfowFactory = (workflows) => workflows.reduce((result, workflow) => {
    const nextWorkflows = workflow.getNextWorkflows();
    objectKeys(nextWorkflows).forEach((outputType) => {
        const next_workflow_ids = nextWorkflows[outputType];
        if (next_workflow_ids) {
            result.push({
                ...DEFAULT_CONNECTOR,
                id: `${PREFIX_CONNECTOR}${workflow.getId()}_${outputType}`,
                sourceID: `${PREFIX_NODE}${workflow.getId()}`,
                sourcePortID: `${PREFIX_PORT}_${outputType}_pin`,
                targetID: `${PREFIX_NODE}${next_workflow_ids}`,
                targetPortID: `${PREFIX_PORT}_${OUTPUT_PIN_PAIR[outputType]}_pin`,
                annotations: getConnectorAnnotation(outputType),
                constraints: ConnectorConstraints.Default -
                    ConnectorConstraints.DragSourceEnd,
            });
        }
    });
    return result;
}, []);
export const getDefaultInputPinPort = (type) => {
    const inputPinOffsetMap = {
        [InputPin.INPUT]: { x: 0, y: 0.5 },
        [InputPin.CANCELLATION_INPUT]: { x: 0.5, y: 0 },
        [InputPin.DECLINE_INPUT]: { x: 0.5, y: 0 },
    };
    return {
        id: `${PREFIX_PORT}_${type}_pin`,
        offset: inputPinOffsetMap[type],
        visibility: PortVisibility.Visible,
        constraints: PortConstraints.InConnect,
        style: {
            fill: '#fff',
            strokeColor: '#ccc',
            strokeWidth: DEFAULT_STROKE_WIDTH,
            opacity: 0.8,
        },
        shape: 'Circle',
        height: 8,
        width: 8,
    };
};
export const getDefaultOutputPinPort = (type) => {
    const outputPinOffsetMap = {
        [OutputPin.OUTPUT]: { x: 1, y: 0.5 },
        [OutputPin.EXISTING_CONTACT]: { x: 1, y: 0.5 },
        [OutputPin.INVITED_CONTACT]: { x: 1, y: 0.5 },
        [OutputPin.NEW_CONTACT]: { x: 1, y: 0.5 },
        [OutputPin.CANCELLATION_OUTPUT]: { x: 0.5, y: 1 },
        [OutputPin.DECLINE_OUTPUT]: { x: 0.5, y: 1 },
    };
    return {
        id: `${PREFIX_PORT}_${type}_pin`,
        offset: outputPinOffsetMap[type],
        visibility: PortVisibility.Visible,
        style: {
            fill: '#fff',
            strokeColor: '#aaa',
            strokeWidth: DEFAULT_STROKE_WIDTH,
        },
        shape: 'Circle',
        height: 8,
        width: 8,
        constraints: PortConstraints.Draw | PortConstraints.OutConnect,
    };
};
export const getDefaultNode = () => ({
    shape: { type: 'HTML' },
    ports: [
        getDefaultInputPinPort(InputPin.INPUT),
        getDefaultOutputPinPort(OutputPin.OUTPUT),
    ],
    width: DEFAULT_NODE_WIDTH,
    height: DEFAULT_NODE_HEIGHT,
    annotations: [],
    constraints: NodeConstraints.Default -
        NodeConstraints.Rotate -
        NodeConstraints.Resize -
        NodeConstraints.HideThumbs -
        NodeConstraints.Delete,
    // constraints: NodeConstraints.Default,
});
// #endregion
// #region Workflow data utils
export const getWorkflowIdFromNodeId = (nodeId) => {
    return nodeId.replace(PREFIX_NODE, '');
};
export const getOutputSidePins = (pins) => {
    return pins.filter((pin) => OUTPUT_PIN_PAIR[pin] === InputPin.INPUT);
};
export const getOutputNonSidePins = (pins) => {
    return pins.filter((pin) => OUTPUT_PIN_PAIR[pin] !== InputPin.INPUT);
};
export const getMultipleOutputPorts = (pins) => {
    const sidePins = getOutputSidePins(pins);
    const nonSidePins = getOutputNonSidePins(pins);
    return sidePins
        .map((pin, index) => {
        const port = getDefaultOutputPinPort(pin);
        port.offset.y = (index + 1) / (sidePins.length + 1);
        return port;
    })
        .concat(nonSidePins.map(getDefaultOutputPinPort));
};
export const getNodePortsFromFactory = (factory) => {
    return [
        ...factory.inputPin.map((inputPin) => getDefaultInputPinPort(inputPin)),
        ...getMultipleOutputPorts(factory.outputPin),
    ].filter((port) => !!port);
};
export const getNodeFromCanvasControllerData = (data) => {
    const { coordinate, factory } = data;
    return {
        ...getDefaultNode(),
        id: `${PREFIX_NODE}${factory.getId()}`,
        offsetX: coordinate.x,
        offsetY: coordinate.y,
        ports: getNodePortsFromFactory(factory),
    };
};
export const getNodeAndConnectorsFromCanvasControllerData = (canvasItems) => ({
    nodes: canvasItems.map((data) => getNodeFromCanvasControllerData(data)),
    connectors: [
        ...getValidConnectorsFromWorkfowFactory(canvasItems.map(({ factory }) => factory)),
    ],
});
export const getWorkflowFactory = (type, data) => {
    const factory = getCanvasWorkflow(type);
    if (data) {
        try {
            factory.setWorkflow(data);
            objectKeys(data.custom_processes).forEach((processKey) => factory.setCustomProcess(processKey, data.custom_processes[processKey]));
        }
        catch (e) {
            console.error(e);
        }
    }
    return factory;
};
export const getWorkflowTypeArray = () => {
    return objectKeys(WorkflowType).reduce((result, data) => {
        const workflowType = WorkflowType[data];
        // eslint-disable-next-line eqeqeq
        if (workflowType != undefined) {
            result.push(workflowType);
        }
        return result;
    }, []);
};
export const workflowTypeArray = getWorkflowTypeArray();
export const getOutputPinFromConnector = (connector) => {
    const sourcePin = connector.sourcePortID;
    return sourcePin?.replace(`${PREFIX_PORT}_`, ``).replace('_pin', '');
};
export const reorderWorkflowsByPaletteCategory = (workflows) => {
    return {
        mainWorkflows: workflows
            .filter((workflow) => WORKFLOW_TYPE_CATEGORIES[workflow.type][0] !==
            'CANCELLATION_WORKFLOWS')
            .sort((workflowA, workflowB) => WORKFLOW_TYPE_ORDER[workflowA.type] -
            WORKFLOW_TYPE_ORDER[workflowB.type]),
        cancellationWorkflows: workflows
            .filter((workflow) => WORKFLOW_TYPE_CATEGORIES[workflow.type][0] ===
            'CANCELLATION_WORKFLOWS')
            .sort((workflowA, workflowB) => WORKFLOW_TYPE_ORDER[workflowA.type] -
            WORKFLOW_TYPE_ORDER[workflowB.type]),
    };
};
export const getOrderedIEventWorkflows = (workflows) => {
    const gap = 80;
    const { mainWorkflows, cancellationWorkflows } = reorderWorkflowsByPaletteCategory(workflows);
    const workflowToCanvasItem = (workflow, position) => ({
        canvas: {
            coordinate: {
                x: gap + position.x * (DEFAULT_NODE_WIDTH + gap),
                y: gap + position.y * (DEFAULT_NODE_HEIGHT + gap),
            },
            name: '',
            description: '',
        },
        workflow: {
            custom_processes: [],
            id: workflow.id,
            settings: workflow.settings,
            type: workflow.type,
        },
    });
    return [
        ...mainWorkflows.map((workflow, index) => workflowToCanvasItem(workflow, {
            x: index,
            y: 0,
        })),
        ...cancellationWorkflows.map((workflow, index) => workflowToCanvasItem(workflow, { x: index, y: 1 })),
    ];
};
// #endregion
// #region Forms utils
export const getFormDirtyValues = (form) => {
    const dirtyValues = {};
    objectKeys(form.controls).forEach((key) => {
        const abstractControl = form.controls[key];
        if (abstractControl.dirty) {
            if (abstractControl instanceof FormGroup) {
                dirtyValues[key] = getFormDirtyValues(abstractControl);
            }
            else {
                dirtyValues[key] = abstractControl.value;
            }
        }
    });
    return dirtyValues;
};
export function createFormGroupFromData(data) {
    if (Array.isArray(data)) {
        const formArray = new FormArray(data.map((row) => createFormGroupFromData(row)));
        return formArray;
    }
    if (typeof data === 'object' && !!data) {
        const formGroup = new FormGroup({});
        objectKeys(data).forEach((key) => {
            formGroup.addControl(key, 
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            createFormGroupFromData(data[key]));
        });
        return formGroup;
    }
    return new FormControl(data);
}
// Palette Utils
export const getNodeModelForPaletteFromWorkflowType = (workflowType, sharedSvc) => {
    const factory = getCanvasWorkflow(workflowType);
    const outputPins = factory.outputPin;
    const sideOutputPins = getOutputSidePins(outputPins);
    return {
        ...getDefaultNode(),
        addInfo: { type: workflowType, label: workflowType },
        ports: getNodePortsFromFactory(factory) ?? [],
        id: workflowType,
        constraints: NodeConstraints.Default,
        padding: {
            left: 0,
            right: 0,
            bottom: 0,
            top: 0,
        },
        margin: {
            left: 0,
            right: 0,
            bottom: 0,
            top: 0,
        },
        shape: {
            type: 'HTML',
            content: `<div class="palette-item">
            <div class="palette-item__inner">
            <i class="material-icons-outlined palette-item__icon">dataset</i>
          ${factory.inputPin.map((inputPin) => 
            // eslint-disable-next-line prettier/prettier
            `<div class="palette-item__${inputPin}"></div>`)}${getOutputNonSidePins(outputPins).map((outputPin) => 
            // eslint-disable-next-line prettier/prettier
            `<div class="palette-item__${outputPin}"></div>`)}${sideOutputPins.map((outputPin, index) => {
                const top = ((index + 1) * 100) / (sideOutputPins.length + 1);
                return `<div class="palette-item__${outputPin} palette-item__output" style="top: ${Math.round(top)}%;"></div>`;
            })}
            </div>
            <div class="palette-item__title">${` ${sharedSvc.translate(WORKFLOW_NAME_TRANSLATIONS[workflowType])}`}</div>
          </div>`,
        },
    };
};
// eslint-disable-next-line max-len
export const nodeModelForPaletteCreateWorkBlock = {
    ...getDefaultNode(),
    addInfo: { type: 'create-work-block', label: 'CREATE_WORKBLOCK' },
    ports: [],
    id: 'create-work-block',
    constraints: NodeConstraints.None,
    shape: {
        type: 'HTML',
        content: `<div class="palette-item">
            <div class="palette-item__inner">
            <i class="material-icons-outlined palette-item__icon">post_add</i>
            </div>
          </div>`,
    },
};
export const getNodeModelForPalette = (paletteSymbol, sharedSvc) => {
    if (paletteSymbol === 'create-work-block') {
        return nodeModelForPaletteCreateWorkBlock;
    }
    return getNodeModelForPaletteFromWorkflowType(paletteSymbol, sharedSvc);
};
// local storage tools
const jsonParse = (jsonText) => {
    let myResponse;
    if (jsonText == null) {
        return undefined;
    }
    try {
        myResponse = JSON.parse(jsonText);
    }
    catch (e) {
        myResponse = undefined;
        throw new Error('Error occured: ', e);
    }
    return myResponse;
};
const getBuilderWorkflowLocalStorageKey = (eventId) => `azavista-workflow-builder-${eventId}`;
export const getBuilderWorkflowFromLocalStorage = (eventId) => {
    const content = localStorage.getItem(getBuilderWorkflowLocalStorageKey(eventId));
    return jsonParse(content);
};
export const saveBuilderWorkflowToLocalStorage = (eventId, data) => {
    localStorage.setItem(getBuilderWorkflowLocalStorageKey(eventId), JSON.stringify(data));
};
//# sourceMappingURL=data:application/json;base64,