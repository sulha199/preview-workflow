/* eslint-disable @typescript-eslint/ban-ts-comment */
import { ChangeDetectionStrategy, Component, Input, ViewChild, ViewChildren, } from '@angular/core';
import { Connector, ConnectorConstraints, DiagramConstraints, DiagramTools, Node, NodeConstraints, SnapConstraints, } from '@syncfusion/ej2-angular-diagrams';
import { ngResizeObserverProviders, } from 'ng-resize-observer';
import { debounceTime, startWith } from 'rxjs';
import { DEFAULT_CONNECTOR, DEFAULT_ERROR_STROKE_COLOR, DEFAULT_STROKE_COLOR, DEFAULT_STROKE_WIDTH, OUTPUT_PIN_PAIR, PREFIX_NODE, PREFIX_PORT, WORKFLOW_EXPLANATION_TRANSLATIONS, WORKFLOW_NAME_TRANSLATIONS, } from './types';
import { delay, getConnectorAnnotation, getMapByValue, getNodeAndConnectorsFromCanvasControllerData, getNodeFromCanvasControllerData, getOutputPinFromConnector, getWorkflowIdFromNodeId, workflowTypeArray, } from './utils';
import { WorkflowBuilderNodeFormComponent } from './components/workflow-builder-node-form/workflow-builder-node-form.component';
import * as i0 from "@angular/core";
import * as i1 from "./services/workflow-builder.service";
import * as i2 from "./workflow-builder.controller";
import * as i3 from "ng-resize-observer";
import * as i4 from "@azavista/components/shared";
import * as i5 from "@angular/common";
import * as i6 from "@angular/material/select";
import * as i7 from "@angular/material/core";
import * as i8 from "@angular/material/tabs";
import * as i9 from "@syncfusion/ej2-angular-diagrams";
import * as i10 from "@azavista/components/button";
import * as i11 from "./components/workflow-builder-palette/workflow-builder-palette.component";
import * as i12 from "./components/workflow-builder-node-form/workflow-builder-node-form.component";
import * as i13 from "@ngx-translate/core";
import * as i14 from "./pipes/apply-function.pipe";
export const ZOOM_FACTOR_OPTIONS = [
    0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1,
];
export class WorkflowBuilderComponent {
    constructor(builderSvc, controller, host, resize$, sharedSvc) {
        this.builderSvc = builderSvc;
        this.controller = controller;
        this.host = host;
        this.resize$ = resize$;
        this.sharedSvc = sharedSvc;
        /** Fill this to use custom dataProvider */
        this.dataProvider = this.builderSvc.dataProvider;
        this.debugMode = false;
        this.diagramConfig = {
            constraints: DiagramConstraints.Default,
            snapSettings: {
                constraints: SnapConstraints.SnapToObject,
            },
            getConnectorDefaults: () => DEFAULT_CONNECTOR,
            drawingObject: { ...DEFAULT_CONNECTOR },
        };
        this.tool = DiagramTools.SingleSelect | DiagramTools.ZoomPan;
        this.paletteConfig = {
            palettes: [],
            getSymbolInfo: () => { },
        };
        this.isInitialized = false;
        this.zoomOptions = ZOOM_FACTOR_OPTIONS;
        this.currentZoomFactor = 1;
        this.hasNodeSelectedAndExpanded = (selectedNodes) => {
            const selectedNodeMap = getMapByValue(selectedNodes, 'id');
            return !!this.nodeForms?.some((node) => !!selectedNodeMap[node.node.id] &&
                (!!node.formHeader?.editMode ||
                    !!node.workflowSettingsGroupedFieldData?.expandPanels));
        };
        this.areWorkflowsValid = (validityMap) => {
            return Object.values(validityMap).every((isValid) => isValid);
        };
    }
    async ngOnInit() {
        this.controller.isDebugCallback = () => this.debugMode;
        if (this.dataProvider) {
            this.builderSvc.dataProvider = this.dataProvider;
        }
        if (!this.eventId) {
            throw new Error('Please assign eventId to WorkflowBuilderComponent');
        }
    }
    async ngAfterViewInit() {
        await delay(0); // delay to wait until html is fully rendered
        this.resize$.pipe(startWith(), debounceTime(100)).subscribe(() => {
            this.updateDiagramSize();
        });
    }
    async onDiagramLoad() {
        await this.controller.initFromProvider(this.dataProvider, this.eventId);
        const { connectors, nodes } = getNodeAndConnectorsFromCanvasControllerData(Object.values(this.controller.dataMap));
        nodes.forEach((node) => this.diagramEl.addNode({
            ...node,
            shape: {
                type: 'HTML',
            },
            style: {
                fill: 'blue',
            },
        }));
        connectors.forEach((connector) => this.diagramEl.addConnector(connector));
        this.log('onDiagramLoad - controller.dataMap', this.controller.dataMap, nodes, connectors);
        this.diagramEl.pan(0, 0);
    }
    async onPublish() {
        this.log('onPublish', this.controller.getCurrentState());
        this.controller.publish();
    }
    log(logName, ...params) {
        if (this.debugMode) {
            console.groupCollapsed(logName);
            console.trace(params);
            console.groupEnd();
        }
    }
    getSymbolInfo(symbol) {
        // Defines the symbol description
        return {
            width: 75,
            height: 40,
            description: { text: symbol.addInfo['description'] },
        };
    }
    onConnectionPointChange(event) {
        this.log('connectionPointChange', event);
        const { connector, state } = event;
        if (state !== 'Completed') {
            return;
        }
        this.handleConnectorPorts(connector);
    }
    async onElementDraw(event) {
        this.log('elementDraw', event);
        const { objectType, state } = event;
        if (state === 'Start') {
            // this is required to remove the selection-border that causes the connector to lose its sourceId
            this.diagramEl.unSelect(event.source);
        }
        if (state !== 'Completed') {
            return;
        }
        switch (objectType) {
            case 'Connector': {
                const connectorEvent = event;
                return this.onConnectionAddedByDrawing(connectorEvent.source);
            }
        }
    }
    async onCollectionChange(event) {
        this.log('collectionChange', event);
        const { type, state, element } = event;
        if (state !== 'Changed') {
            return;
        }
        if (element instanceof Node) {
            switch (type) {
                case 'Addition': {
                    await delay(300);
                    this.onDropPalette(element);
                    break;
                }
                case 'Removal': {
                    this.deleteWorkflow(getWorkflowIdFromNodeId(element.id));
                    break;
                }
            }
        }
        if (element instanceof Connector) {
            switch (type) {
                case 'Removal': {
                    const sourceWorkflowId = getWorkflowIdFromNodeId(element.sourceID);
                    const targetWorkflowId = getWorkflowIdFromNodeId(element.targetID);
                    const elementConnector = element;
                    const sourceWorkflow = this.controller.dataMap[sourceWorkflowId];
                    const outputPin = getOutputPinFromConnector(elementConnector);
                    if (targetWorkflowId ===
                        sourceWorkflow?.factory.getNextWorkflows()[outputPin]) {
                        this.controller.updateWorkflowNextWorkflow(outputPin, sourceWorkflowId, null);
                    }
                    break;
                }
                case 'Addition': {
                    break;
                }
            }
        }
    }
    async onSelectionChange(event) {
        this.log('selectionChange', event);
        const { state } = event;
        if (state !== 'Changed') {
            return;
        }
        // handle connectors selection indicator
        const selectedConnectorsMaps = getMapByValue(this.diagramEl.selectedItems.connectors ?? [], 'id');
        this.diagramEl.connectors.forEach((item) => {
            const selectedStrokeWidth = DEFAULT_STROKE_WIDTH * 2;
            const isSelectedItem = !!selectedConnectorsMaps[item.id];
            if (item.style?.strokeWidth) {
                if (item.style.strokeWidth !== DEFAULT_STROKE_WIDTH &&
                    !isSelectedItem) {
                    item.style.strokeWidth = DEFAULT_STROKE_WIDTH;
                }
                if (item.style.strokeWidth !== selectedStrokeWidth &&
                    isSelectedItem) {
                    item.style.strokeWidth = selectedStrokeWidth;
                }
            }
        });
        // make selected node on top of z-index
        const selectedNodesMaps = getMapByValue(this.diagramEl.selectedItems.nodes ?? [], 'id');
        this.diagramEl.nodes.forEach((item) => {
            const isSelectedItem = !!selectedNodesMaps[item.id];
            const nodeElement = this.host.nativeElement.querySelector(`#${item.id}_content_html_element`);
            if (nodeElement) {
                nodeElement.classList.toggle('diagram-node__selected', isSelectedItem);
            }
        });
    }
    onScrollChange(event) {
        this.log('onScrollChange', event);
        this.currentZoomFactor = event.newValue.CurrentZoom;
    }
    deleteWorkflow(workflowId) {
        this.controller.deleteWorkflow(workflowId);
    }
    /** Handle when dragging the tip end/start of a connector */
    async onConnectionChange(event) {
        this.log('connectionChange', event);
        const { state, newValue, oldValue, connectorEnd, connector } = event;
        if (state !== 'Changed') {
            return;
        }
        // @ts-ignore
        const newValueNodeId = newValue.nodeId;
        // @ts-ignore
        const oldValueNodeId = oldValue.nodeId;
        const connectorModel = connector;
        const outputPin = getOutputPinFromConnector(connectorModel);
        if (newValueNodeId != null &&
            oldValueNodeId != null &&
            newValueNodeId !== oldValueNodeId) {
            if (connectorEnd === 'ConnectorSourceEnd') {
                const oldWorkflowSourceId = getWorkflowIdFromNodeId(oldValueNodeId);
                const newWorkflowSourceId = getWorkflowIdFromNodeId(newValueNodeId);
                const newWorkflowTargetId = connector.targetID
                    ? getWorkflowIdFromNodeId(connector.targetID)
                    : null;
                const isValidNextWorkflow = this.controller.isValidNextWorkflow(outputPin, newWorkflowSourceId, newWorkflowTargetId);
                if (isValidNextWorkflow) {
                    this.controller.updateWorkflowNextWorkflow(outputPin, oldWorkflowSourceId, null);
                    if (newValueNodeId) {
                        this.controller.updateWorkflowNextWorkflow(outputPin, newWorkflowSourceId, newWorkflowTargetId);
                    }
                }
                else {
                    connector.sourceID = oldValueNodeId;
                }
            }
            if (connectorEnd === 'ConnectorTargetEnd' &&
                connector.sourceID?.startsWith(PREFIX_NODE)) {
                const workflowSourceId = getWorkflowIdFromNodeId(connector.sourceID);
                const newWorkflowTargetId = newValueNodeId
                    ? getWorkflowIdFromNodeId(newValueNodeId)
                    : null;
                const isValidNextWorkflow = this.controller.isValidNextWorkflow(outputPin, workflowSourceId, newWorkflowTargetId);
                if (isValidNextWorkflow) {
                    this.controller.updateWorkflowNextWorkflow(outputPin, workflowSourceId, newWorkflowTargetId);
                }
                else {
                    connector.targetID = oldValueNodeId;
                }
            }
        }
        this.checkConnector(connector.id);
    }
    async onDropPalette(node) {
        const paletteAddInfo = node?.addInfo;
        if (workflowTypeArray.includes(paletteAddInfo?.type)) {
            const newControllerData = this.controller.addWorkflow(paletteAddInfo?.type, {
                coordinate: {
                    x: node.offsetX,
                    y: node.offsetY,
                },
                name: this.sharedSvc.translate(WORKFLOW_NAME_TRANSLATIONS[paletteAddInfo.type]),
                description: this.sharedSvc.translate(WORKFLOW_EXPLANATION_TRANSLATIONS[paletteAddInfo.type]),
            });
            const newNodeData = getNodeFromCanvasControllerData(newControllerData);
            this.diagramEl.addNode(newNodeData);
            this.diagramEl.remove(node);
        }
    }
    onPositionChange(event) {
        this.log('positionChange', event);
        const { state, newValue, source } = event;
        if (state !== 'Completed') {
            return;
        }
        const sourceNode = source;
        if (sourceNode?.id?.startsWith(PREFIX_NODE)) {
            this.controller.updateWorkflowCoordinate(getWorkflowIdFromNodeId(sourceNode.id), {
                x: newValue.offsetX,
                y: newValue.offsetY,
            });
        }
    }
    async onConnectionAddedByDrawing(connector) {
        this.log('onConnectionAddedByDrawing', connector);
        const workflowSourceId = getWorkflowIdFromNodeId(connector.sourceID);
        const workflowTargetId = getWorkflowIdFromNodeId(connector.targetID);
        const connectorModel = connector;
        const outputPin = getOutputPinFromConnector(connectorModel);
        const isValidNextWorkflow = this.controller.isValidNextWorkflow(outputPin, workflowSourceId, workflowTargetId, true);
        if (isValidNextWorkflow) {
            this.controller.updateWorkflowNextWorkflow(outputPin, workflowSourceId, workflowTargetId);
        }
        else {
            await delay(300);
            this.diagramEl.remove(connector);
        }
        this.checkConnector(connector.id);
    }
    checkConnector(connectorId) {
        const connector = this.diagramEl.connectors.find(({ id }) => id === connectorId);
        if (!connector) {
            return;
        }
        connector.style = {
            ...connector.style,
            strokeColor: connector.sourceID &&
                connector.targetID &&
                connector.sourceID !== connector.targetID
                ? DEFAULT_STROKE_COLOR
                : DEFAULT_ERROR_STROKE_COLOR,
        };
        const connectorInstance = connector;
        const connectorModel = connector;
        const outputPin = getOutputPinFromConnector(connectorModel);
        connectorInstance.constraints =
            ConnectorConstraints.Default - ConnectorConstraints.DragSourceEnd;
        if (connectorInstance.annotations?.[0]) {
            connectorInstance.annotations[0].content =
                getConnectorAnnotation(outputPin)[0].content;
        }
        else {
            this.diagramEl.addConnectorLabels(connector, getConnectorAnnotation(outputPin));
        }
        this.handleConnectorPorts(connectorInstance);
        this.diagramEl.dataBind();
    }
    handleConnectorPorts(connector) {
        const connectorModel = connector;
        const outputPin = getOutputPinFromConnector(connectorModel);
        if (outputPin &&
            connectorModel.sourceID &&
            !connectorModel.sourcePortID) {
            connectorModel.sourcePortID = `${PREFIX_PORT}_${outputPin}_pin`;
        }
        if (outputPin &&
            connectorModel.targetID &&
            !connectorModel.targetPortID) {
            connectorModel.targetPortID = `${PREFIX_PORT}_${OUTPUT_PIN_PAIR[outputPin]}_pin`;
        }
    }
    updateWorkflowSettings(nodeId, data) {
        if (data?.obj) {
            this.controller.updateWorkflowSettings(getWorkflowIdFromNodeId(nodeId), data.obj);
        }
    }
    updateWorkflowCanvas(nodeId, data) {
        this.controller.updateWorkflowCanvas(getWorkflowIdFromNodeId(nodeId), data);
    }
    deleteNode(nodeModel) {
        const nodeInstance = this.diagramEl.nodes.find(({ id }) => id === nodeModel.id);
        nodeInstance.constraints = NodeConstraints.Default;
        this.diagramEl.remove(nodeInstance);
    }
    async updateDiagramSize() {
        const rect = this.host.nativeElement
            .querySelector('ejs-diagram')
            ?.getBoundingClientRect();
        this.diagramConfig.height = rect?.height;
        this.diagramConfig.width = rect?.width;
    }
    saveState() {
        // TODO
    }
    hasNodeSelectedAndExpanded2() {
        const selectedNodeMap = getMapByValue(this.diagramEl?.selectedItems.nodes ?? [], 'id');
        return !!this.nodeForms?.some((node) => !!selectedNodeMap[node.node.id] &&
            !!node.workflowSettingsGroupedFieldData?.expandPanels);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: WorkflowBuilderComponent, deps: [{ token: i1.WorkflowBuilderService }, { token: i2.AzavistaWorkflowBuilderController }, { token: i0.ElementRef }, { token: i3.NgResizeObserver }, { token: i4.AzavistaSharedService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.10", type: WorkflowBuilderComponent, selector: "azavista-workflow-builder", inputs: { dataProvider: "dataProvider", eventId: "eventId", debugMode: "debugMode" }, providers: [...ngResizeObserverProviders], viewQueries: [{ propertyName: "diagramEl", first: true, predicate: ["diagram"], descendants: true }, { propertyName: "nodeForms", predicate: WorkflowBuilderNodeFormComponent, descendants: true }], ngImport: i0, template: "<div class=\"workflow-builder-div\">\r\n  <div class=\"workflow-builder-div__diagram-area\">\r\n    <div class=\"workflow-builder-div__diagram-area__toolbar\">\r\n      <div class=\"workflow-builder-div__diagram-area__toolbar__left\">\r\n        <azavista-button\r\n          [disabled]=\"!(controller.validityMap| apply : areWorkflowsValid)\"\r\n          (click)=\"onPublish()\"\r\n          color=\"primary\">{{\r\n          \"PUBLISH\" | translate\r\n        }}</azavista-button>\r\n      </div>\r\n      <div class=\"workflow-builder-div__diagram-area__toolbar__right\">\r\n        <mat-select\r\n          [value]=\"1\"\r\n          (selectionChange)=\"diagram.zoom($event.value / currentZoomFactor)\"\r\n          class=\"workflow-builder-div__diagram-area__toolbar__tool-zoom\"\r\n        >\r\n          <mat-option class=\"workflow-builder-div__diagram-area__toolbar__tool-zoom__option\" *ngFor=\"let factor of zoomOptions\" [value]=\"factor\"\r\n            >{{ factor * 100 }} %</mat-option\r\n          >\r\n        </mat-select>\r\n      </div>\r\n    </div>\r\n    <ejs-diagram\r\n      #diagram\r\n      id=\"diagram\"\r\n      [width]=\"diagramConfig.width\"\r\n      [height]=\"diagramConfig.height\"\r\n      [tool]=\"tool\"\r\n      [tooltip]=\"diagramConfig.tooltip\"\r\n      [constraints]=\"diagramConfig.constraints\"\r\n      [snapSettings]=\"diagramConfig.snapSettings\"\r\n      [getConnectorDefaults]=\"diagramConfig.getConnectorDefaults\"\r\n      [class.ejs-diagram--has-node-selected]=\"\r\n        diagram.selectedItems.nodes && diagram.selectedItems.nodes.length > 0\r\n      \"\r\n      [class.ejs-diagram--has-node-selected-and-expanded]=\"\r\n        hasNodeSelectedAndExpanded2()\r\n      \"\r\n      (created)=\"onDiagramLoad()\"\r\n      (connectionChange)=\"onConnectionChange($event)\"\r\n      (elementDraw)=\"onElementDraw($event)\"\r\n      (commandExecute)=\"log('commandExecute', $event)\"\r\n      (created)=\"log('created', $event)\"\r\n      (dataLoaded)=\"log('dataLoaded', $event)\"\r\n      (dragEnter)=\"log('dragEnter', $event)\"\r\n      (dragLeave)=\"log('dragLeave', $event)\"\r\n      (dragOver)=\"log('dragOver', $event)\"\r\n      (drop)=\"log('drop', $event)\"\r\n      (fixedUserHandleClick)=\"log('fixedUserHandleClick', $event)\"\r\n      (load)=\"log('load', $event)\"\r\n      (positionChange)=\"onPositionChange($event)\"\r\n      (propertyChange)=\"log('propertyChange', $event)\"\r\n      (rotateChange)=\"log('rotateChange', $event)\"\r\n      (scrollChange)=\"onScrollChange($event)\"\r\n      (segmentChange)=\"log('segmentChange', $event)\"\r\n      (segmentCollectionChange)=\"log('segmentCollectionChange', $event)\"\r\n      (selectionChange)=\"onSelectionChange($event)\"\r\n      (sizeChange)=\"log('sizeChange', $event)\"\r\n      (sourcePointChange)=\"onConnectionPointChange($event)\"\r\n      (targetPointChange)=\"onConnectionPointChange($event)\"\r\n      (collectionChange)=\"onCollectionChange($event)\"\r\n    >\r\n      <ng-template #nodeTemplate let-data>\r\n        <azavista-workflow-builder-node-form\r\n          [node]=\"data\"\r\n          [diagramEl]=\"diagramEl\"\r\n          [eventId]=\"eventId\"\r\n          (workflowSettingsChanges)=\"updateWorkflowSettings(data.id, $event)\"\r\n          (canvasChanges)=\"updateWorkflowCanvas(data.id, $event)\"\r\n          (removeNode)=\"deleteNode(data)\"\r\n        ></azavista-workflow-builder-node-form>\r\n      </ng-template>\r\n    </ejs-diagram>\r\n  </div>\r\n  <div class=\"workflow-builder-div__palette-area\">\r\n    <mat-tab-group>\r\n      <mat-tab label=\"{{ 'WORK_BLOCKS' | translate }}\">\r\n        <azavista-workflow-builder-workflow-builder-palette></azavista-workflow-builder-workflow-builder-palette>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </div>\r\n</div>\r\n", styles: [":host{display:block;position:relative;min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit;height:inherit;width:inherit}:host ::ng-deep *{font-size:12px}.workflow-builder-div{display:flex;min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit;height:inherit}.workflow-builder-div__diagram-area{display:flex;flex-direction:column;width:calc(100% - 256px);height:inherit;overflow:hidden;padding:2px;gap:4px}.workflow-builder-div__diagram-area__toolbar{display:flex;align-items:center;justify-content:space-between;height:var(--mdc-secondary-navigation-tab-container-height);padding:0 24px;border:none;margin:5px 0}.workflow-builder-div__diagram-area__toolbar__tool-zoom{border-radius:8px;border:2px solid #777;padding:2px 6px}.workflow-builder-div__palette-area{max-height:inherit;overflow-y:auto;width:256px;padding:2px}mat-tab-group{max-height:100%;height:100%}mat-tab-group ::ng-deep .mat-mdc-tab-body-wrapper{height:100%;overflow:hidden}mat-tab-group ::ng-deep .mat-mdc-tab-body.mat-mdc-tab-body-active,mat-tab-group ::ng-deep .mat-mdc-tab-body-content{overflow:hidden}::ng-deep .mat-mdc-tab-header{margin-bottom:0}ejs-diagram{display:block;flex:1 1 auto;height:auto!important;width:auto!important;max-width:100%;box-shadow:0 0 2px #0000009c;border-radius:4px;background-color:#fbfbfb}ejs-diagram.ejs-diagram--has-node-selected-and-expanded ::ng-deep #diagram_htmlLayer{z-index:1}::ng-deep .e-tooltip-wrap{display:none}::ng-deep [class].diagram-node__selected{z-index:99999999}::ng-deep [class].diagram-node__ineligible{opacity:.5}::ng-deep div[id^=node_][id$=_content_html_element]>div{overflow-y:auto}::ng-deep .workflow-builder-div__diagram-area__toolbar__tool-zoom__option.mat-mdc-option{font-size:12px}::ng-deep .workflow-builder-div__diagram-area__toolbar__tool-zoom__option.mat-mdc-option .mdc-list-item__primary-text{white-space:pre;text-align:right;min-width:max-content}\n"], dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i6.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex", "panelWidth", "hideSingleSelectionIndicator"], exportAs: ["matSelect"] }, { kind: "component", type: i7.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "component", type: i8.MatTab, selector: "mat-tab", inputs: ["disabled"], exportAs: ["matTab"] }, { kind: "component", type: i8.MatTabGroup, selector: "mat-tab-group", inputs: ["color", "disableRipple", "fitInkBarToContent", "mat-stretch-tabs"], exportAs: ["matTabGroup"] }, { kind: "component", type: i9.DiagramComponent, selector: "ejs-diagram", inputs: ["addInfo", "annotationTemplate", "backgroundColor", "bridgeDirection", "commandManager", "connectorDefaults", "connectors", "constraints", "contextMenuSettings", "customCursor", "dataSourceSettings", "diagramSettings", "drawingObject", "enableConnectorSplit", "enablePersistence", "enableRtl", "getConnectorDefaults", "getCustomCursor", "getCustomProperty", "getCustomTool", "getDescription", "getNodeDefaults", "height", "historyManager", "layers", "layout", "locale", "mode", "nodeDefaults", "nodeTemplate", "nodes", "pageSettings", "rulerSettings", "scrollSettings", "segmentThumbShape", "selectedItems", "serializationSettings", "setNodeTemplate", "snapSettings", "tool", "tooltip", "updateSelection", "userHandleTemplate", "width"], outputs: ["animationComplete", "click", "collectionChange", "commandExecute", "connectionChange", "contextMenuBeforeItemRender", "contextMenuClick", "contextMenuOpen", "created", "dataLoaded", "doubleClick", "dragEnter", "dragLeave", "dragOver", "drop", "expandStateChange", "fixedUserHandleClick", "historyChange", "historyStateChange", "keyDown", "keyUp", "load", "mouseEnter", "mouseLeave", "mouseOver", "mouseWheel", "onImageLoad", "onUserHandleMouseDown", "onUserHandleMouseEnter", "onUserHandleMouseLeave", "onUserHandleMouseUp", "positionChange", "propertyChange", "rotateChange", "scrollChange", "segmentChange", "segmentCollectionChange", "selectionChange", "sizeChange", "sourcePointChange", "targetPointChange", "textEdit", "elementDraw"] }, { kind: "component", type: i10.AzavistaButtonComponent, selector: "azavista-button", inputs: ["acl", "disabled", "cssClasses", "containerCssClasses"] }, { kind: "component", type: i11.WorkflowBuilderPaletteComponent, selector: "azavista-workflow-builder-workflow-builder-palette" }, { kind: "component", type: i12.WorkflowBuilderNodeFormComponent, selector: "azavista-workflow-builder-node-form", inputs: ["node", "eventId", "diagramEl"], outputs: ["workflowSettingsChanges", "canvasChanges", "removeNode"] }, { kind: "pipe", type: i13.TranslatePipe, name: "translate" }, { kind: "pipe", type: i14.ApplyFunctionPipe, name: "apply" }], changeDetection: i0.ChangeDetectionStrategy.Default }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.10", ngImport: i0, type: WorkflowBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'azavista-workflow-builder', changeDetection: ChangeDetectionStrategy.Default, providers: [...ngResizeObserverProviders], template: "<div class=\"workflow-builder-div\">\r\n  <div class=\"workflow-builder-div__diagram-area\">\r\n    <div class=\"workflow-builder-div__diagram-area__toolbar\">\r\n      <div class=\"workflow-builder-div__diagram-area__toolbar__left\">\r\n        <azavista-button\r\n          [disabled]=\"!(controller.validityMap| apply : areWorkflowsValid)\"\r\n          (click)=\"onPublish()\"\r\n          color=\"primary\">{{\r\n          \"PUBLISH\" | translate\r\n        }}</azavista-button>\r\n      </div>\r\n      <div class=\"workflow-builder-div__diagram-area__toolbar__right\">\r\n        <mat-select\r\n          [value]=\"1\"\r\n          (selectionChange)=\"diagram.zoom($event.value / currentZoomFactor)\"\r\n          class=\"workflow-builder-div__diagram-area__toolbar__tool-zoom\"\r\n        >\r\n          <mat-option class=\"workflow-builder-div__diagram-area__toolbar__tool-zoom__option\" *ngFor=\"let factor of zoomOptions\" [value]=\"factor\"\r\n            >{{ factor * 100 }} %</mat-option\r\n          >\r\n        </mat-select>\r\n      </div>\r\n    </div>\r\n    <ejs-diagram\r\n      #diagram\r\n      id=\"diagram\"\r\n      [width]=\"diagramConfig.width\"\r\n      [height]=\"diagramConfig.height\"\r\n      [tool]=\"tool\"\r\n      [tooltip]=\"diagramConfig.tooltip\"\r\n      [constraints]=\"diagramConfig.constraints\"\r\n      [snapSettings]=\"diagramConfig.snapSettings\"\r\n      [getConnectorDefaults]=\"diagramConfig.getConnectorDefaults\"\r\n      [class.ejs-diagram--has-node-selected]=\"\r\n        diagram.selectedItems.nodes && diagram.selectedItems.nodes.length > 0\r\n      \"\r\n      [class.ejs-diagram--has-node-selected-and-expanded]=\"\r\n        hasNodeSelectedAndExpanded2()\r\n      \"\r\n      (created)=\"onDiagramLoad()\"\r\n      (connectionChange)=\"onConnectionChange($event)\"\r\n      (elementDraw)=\"onElementDraw($event)\"\r\n      (commandExecute)=\"log('commandExecute', $event)\"\r\n      (created)=\"log('created', $event)\"\r\n      (dataLoaded)=\"log('dataLoaded', $event)\"\r\n      (dragEnter)=\"log('dragEnter', $event)\"\r\n      (dragLeave)=\"log('dragLeave', $event)\"\r\n      (dragOver)=\"log('dragOver', $event)\"\r\n      (drop)=\"log('drop', $event)\"\r\n      (fixedUserHandleClick)=\"log('fixedUserHandleClick', $event)\"\r\n      (load)=\"log('load', $event)\"\r\n      (positionChange)=\"onPositionChange($event)\"\r\n      (propertyChange)=\"log('propertyChange', $event)\"\r\n      (rotateChange)=\"log('rotateChange', $event)\"\r\n      (scrollChange)=\"onScrollChange($event)\"\r\n      (segmentChange)=\"log('segmentChange', $event)\"\r\n      (segmentCollectionChange)=\"log('segmentCollectionChange', $event)\"\r\n      (selectionChange)=\"onSelectionChange($event)\"\r\n      (sizeChange)=\"log('sizeChange', $event)\"\r\n      (sourcePointChange)=\"onConnectionPointChange($event)\"\r\n      (targetPointChange)=\"onConnectionPointChange($event)\"\r\n      (collectionChange)=\"onCollectionChange($event)\"\r\n    >\r\n      <ng-template #nodeTemplate let-data>\r\n        <azavista-workflow-builder-node-form\r\n          [node]=\"data\"\r\n          [diagramEl]=\"diagramEl\"\r\n          [eventId]=\"eventId\"\r\n          (workflowSettingsChanges)=\"updateWorkflowSettings(data.id, $event)\"\r\n          (canvasChanges)=\"updateWorkflowCanvas(data.id, $event)\"\r\n          (removeNode)=\"deleteNode(data)\"\r\n        ></azavista-workflow-builder-node-form>\r\n      </ng-template>\r\n    </ejs-diagram>\r\n  </div>\r\n  <div class=\"workflow-builder-div__palette-area\">\r\n    <mat-tab-group>\r\n      <mat-tab label=\"{{ 'WORK_BLOCKS' | translate }}\">\r\n        <azavista-workflow-builder-workflow-builder-palette></azavista-workflow-builder-workflow-builder-palette>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </div>\r\n</div>\r\n", styles: [":host{display:block;position:relative;min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit;height:inherit;width:inherit}:host ::ng-deep *{font-size:12px}.workflow-builder-div{display:flex;min-width:inherit;max-width:inherit;min-height:inherit;max-height:inherit;height:inherit}.workflow-builder-div__diagram-area{display:flex;flex-direction:column;width:calc(100% - 256px);height:inherit;overflow:hidden;padding:2px;gap:4px}.workflow-builder-div__diagram-area__toolbar{display:flex;align-items:center;justify-content:space-between;height:var(--mdc-secondary-navigation-tab-container-height);padding:0 24px;border:none;margin:5px 0}.workflow-builder-div__diagram-area__toolbar__tool-zoom{border-radius:8px;border:2px solid #777;padding:2px 6px}.workflow-builder-div__palette-area{max-height:inherit;overflow-y:auto;width:256px;padding:2px}mat-tab-group{max-height:100%;height:100%}mat-tab-group ::ng-deep .mat-mdc-tab-body-wrapper{height:100%;overflow:hidden}mat-tab-group ::ng-deep .mat-mdc-tab-body.mat-mdc-tab-body-active,mat-tab-group ::ng-deep .mat-mdc-tab-body-content{overflow:hidden}::ng-deep .mat-mdc-tab-header{margin-bottom:0}ejs-diagram{display:block;flex:1 1 auto;height:auto!important;width:auto!important;max-width:100%;box-shadow:0 0 2px #0000009c;border-radius:4px;background-color:#fbfbfb}ejs-diagram.ejs-diagram--has-node-selected-and-expanded ::ng-deep #diagram_htmlLayer{z-index:1}::ng-deep .e-tooltip-wrap{display:none}::ng-deep [class].diagram-node__selected{z-index:99999999}::ng-deep [class].diagram-node__ineligible{opacity:.5}::ng-deep div[id^=node_][id$=_content_html_element]>div{overflow-y:auto}::ng-deep .workflow-builder-div__diagram-area__toolbar__tool-zoom__option.mat-mdc-option{font-size:12px}::ng-deep .workflow-builder-div__diagram-area__toolbar__tool-zoom__option.mat-mdc-option .mdc-list-item__primary-text{white-space:pre;text-align:right;min-width:max-content}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.WorkflowBuilderService }, { type: i2.AzavistaWorkflowBuilderController }, { type: i0.ElementRef }, { type: i3.NgResizeObserver }, { type: i4.AzavistaSharedService }]; }, propDecorators: { dataProvider: [{
                type: Input
            }], eventId: [{
                type: Input
            }], debugMode: [{
                type: Input
            }], diagramEl: [{
                type: ViewChild,
                args: ['diagram']
            }], nodeForms: [{
                type: ViewChildren,
                args: [WorkflowBuilderNodeFormComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,