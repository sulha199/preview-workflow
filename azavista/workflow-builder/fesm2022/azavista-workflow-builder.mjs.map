{"version":3,"file":"azavista-workflow-builder.mjs","sources":["../../../../projects/azavista/workflow-builder/src/lib/types.ts","../../../../projects/azavista/workflow-builder/src/lib/utils.ts","../../../../projects/azavista/workflow-builder/src/lib/services/servicelib-cache.service.ts","../../../../projects/azavista/workflow-builder/src/lib/workflow-builder.controller.ts","../../../../projects/azavista/workflow-builder/src/lib/services/workflow-builder-provider.api.ts","../../../../projects/azavista/workflow-builder/src/lib/services/workflow-builder.service.ts","../../../../projects/azavista/workflow-builder/src/lib/services/workflow-builder.form-field.service.ts","../../../../projects/azavista/workflow-builder/src/lib/pipes/apply-function.pipe.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-header/workflow-builder-node-form-header.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-header/workflow-builder-node-form-header.component.html","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-field-text/workflow-builder-node-form-field-text.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-field-text/workflow-builder-node-form-field-text.component.html","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-field-select/workflow-builder-node-form-field-select.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-field-select/workflow-builder-node-form-field-select.component.html","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-field-toggle/workflow-builder-node-form-field-toggle.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-field-toggle/workflow-builder-node-form-field-toggle.component.html","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-process-builder/workflow-builder-process-builder.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-process-builder/workflow-builder-process-builder.component.html","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-process-builder-dialog/workflow-builder-process-builder-dialog.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-process-builder-dialog/workflow-builder-process-builder-dialog.component.html","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-field-process/workflow-builder-node-form-field-process.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form-field-process/workflow-builder-node-form-field-process.component.html","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form/workflow-builder-node-form.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-node-form/workflow-builder-node-form.component.html","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-palette/workflow-builder-palette.component.ts","../../../../projects/azavista/workflow-builder/src/lib/components/workflow-builder-palette/workflow-builder-palette.component.html","../../../../projects/azavista/workflow-builder/src/lib/workflow-builder.component.ts","../../../../projects/azavista/workflow-builder/src/lib/workflow-builder.component.html","../../../../projects/azavista/workflow-builder/src/lib/workflow-builder.module.ts","../../../../projects/azavista/workflow-builder/src/public-api.ts","../../../../projects/azavista/workflow-builder/src/azavista-workflow-builder.ts"],"sourcesContent":["/* eslint-disable no-use-before-define */\r\nimport { FormArray, FormControl, FormGroup } from '@angular/forms';\r\nimport { IEventWorkflow, ILanguageItem, IPage } from '@azavista/servicelib';\r\nimport {\r\n    Canvas,\r\n    CanvasItem,\r\n    InputPin,\r\n    OutputPin,\r\n    WorkflowType,\r\n} from '@azavista/workflow-builder-shared';\r\nimport { getCanvasWorkflow } from '@azavista/workflow-builder-shared/lib/factory';\r\nimport {\r\n    ConnectorModel as ConnectorModelSyncfusion,\r\n    NodeModel as NodeModelSyncfusion,\r\n    PointPortModel as PointPortModelSyncfusion,\r\n    Diagram as DiagramSyncfusion,\r\n    Connector,\r\n} from '@syncfusion/ej2-angular-diagrams';\r\n\r\nexport const PREFIX_NODE = 'node_' as const;\r\nexport const PREFIX_PORT = 'port_' as const;\r\nexport const PREFIX_CONNECTOR = 'connector_' as const;\r\n\r\nexport const DEFAULT_NODE_WIDTH = 250 as const;\r\nexport const DEFAULT_NODE_HEIGHT = 150 as const;\r\n\r\nexport const DEFAULT_STROKE_WIDTH = 2;\r\nexport const DEFAULT_STROKE_COLOR = '#aaa';\r\nexport const DEFAULT_SELECTED_STROKE_COLOR = 'blue';\r\nexport const DEFAULT_ERROR_STROKE_COLOR = '#f00';\r\nexport const DEFAULT_CONNECTOR: ConnectorModel<OutputPin.OUTPUT> = {\r\n    cornerRadius: 8,\r\n    allowNodeOverlap: false,\r\n    type: 'Orthogonal',\r\n    segments: [{ type: 'Orthogonal' }],\r\n    style: {\r\n        strokeColor: DEFAULT_STROKE_COLOR,\r\n        strokeWidth: DEFAULT_STROKE_WIDTH,\r\n        fill: DEFAULT_STROKE_COLOR,\r\n    },\r\n    targetDecorator: {\r\n        style: {\r\n            fill: DEFAULT_STROKE_COLOR,\r\n            strokeColor: DEFAULT_STROKE_COLOR,\r\n            strokeWidth: DEFAULT_STROKE_WIDTH,\r\n        },\r\n        pivot: {\r\n            x: -0.3,\r\n        },\r\n    },\r\n    sourcePortID: 'port__output_pin',\r\n    targetPortID: 'port__input_pin',\r\n    // margin: {\r\n    //     right: DEFAULT_PIN_SIZE * 2,\r\n    //     bottom: DEFAULT_PIN_SIZE * 2,\r\n    //     left: DEFAULT_PIN_SIZE * 2,\r\n    //     top: DEFAULT_PIN_SIZE * 2,\r\n    // },\r\n};\r\n\r\nexport const OUTPUT_PIN_PAIR = {\r\n    [OutputPin.OUTPUT]: InputPin.INPUT,\r\n    [OutputPin.CANCELLATION_OUTPUT]: InputPin.CANCELLATION_INPUT,\r\n    [OutputPin.DECLINE_OUTPUT]: InputPin.DECLINE_INPUT,\r\n    [OutputPin.EXISTING_CONTACT]: InputPin.INPUT,\r\n    [OutputPin.INVITED_CONTACT]: InputPin.INPUT,\r\n    [OutputPin.NEW_CONTACT]: InputPin.INPUT,\r\n} as const;\r\n\r\nexport type CustomPaletteType = 'create-work-block';\r\n\r\nexport type PaletteSymbol = WorkflowType | CustomPaletteType;\r\n\r\ndeclare global {\r\n    export type PortIdInputModel<T extends InputPin = InputPin> =\r\n        `${typeof PREFIX_PORT}_${T}_pin`;\r\n    export type PortIdOutputModel<T extends OutputPin = OutputPin> =\r\n        `${typeof PREFIX_PORT}_${T}_pin`;\r\n    export type PortIdModel = PortIdInputModel | PortIdOutputModel;\r\n\r\n    export interface PointPortModel extends PointPortModelSyncfusion {\r\n        /**\r\n         * Defines the unique id of the port with the pin type\r\n         */\r\n        id: PortIdModel;\r\n    }\r\n\r\n    export type NodeIdModel<NodeId extends string = string> =\r\n        `${typeof PREFIX_NODE}${NodeId}`;\r\n\r\n    export interface NodeModel<NodeId extends string = string>\r\n        extends NodeModelSyncfusion {\r\n        id: NodeIdModel<NodeId>;\r\n        /**\r\n         * Defines the collection of connection points of nodes/connectors\r\n         */\r\n        ports: PointPortModel[];\r\n        shape: { type: 'HTML'; content?: string };\r\n    }\r\n\r\n    export type NodeModelForPalette<\r\n        NodeId extends PaletteSymbol = WorkflowType,\r\n    > = Omit<NodeModel<NodeId>, 'id' | 'addInfo'> & {\r\n        id: NodeId;\r\n        addInfo: { type: NodeId; label: string };\r\n    };\r\n\r\n    export interface ConnectorModel<\r\n        Output extends OutputPin = OutputPin,\r\n        SourceId extends string = string,\r\n        TargetId extends string = string,\r\n    > extends ConnectorModelSyncfusion {\r\n        sourceID?: NodeIdModel<SourceId>;\r\n        sourcePortID: PortIdOutputModel<Output>;\r\n        targetID?: NodeIdModel<TargetId>;\r\n        targetPortID: PortIdInputModel<(typeof OUTPUT_PIN_PAIR)[Output]>;\r\n    }\r\n\r\n    export class Diagram extends DiagramSyncfusion {\r\n        nodes: NodeModel<string>[];\r\n    }\r\n}\r\n\r\nexport type Coordinate = {\r\n    x: number;\r\n    y: number;\r\n};\r\n\r\nexport type WorkflowItemDiagramData = {\r\n    id: string;\r\n    diagram: {\r\n        position: Coordinate;\r\n    };\r\n    workflow: IEventWorkflow;\r\n};\r\n\r\nexport type DraftConnectorPosition =\r\n    | {\r\n          stageId: string;\r\n          coordinate?: never;\r\n      }\r\n    | {\r\n          stageId?: never;\r\n          coordinate: Coordinate;\r\n      };\r\nexport type DraftConnector = {\r\n    source: DraftConnectorPosition;\r\n    target: DraftConnectorPosition;\r\n};\r\n\r\nexport type WorkflowBuilderData = {\r\n    workflows: CanvasItem[];\r\n    draftConnectors: DraftConnector[];\r\n};\r\n\r\nexport type SaveWorkflowStageDraft = WorkflowBuilderData;\r\n\r\nexport type PublishWorkflowStage = WorkflowBuilderData;\r\n\r\nexport type IBasicPage = Omit<\r\n    IPage,\r\n    'grapes_json' | 'page_subtype' | 'page_type' | 'footer_page_id'\r\n> & {\r\n    footer_page_id?: IPage['footer_page_id'] | null;\r\n};\r\n\r\nexport type ValidConnectorModel<\r\n    Output extends OutputPin,\r\n    SourceId extends string = string,\r\n    TargetId extends string = string,\r\n> = ConnectorModel<Output, SourceId, TargetId> & {\r\n    sourceID: NodeIdModel<SourceId>;\r\n    targetID: NodeIdModel<TargetId>;\r\n    sourcePortID: PortIdOutputModel<Output>;\r\n    targetPortID: PortIdInputModel<(typeof OUTPUT_PIN_PAIR)[Output]>;\r\n};\r\n\r\nexport type DiagramEventBase = {\r\n    state: 'Start' | 'Progress' | 'Completed';\r\n};\r\n\r\nexport type ConnectionPointChangeEvent = DiagramEventBase & {\r\n    connector: Connector;\r\n};\r\n\r\nexport type ElementDrawConnectorEvent = DiagramEventBase & {\r\n    objectType: 'Connector';\r\n    source: Connector;\r\n};\r\n\r\nexport type ElementDrawEvent = ElementDrawConnectorEvent;\r\n\r\nexport type CanvasWorkflowFactory<T extends WorkflowType> = ReturnType<\r\n    typeof getCanvasWorkflow<T>\r\n>;\r\n\r\nexport type CanvasControllerData<W extends WorkflowType> = {\r\n    factory: CanvasWorkflowFactory<W>;\r\n} & Canvas;\r\n\r\nexport type CanvasWorkflowMap<T> = {\r\n    [workflowId: string]: T;\r\n};\r\n\r\nexport type WorkflowPropertyType =\r\n    | 'select'\r\n    | 'multiselect'\r\n    | 'text'\r\n    | 'boolean'\r\n    | 'number';\r\nexport const WORKFLOW_NAME_TRANSLATIONS: Record<\r\n    WorkflowType | CustomPaletteType,\r\n    `${string}_NAME`\r\n> = {\r\n    [WorkflowType.ARRIVAL]: 'ARRIVAL_WORKFLOW_NAME',\r\n    [WorkflowType.CANCELLATION]: 'CANCELLATION_WORKFLOW_NAME',\r\n    [WorkflowType.EVENT_CANCELLATION]: 'EVENT_CANCELLATION_WORKFLOW_NAME',\r\n    [WorkflowType.INVITATION]: 'INVITATION_WORKFLOW_NAME',\r\n    [WorkflowType.MULTI_REGISTRATION]: 'MULTI_REGISTRATION_WORKFLOW_NAME',\r\n    [WorkflowType.PAYMENT]: 'PAYMENT_WORKFLOW_NAME',\r\n    [WorkflowType.PAYMENT_WAITINGLIST]: 'PAYMENT_WAITINGLIST_WORKFLOW_NAME',\r\n    [WorkflowType.PRE_ARRIVAL]: 'PRE_ARRIVAL_WORKFLOW_NAME',\r\n    [WorkflowType.PROFILE]: 'PROFILE_WORKFLOW_NAME',\r\n    [WorkflowType.PUBLIC_REGISTRATION]: 'PUBLIC_REGISTRATION_WORKFLOW_NAME',\r\n    [WorkflowType.REGISTRATION]: 'REGISTRATION_WORKFLOW_NAME',\r\n    [WorkflowType.REGISTRAION_WAITINGLIST]:\r\n        'REGISTRATION_WAITINGLIST_WORKFLOW_NAME',\r\n    [WorkflowType.STAGE_ACTION]: 'STAGE_ACTION_WORKFLOW_NAME',\r\n    [WorkflowType.DECLINE]: 'DECLINE_WORKFLOW_NAME',\r\n    [WorkflowType.PUBLIC_REGISTRATION_AND_MEMBERSHIP]:\r\n        'PUBLIC_REGISTRATION_AND_MEMBERSHIP_WORKFLOW_NAME',\r\n    [WorkflowType.WAITINGLIST]: 'WAITING_LIST_WORKFLOW_NAME',\r\n    'create-work-block': 'CREATE_WORKBLOCK_NAME',\r\n};\r\n\r\nexport const WORKFLOW_EXPLANATION_TRANSLATIONS: Record<\r\n    WorkflowType,\r\n    `${string}_EXPLANATION`\r\n> = {\r\n    [WorkflowType.ARRIVAL]: 'ARRIVAL_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.CANCELLATION]: 'CANCELLATION_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.EVENT_CANCELLATION]:\r\n        'EVENT_CANCELLATION_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.INVITATION]: 'INVITATION_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.MULTI_REGISTRATION]:\r\n        'MULTI_REGISTRATION_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.PAYMENT]: 'PAYMENT_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.PAYMENT_WAITINGLIST]:\r\n        'PAYMENT_WAITING_LIST_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.PRE_ARRIVAL]: 'PRE_ARRIVAL_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.PROFILE]: 'PROFILE_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.PUBLIC_REGISTRATION]:\r\n        'PUBLIC_REGISTRATION_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.REGISTRATION]: 'REGISTRATION_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.REGISTRAION_WAITINGLIST]:\r\n        'REGISTRATION_WAITING_LIST_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.STAGE_ACTION]: 'STAGE_ACTION_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.DECLINE]: 'DECLINE_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.PUBLIC_REGISTRATION_AND_MEMBERSHIP]:\r\n        'PUBLIC_REGISTRATION_AND_MEMBERSHIP_WORKFLOW_EXPLANATION',\r\n    [WorkflowType.WAITINGLIST]: 'WAITING_LIST_WORKFLOW_EXPLANATION',\r\n};\r\n\r\nexport type ControlType<Model> = Model extends any[]\r\n    ? // eslint-disable-next-line no-use-before-define\r\n      ArrayControlType<Model[number]>\r\n    : Model extends { [key: string]: any }\r\n      ? // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        FormGroup<FormGroupType<Model>>\r\n      : FormControl<Model | null>;\r\n\r\ntype ArrayControlType<Row> = FormArray<ControlType<Row>>;\r\n\r\n/** Generate Form-Group type using interface/type */\r\nexport type FormGroupType<Model extends { [key: string]: any }> = {\r\n    [K in keyof Required<Model>]: ControlType<Model[K]>;\r\n};\r\n\r\nexport const enum ProcessType {\r\n    participant = 'participant',\r\n    event = 'event',\r\n    booking = 'booking',\r\n}\r\n\r\n// TODO: Remove this when we have API endpoint with constants\r\nexport const ISO_LANGUAGES: ILanguageItem[] = [\r\n    { id: 'en-US', label: 'English (United States)' },\r\n    { id: 'en-GB', label: 'English (Great Britain)' },\r\n    { id: 'de-DE', label: 'German' },\r\n    { id: 'nl-NL', label: 'Dutch' },\r\n    { id: 'fr-FR', label: 'French' },\r\n    { id: 'es-ES', label: 'Spanish' },\r\n    { id: 'ca-ES', label: 'Catalan (Spain)' },\r\n    { id: 'da-DK', label: 'Danish' },\r\n    { id: 'it-IT', label: 'Italian' },\r\n    { id: 'pt-PT', label: 'Portuguese' },\r\n    { id: 'pt-BR', label: 'Portuguese (Brazilizan)' },\r\n    { id: 'sv-SE', label: 'Swedish' },\r\n    { id: 'cs-CZ', label: 'Czech' },\r\n    { id: 'el-GR', label: 'Greek' },\r\n    { id: 'he-IL', label: 'Hebrew' },\r\n    { id: 'hr-HR', label: 'Croatian' },\r\n    { id: 'hu-HU', label: 'Hungarian' },\r\n    { id: 'ja-JP', label: 'Japanese' },\r\n    { id: 'ko-KR', label: 'Korean' },\r\n    { id: 'nn-NO', label: 'Norwegian' },\r\n    { id: 'pl-PL', label: 'Polish' },\r\n    { id: 'ro-RO', label: 'Romanian' },\r\n    { id: 'ru-RU', label: 'Russian' },\r\n    { id: 'fi-FI', label: 'Finnish' },\r\n    { id: 'zh-CN', label: 'Chinese (Simplified)' },\r\n    { id: 'vi-VN', label: 'Vietnamese' },\r\n    { id: 'sk-SK', label: 'Slovak' },\r\n    { id: 'bg-BG', label: 'Bulgarian' },\r\n    { id: 'tr-TR', label: 'Turkish' },\r\n    { id: 'ur-PK', label: 'Urdu' },\r\n    { id: 'hi-IN', label: 'Hindi' },\r\n    { id: 'th-TH', label: 'Thai' },\r\n    { id: 'ms-MY', label: 'Malay' },\r\n    { id: 'id-ID', label: 'Indonesian' },\r\n    { id: 'fil-PH', label: 'Filipino' },\r\n    { id: 'sr-Latn', label: 'Serbian' },\r\n    { id: 'ar-AE', label: 'Arabic' },\r\n];\r\n\r\nexport const PALETTE_CATEGORIES_ORDER = [\r\n    'INVITATION_WORKFLOWS',\r\n    'REGISTRATION_WORKFLOWS',\r\n    'WAITING_LIST_WORKFLOWS',\r\n    'CANCELLATION_WORKFLOWS',\r\n    'PAYMENT_WORKFLOWS',\r\n    'OTHER_WORKFLOWS',\r\n] as const;\r\n\r\nexport type PaletteCategory = (typeof PALETTE_CATEGORIES_ORDER)[number];\r\n\r\nexport const PALETTE_CATEGORIES_INDEX: Record<PaletteCategory, number> = {\r\n    INVITATION_WORKFLOWS: 1,\r\n    REGISTRATION_WORKFLOWS: 2,\r\n    PAYMENT_WORKFLOWS: 3,\r\n    WAITING_LIST_WORKFLOWS: 4,\r\n    OTHER_WORKFLOWS: 5,\r\n    CANCELLATION_WORKFLOWS: 0,\r\n};\r\n\r\nexport const WORKFLOW_TYPE_CATEGORIES: Record<\r\n    PaletteSymbol,\r\n    PaletteCategory[]\r\n> = {\r\n    'create-work-block': ['OTHER_WORKFLOWS'],\r\n    [WorkflowType.ARRIVAL]: ['REGISTRATION_WORKFLOWS'],\r\n    [WorkflowType.CANCELLATION]: ['CANCELLATION_WORKFLOWS'],\r\n    [WorkflowType.DECLINE]: ['CANCELLATION_WORKFLOWS'],\r\n    [WorkflowType.EVENT_CANCELLATION]: ['CANCELLATION_WORKFLOWS'],\r\n    [WorkflowType.INVITATION]: ['INVITATION_WORKFLOWS'],\r\n    [WorkflowType.MULTI_REGISTRATION]: ['REGISTRATION_WORKFLOWS'],\r\n    [WorkflowType.PAYMENT]: ['PAYMENT_WORKFLOWS'],\r\n    [WorkflowType.PAYMENT_WAITINGLIST]: [\r\n        'PAYMENT_WORKFLOWS',\r\n        'WAITING_LIST_WORKFLOWS',\r\n    ],\r\n    [WorkflowType.PRE_ARRIVAL]: ['REGISTRATION_WORKFLOWS'],\r\n    [WorkflowType.PROFILE]: ['OTHER_WORKFLOWS'],\r\n    [WorkflowType.PUBLIC_REGISTRATION]: ['REGISTRATION_WORKFLOWS'],\r\n    [WorkflowType.PUBLIC_REGISTRATION_AND_MEMBERSHIP]: [\r\n        'REGISTRATION_WORKFLOWS',\r\n    ],\r\n    [WorkflowType.REGISTRAION_WAITINGLIST]: [\r\n        'REGISTRATION_WORKFLOWS',\r\n        'WAITING_LIST_WORKFLOWS',\r\n    ],\r\n    [WorkflowType.REGISTRATION]: ['REGISTRATION_WORKFLOWS'],\r\n    [WorkflowType.STAGE_ACTION]: ['OTHER_WORKFLOWS'],\r\n    [WorkflowType.WAITINGLIST]: ['WAITING_LIST_WORKFLOWS'],\r\n};\r\n\r\nexport const WORKFLOW_TYPE_ORDER: Record<WorkflowType, number> = {\r\n    [WorkflowType.DECLINE]: 0,\r\n    [WorkflowType.CANCELLATION]: 1,\r\n    [WorkflowType.EVENT_CANCELLATION]: 2,\r\n    [WorkflowType.INVITATION]: 3,\r\n    [WorkflowType.PUBLIC_REGISTRATION]: 4,\r\n    [WorkflowType.PUBLIC_REGISTRATION_AND_MEMBERSHIP]: 5,\r\n    [WorkflowType.REGISTRAION_WAITINGLIST]: 6,\r\n    [WorkflowType.REGISTRATION]: 7,\r\n    [WorkflowType.MULTI_REGISTRATION]: 8,\r\n    [WorkflowType.PAYMENT]: 9,\r\n    [WorkflowType.PAYMENT_WAITINGLIST]: 10,\r\n    [WorkflowType.WAITINGLIST]: 11,\r\n    [WorkflowType.PRE_ARRIVAL]: 12,\r\n    [WorkflowType.ARRIVAL]: 13,\r\n    [WorkflowType.PROFILE]: 14,\r\n    [WorkflowType.STAGE_ACTION]: 15,\r\n};\r\n\r\nexport type PaletteCategoryMap = Partial<\r\n    Record<PaletteCategory, PaletteSymbol[]>\r\n>;\r\n\r\nexport const getPaletteCategoryMap = (): PaletteCategoryMap => {\r\n    return Object.keys(WORKFLOW_TYPE_CATEGORIES).reduce((record, key) => {\r\n        const paletteSymbol = key as PaletteSymbol;\r\n        WORKFLOW_TYPE_CATEGORIES[paletteSymbol].forEach((category) => {\r\n            record[category] = [...(record[category] ?? []), paletteSymbol];\r\n        });\r\n        return record;\r\n    }, {} as PaletteCategoryMap);\r\n};\r\n\r\nexport const PALETTE_CATEGORIES_MAP = getPaletteCategoryMap();\r\n","/**\r\n * Please place the code according to the `// #region` comment tag\r\n *\r\n * For example `// #region General utils` `// #region Diagram utils`\r\n */\r\n\r\nimport {\r\n    ConnectorConstraints,\r\n    NodeConstraints,\r\n    PathAnnotationModel,\r\n    PointModel,\r\n    PortConstraints,\r\n    PortVisibility,\r\n} from '@syncfusion/ej2-angular-diagrams';\r\nimport {\r\n    CanvasItem,\r\n    CanvasWorkflowItem,\r\n    InputPin,\r\n    OutputPin,\r\n    WorkflowBuilder,\r\n    WorkflowProperty,\r\n    WorkflowType,\r\n} from '@azavista/workflow-builder-shared';\r\nimport { getCanvasWorkflow } from '@azavista/workflow-builder-shared/lib/factory';\r\nimport { FormArray, FormControl, FormGroup } from '@angular/forms';\r\nimport {\r\n    AzavistaSharedService,\r\n    IAttributeTranslation,\r\n} from '@azavista/components/shared';\r\nimport { IEventWorkflow } from '@azavista/servicelib';\r\nimport {\r\n    CanvasControllerData,\r\n    CanvasWorkflowFactory,\r\n    CustomPaletteType,\r\n    DEFAULT_CONNECTOR,\r\n    DEFAULT_NODE_HEIGHT,\r\n    DEFAULT_NODE_WIDTH,\r\n    DEFAULT_STROKE_WIDTH,\r\n    OUTPUT_PIN_PAIR,\r\n    PREFIX_CONNECTOR,\r\n    PREFIX_NODE,\r\n    PREFIX_PORT,\r\n    PaletteSymbol,\r\n    ValidConnectorModel,\r\n    WORKFLOW_NAME_TRANSLATIONS,\r\n    WORKFLOW_TYPE_CATEGORIES,\r\n    WORKFLOW_TYPE_ORDER,\r\n} from './types';\r\n\r\n// #region General utils\r\nexport const omit = <T extends {}, P extends Array<keyof T>>(\r\n    data: T,\r\n    properties: P,\r\n): Omit<T, P[number]> => {\r\n    const result = { ...data };\r\n    properties.forEach((key) => delete result[key]);\r\n    return result;\r\n};\r\n\r\nexport const objectKeys = <O extends {}>(o: O): Array<keyof O> => {\r\n    return Object.keys(o) as any[];\r\n};\r\n\r\nexport const delay = (milliSeconds: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, milliSeconds);\r\n    });\r\n};\r\n\r\nexport const getGroupByValue = <\r\n    T extends { [key in string]: any },\r\n    K extends keyof T,\r\n>(\r\n    rows: T[],\r\n    fieldName: K,\r\n): { [key in T[K]]?: T[] } => {\r\n    return rows.reduce(\r\n        (group, row) => {\r\n            group[row[fieldName]] = [...(group[row[fieldName]] ?? []), row];\r\n            return group;\r\n        },\r\n        {} as { [key in T[K]]?: T[] },\r\n    );\r\n};\r\n\r\nexport const getMapByValue = <\r\n    T extends { [key in string]: any },\r\n    K extends keyof T,\r\n>(\r\n    rows: T[],\r\n    fieldName: K,\r\n): { [key in T[K]]?: T } => {\r\n    return rows.reduce(\r\n        (group, row) => {\r\n            group[row[fieldName]] = row;\r\n            return group;\r\n        },\r\n        {} as { [key in T[K]]?: T },\r\n    );\r\n};\r\n\r\nexport const isObject = <T>(item: T) => {\r\n    return item && typeof item === 'object' && !Array.isArray(item);\r\n};\r\n\r\n/**\r\n *\r\n * @param target\r\n * @param source\r\n * @returns new object that merged both `target` & `source` with properties from `source` replacing existing `target`'s properties\r\n */\r\nexport const mergeDeep = <T extends {}, S extends {}>(\r\n    target: T,\r\n    source: S,\r\n): T & S => {\r\n    const output: T & S = { ...target } as any;\r\n    if (isObject(target) && isObject(source)) {\r\n        objectKeys(source).forEach((key) => {\r\n            if (isObject(source[key])) {\r\n                if (!(key in target))\r\n                    Object.assign(output, { [key]: source[key] });\r\n                else\r\n                    output[key] = mergeDeep(\r\n                        (target as any)[key],\r\n                        (source as any)[key],\r\n                    );\r\n            } else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n    return output;\r\n};\r\n// #endregion\r\n\r\n// #region HTML template utils\r\nexport const trackByWorkflowProperty = (\r\n    index: number,\r\n    item: WorkflowProperty,\r\n) => {\r\n    return item.attribute;\r\n};\r\n\r\nexport const trackBy =\r\n    <T extends {}>(attribute: keyof T) =>\r\n    (index: number, item: T) =>\r\n        item[attribute];\r\n\r\nexport const trackByAttributeTranslations = (\r\n    index: number,\r\n    item: IAttributeTranslation,\r\n) => {\r\n    return item.value;\r\n};\r\n// #endregion\r\n\r\n// #region Diagram utils\r\nexport const getConnectorAnnotation = (\r\n    outputPin: OutputPin,\r\n): PathAnnotationModel[] => {\r\n    return outputPin !== OutputPin.OUTPUT\r\n        ? [\r\n              {\r\n                  content: outputPin.split('-')[0],\r\n              },\r\n          ]\r\n        : [];\r\n};\r\n\r\nexport const getValidConnectorsFromWorkfowFactory = (\r\n    workflows: CanvasWorkflowFactory<WorkflowType>[],\r\n) =>\r\n    workflows.reduce(\r\n        (result, workflow) => {\r\n            const nextWorkflows = workflow.getNextWorkflows();\r\n            objectKeys(nextWorkflows).forEach((outputType) => {\r\n                const next_workflow_ids = nextWorkflows[outputType];\r\n                if (next_workflow_ids) {\r\n                    result.push({\r\n                        ...DEFAULT_CONNECTOR,\r\n                        id: `${PREFIX_CONNECTOR}${workflow.getId()}_${outputType}`,\r\n                        sourceID: `${PREFIX_NODE}${workflow.getId()}`,\r\n                        sourcePortID: `${PREFIX_PORT}_${outputType}_pin`,\r\n                        targetID: `${PREFIX_NODE}${next_workflow_ids}`,\r\n                        targetPortID: `${PREFIX_PORT}_${OUTPUT_PIN_PAIR[outputType]}_pin`,\r\n                        annotations: getConnectorAnnotation(outputType),\r\n                        constraints:\r\n                            ConnectorConstraints.Default -\r\n                            ConnectorConstraints.DragSourceEnd,\r\n                    });\r\n                }\r\n            });\r\n            return result;\r\n        },\r\n        [] as ValidConnectorModel<OutputPin, string, string>[],\r\n    );\r\n\r\nexport const getDefaultInputPinPort = (type: InputPin): PointPortModel => {\r\n    const inputPinOffsetMap: Record<InputPin, PointModel> = {\r\n        [InputPin.INPUT]: { x: 0, y: 0.5 },\r\n        [InputPin.CANCELLATION_INPUT]: { x: 0.5, y: 0 },\r\n        [InputPin.DECLINE_INPUT]: { x: 0.5, y: 0 },\r\n    };\r\n    return {\r\n        id: `${PREFIX_PORT}_${type}_pin`,\r\n        offset: inputPinOffsetMap[type],\r\n        visibility: PortVisibility.Visible,\r\n        constraints: PortConstraints.InConnect,\r\n        style: {\r\n            fill: '#fff',\r\n            strokeColor: '#ccc',\r\n            strokeWidth: DEFAULT_STROKE_WIDTH,\r\n            opacity: 0.8,\r\n        },\r\n        shape: 'Circle',\r\n        height: 8,\r\n        width: 8,\r\n    };\r\n};\r\nexport const getDefaultOutputPinPort = (type: OutputPin): PointPortModel => {\r\n    const outputPinOffsetMap: Record<OutputPin, PointModel> = {\r\n        [OutputPin.OUTPUT]: { x: 1, y: 0.5 },\r\n        [OutputPin.EXISTING_CONTACT]: { x: 1, y: 0.5 },\r\n        [OutputPin.INVITED_CONTACT]: { x: 1, y: 0.5 },\r\n        [OutputPin.NEW_CONTACT]: { x: 1, y: 0.5 },\r\n        [OutputPin.CANCELLATION_OUTPUT]: { x: 0.5, y: 1 },\r\n        [OutputPin.DECLINE_OUTPUT]: { x: 0.5, y: 1 },\r\n    };\r\n    return {\r\n        id: `${PREFIX_PORT}_${type}_pin`,\r\n        offset: outputPinOffsetMap[type],\r\n        visibility: PortVisibility.Visible,\r\n        style: {\r\n            fill: '#fff',\r\n            strokeColor: '#aaa',\r\n            strokeWidth: DEFAULT_STROKE_WIDTH,\r\n        },\r\n        shape: 'Circle',\r\n        height: 8,\r\n        width: 8,\r\n        constraints: PortConstraints.Draw | PortConstraints.OutConnect,\r\n    };\r\n};\r\nexport const getDefaultNode = (): Omit<NodeModel, 'id'> => ({\r\n    shape: { type: 'HTML' },\r\n    ports: [\r\n        getDefaultInputPinPort(InputPin.INPUT),\r\n        getDefaultOutputPinPort(OutputPin.OUTPUT),\r\n    ],\r\n    width: DEFAULT_NODE_WIDTH,\r\n    height: DEFAULT_NODE_HEIGHT,\r\n    annotations: [],\r\n    constraints:\r\n        NodeConstraints.Default -\r\n        NodeConstraints.Rotate -\r\n        NodeConstraints.Resize -\r\n        NodeConstraints.HideThumbs -\r\n        NodeConstraints.Delete,\r\n    // constraints: NodeConstraints.Default,\r\n});\r\n\r\n// #endregion\r\n\r\n// #region Workflow data utils\r\nexport const getWorkflowIdFromNodeId = (nodeId: NodeModel['id']) => {\r\n    return nodeId.replace(PREFIX_NODE, '');\r\n};\r\n\r\nexport const getOutputSidePins = (pins: OutputPin[]) => {\r\n    return pins.filter((pin) => OUTPUT_PIN_PAIR[pin] === InputPin.INPUT);\r\n};\r\nexport const getOutputNonSidePins = (pins: OutputPin[]) => {\r\n    return pins.filter((pin) => OUTPUT_PIN_PAIR[pin] !== InputPin.INPUT);\r\n};\r\n\r\nexport const getMultipleOutputPorts = (pins: OutputPin[]): PointPortModel[] => {\r\n    const sidePins = getOutputSidePins(pins);\r\n    const nonSidePins = getOutputNonSidePins(pins);\r\n    return sidePins\r\n        .map((pin, index) => {\r\n            const port = getDefaultOutputPinPort(pin);\r\n            port.offset!.y = (index + 1) / (sidePins.length + 1);\r\n            return port;\r\n        })\r\n        .concat(nonSidePins.map(getDefaultOutputPinPort));\r\n};\r\n\r\nexport const getNodePortsFromFactory = <W extends WorkflowType>(\r\n    factory: CanvasWorkflowFactory<W>,\r\n): PointPortModel[] => {\r\n    return [\r\n        ...factory.inputPin.map((inputPin) => getDefaultInputPinPort(inputPin)),\r\n        ...getMultipleOutputPorts(factory.outputPin),\r\n    ].filter((port) => !!port);\r\n};\r\n\r\nexport const getNodeFromCanvasControllerData = <W extends WorkflowType>(\r\n    data: CanvasControllerData<W>,\r\n): NodeModel => {\r\n    const { coordinate, factory } = data;\r\n    return {\r\n        ...getDefaultNode(),\r\n        id: `${PREFIX_NODE}${factory.getId()}`,\r\n        offsetX: coordinate.x,\r\n        offsetY: coordinate.y,\r\n        ports: getNodePortsFromFactory(factory),\r\n    };\r\n};\r\n\r\nexport const getNodeAndConnectorsFromCanvasControllerData = (\r\n    canvasItems: CanvasControllerData<WorkflowType>[],\r\n): Pick<Diagram, 'nodes' | 'connectors'> => ({\r\n    nodes: canvasItems.map((data) => getNodeFromCanvasControllerData(data)),\r\n    connectors: [\r\n        ...getValidConnectorsFromWorkfowFactory(\r\n            canvasItems.map(({ factory }) => factory),\r\n        ),\r\n    ],\r\n});\r\n\r\nexport const getWorkflowFactory = <W extends WorkflowType>(\r\n    type: W,\r\n    data?: CanvasWorkflowItem,\r\n) => {\r\n    const factory = getCanvasWorkflow(type);\r\n    if (data) {\r\n        try {\r\n            factory.setWorkflow(data);\r\n            objectKeys(data.custom_processes).forEach((processKey) =>\r\n                factory.setCustomProcess(\r\n                    processKey,\r\n                    data.custom_processes[processKey],\r\n                ),\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n    return factory;\r\n};\r\n\r\nexport const getWorkflowTypeArray = (): WorkflowType[] => {\r\n    return objectKeys(WorkflowType).reduce((result, data) => {\r\n        const workflowType: WorkflowType | undefined = (WorkflowType as any)[\r\n            data\r\n        ];\r\n        // eslint-disable-next-line eqeqeq\r\n        if (workflowType != undefined) {\r\n            result.push(workflowType);\r\n        }\r\n        return result;\r\n    }, [] as WorkflowType[]);\r\n};\r\n\r\nexport const workflowTypeArray = getWorkflowTypeArray();\r\n\r\nexport const getOutputPinFromConnector = <O extends OutputPin>(\r\n    connector: ConnectorModel<O>,\r\n): O => {\r\n    const sourcePin = connector.sourcePortID;\r\n    return sourcePin?.replace(`${PREFIX_PORT}_`, ``).replace('_pin', '') as O;\r\n};\r\n\r\nexport const reorderWorkflowsByPaletteCategory = (\r\n    workflows: IEventWorkflow[],\r\n): {\r\n    mainWorkflows: IEventWorkflow[];\r\n    cancellationWorkflows: IEventWorkflow[];\r\n} => {\r\n    return {\r\n        mainWorkflows: workflows\r\n            .filter(\r\n                (workflow) =>\r\n                    WORKFLOW_TYPE_CATEGORIES[workflow.type][0] !==\r\n                    'CANCELLATION_WORKFLOWS',\r\n            )\r\n            .sort(\r\n                (workflowA, workflowB) =>\r\n                    WORKFLOW_TYPE_ORDER[workflowA.type] -\r\n                    WORKFLOW_TYPE_ORDER[workflowB.type],\r\n            ),\r\n        cancellationWorkflows: workflows\r\n            .filter(\r\n                (workflow) =>\r\n                    WORKFLOW_TYPE_CATEGORIES[workflow.type][0] ===\r\n                    'CANCELLATION_WORKFLOWS',\r\n            )\r\n            .sort(\r\n                (workflowA, workflowB) =>\r\n                    WORKFLOW_TYPE_ORDER[workflowA.type] -\r\n                    WORKFLOW_TYPE_ORDER[workflowB.type],\r\n            ),\r\n    };\r\n};\r\n\r\nexport const getOrderedIEventWorkflows = (\r\n    workflows: IEventWorkflow[],\r\n): CanvasItem[] => {\r\n    const gap = 80;\r\n    const { mainWorkflows, cancellationWorkflows } =\r\n        reorderWorkflowsByPaletteCategory(workflows);\r\n    const workflowToCanvasItem = (\r\n        workflow: IEventWorkflow,\r\n        position: { x: number; y: number },\r\n    ): CanvasItem => ({\r\n        canvas: {\r\n            coordinate: {\r\n                x: gap + position.x * (DEFAULT_NODE_WIDTH + gap),\r\n                y: gap + position.y * (DEFAULT_NODE_HEIGHT + gap),\r\n            },\r\n            name: '',\r\n            description: '',\r\n        },\r\n        workflow: {\r\n            custom_processes: [],\r\n            id: workflow.id!,\r\n            settings: workflow.settings as any,\r\n            type: workflow.type as any,\r\n        },\r\n    });\r\n\r\n    return [\r\n        ...mainWorkflows.map((workflow, index) =>\r\n            workflowToCanvasItem(workflow, {\r\n                x: index,\r\n                y: 0,\r\n            }),\r\n        ),\r\n        ...cancellationWorkflows.map((workflow, index) =>\r\n            workflowToCanvasItem(workflow, { x: index, y: 1 }),\r\n        ),\r\n    ];\r\n};\r\n\r\n// #endregion\r\n\r\n// #region Forms utils\r\nexport const getFormDirtyValues = <F extends FormGroup>(form: F) => {\r\n    const dirtyValues: Partial<F['value']> = {};\r\n\r\n    objectKeys(form.controls).forEach((key: keyof F['controls']) => {\r\n        const abstractControl = form.controls[key as any];\r\n\r\n        if (abstractControl.dirty) {\r\n            if (abstractControl instanceof FormGroup) {\r\n                dirtyValues[key] = getFormDirtyValues(abstractControl);\r\n            } else {\r\n                dirtyValues[key] = abstractControl.value;\r\n            }\r\n        }\r\n    });\r\n\r\n    return dirtyValues;\r\n};\r\n\r\nexport function createFormGroupFromData<T extends {}>(\r\n    data: T,\r\n): T extends any[] ? FormArray : FormGroup {\r\n    if (Array.isArray(data)) {\r\n        const formArray = new FormArray(\r\n            data.map((row) => createFormGroupFromData(row)),\r\n        );\r\n        return formArray as any;\r\n    }\r\n    if (typeof data === 'object' && !!data) {\r\n        const formGroup = new FormGroup({});\r\n        objectKeys(data).forEach((key) => {\r\n            formGroup.addControl(\r\n                key as any,\r\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n                // @ts-ignore\r\n                createFormGroupFromData((data as any)[key]) as any,\r\n            );\r\n        });\r\n        return formGroup as any;\r\n    }\r\n    return new FormControl(data) as any;\r\n}\r\n\r\n// Palette Utils\r\nexport const getNodeModelForPaletteFromWorkflowType = (\r\n    workflowType: WorkflowType,\r\n    sharedSvc: AzavistaSharedService,\r\n) => {\r\n    const factory = getCanvasWorkflow(workflowType);\r\n    const outputPins = factory.outputPin;\r\n    const sideOutputPins = getOutputSidePins(outputPins);\r\n    return {\r\n        ...getDefaultNode(),\r\n        addInfo: { type: workflowType, label: workflowType },\r\n        ports: getNodePortsFromFactory(factory) ?? [],\r\n        id: workflowType,\r\n        constraints: NodeConstraints.Default,\r\n        padding: {\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            top: 0,\r\n        },\r\n        margin: {\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            top: 0,\r\n        },\r\n        shape: {\r\n            type: 'HTML',\r\n            content: `<div class=\"palette-item\">\r\n            <div class=\"palette-item__inner\">\r\n            <i class=\"material-icons-outlined palette-item__icon\">dataset</i>\r\n          ${factory.inputPin.map(\r\n              (inputPin) =>\r\n                  // eslint-disable-next-line prettier/prettier\r\n      `<div class=\"palette-item__${inputPin}\"></div>`\r\n          )}${getOutputNonSidePins(outputPins).map(\r\n              (outputPin) =>\r\n                  // eslint-disable-next-line prettier/prettier\r\n      `<div class=\"palette-item__${outputPin}\"></div>`\r\n          )}${sideOutputPins.map((outputPin, index) => {\r\n              const top = ((index + 1) * 100) / (sideOutputPins.length + 1);\r\n              return `<div class=\"palette-item__${outputPin} palette-item__output\" style=\"top: ${Math.round(\r\n                  top,\r\n              )}%;\"></div>`;\r\n          })}\r\n            </div>\r\n            <div class=\"palette-item__title\">${` ${sharedSvc.translate(\r\n                WORKFLOW_NAME_TRANSLATIONS[workflowType],\r\n            )}`}</div>\r\n          </div>`,\r\n        },\r\n    } as NodeModelForPalette;\r\n};\r\n\r\n// eslint-disable-next-line max-len\r\nexport const nodeModelForPaletteCreateWorkBlock: NodeModelForPalette<CustomPaletteType> =\r\n    {\r\n        ...getDefaultNode(),\r\n        addInfo: { type: 'create-work-block', label: 'CREATE_WORKBLOCK' },\r\n        ports: [],\r\n        id: 'create-work-block',\r\n        constraints: NodeConstraints.None,\r\n        shape: {\r\n            type: 'HTML',\r\n            content: `<div class=\"palette-item\">\r\n            <div class=\"palette-item__inner\">\r\n            <i class=\"material-icons-outlined palette-item__icon\">post_add</i>\r\n            </div>\r\n          </div>`,\r\n        },\r\n    };\r\n\r\nexport const getNodeModelForPalette = (\r\n    paletteSymbol: PaletteSymbol,\r\n    sharedSvc: AzavistaSharedService,\r\n) => {\r\n    if (paletteSymbol === 'create-work-block') {\r\n        return nodeModelForPaletteCreateWorkBlock;\r\n    }\r\n    return getNodeModelForPaletteFromWorkflowType(paletteSymbol, sharedSvc);\r\n};\r\n\r\n// local storage tools\r\nconst jsonParse = <T>(jsonText: string | null): T | undefined => {\r\n    let myResponse: T | undefined;\r\n    if (jsonText == null) {\r\n        return undefined;\r\n    }\r\n    try {\r\n        myResponse = JSON.parse(jsonText);\r\n    } catch (e: any) {\r\n        myResponse = undefined;\r\n        throw new Error('Error occured: ', e);\r\n    }\r\n    return myResponse;\r\n};\r\n\r\nconst getBuilderWorkflowLocalStorageKey = (eventId: string) =>\r\n    `azavista-workflow-builder-${eventId}`;\r\nexport const getBuilderWorkflowFromLocalStorage = (eventId: string) => {\r\n    const content = localStorage.getItem(\r\n        getBuilderWorkflowLocalStorageKey(eventId),\r\n    );\r\n    return jsonParse<WorkflowBuilder>(content);\r\n};\r\n\r\nexport const saveBuilderWorkflowToLocalStorage = (\r\n    eventId: string,\r\n    data: WorkflowBuilder,\r\n) => {\r\n    localStorage.setItem(\r\n        getBuilderWorkflowLocalStorageKey(eventId),\r\n        JSON.stringify(data),\r\n    );\r\n};\r\n","import { AzavistaApiService } from '@azavista/servicelib';\r\n\r\nexport type AzavistaServiceLibCacheProxy<\r\n    MethodNames extends Array<keyof AzavistaApiService>,\r\n> = Pick<AzavistaApiService, MethodNames[number]>;\r\n\r\nexport const getAzavistaServiceLibCacheProxy = <\r\n    MethodNames extends Array<keyof AzavistaApiService>,\r\n>(\r\n    apiSvc: AzavistaApiService,\r\n    methodNames: MethodNames,\r\n): AzavistaServiceLibCacheProxy<MethodNames> => {\r\n    const cacheObj: {\r\n        [Key in MethodNames[number]]?: {\r\n            [jsonMethodParams: string]: ReturnType<AzavistaApiService[Key]>;\r\n        };\r\n    } = {};\r\n    const cacheObjAny = cacheObj as any;\r\n    const methods: Partial<AzavistaServiceLibCacheProxy<MethodNames>> = {};\r\n    methodNames.forEach((name) => {\r\n        (methods as any)[name] = async (...params: any[]) => {\r\n            const paramsStringified = JSON.stringify(params);\r\n            if (cacheObjAny?.[name]?.[paramsStringified] !== undefined) {\r\n                return cacheObjAny[name][paramsStringified];\r\n            }\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            const result = await (apiSvc[name] as any)(...params);\r\n            if (cacheObjAny[name] == null) {\r\n                cacheObjAny[name] = {};\r\n            }\r\n            cacheObjAny[name][paramsStringified] = result;\r\n\r\n            return result;\r\n        };\r\n    });\r\n\r\n    return methods as any;\r\n};\r\n\r\n// export class AzavistaServiceLibCacheService<\r\n//     MethodNames extends Array<keyof AzavistaApiService>,\r\n//     // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n//     // @ts-nocheck\r\n// > implements AzavistaApiServiceMethods<MethodNames>\r\n// {\r\n//     private cacheObj: {\r\n//         [Key in MethodNames[number]]?: {\r\n//             [jsonMethodParams: string]: ReturnType<AzavistaApiService[Key]>;\r\n//         };\r\n//     } = {};\r\n\r\n//     constructor(\r\n//         private apiSvc: AzavistaApiService,\r\n//         public methodNames: MethodNames,\r\n//     ) {\r\n//         const cacheObjAny = this.cacheObj as any;\r\n//         methodNames.forEach((name) => {\r\n//             (this as any)[name] = async (...params: any[]) => {\r\n//                 const paramsStringified = JSON.stringify(params);\r\n//                 if (cacheObjAny?.[name]?.[paramsStringified] !== undefined) {\r\n//                     return cacheObjAny[name][paramsStringified];\r\n//                 }\r\n//                 // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n//                 const result = await (this.apiSvc[name] as any)(...params);\r\n//                 if (cacheObjAny[name] == null) {\r\n//                     cacheObjAny[name] = {};\r\n//                 }\r\n//                 cacheObjAny[name][paramsStringified] = result;\r\n\r\n//                 return result;\r\n//             };\r\n//         });\r\n//     }\r\n// }\r\n","/* eslint-disable no-use-before-define */\r\nimport {\r\n    Canvas,\r\n    CanvasItem,\r\n    CanvasWorkflowItem,\r\n    Coordinate,\r\n    OutputPin,\r\n    WorkflowBuilder,\r\n    WorkflowSettings,\r\n    WorkflowType,\r\n    WorkflowPropertySelect,\r\n} from '@azavista/workflow-builder-shared';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n    IAsset,\r\n    IEmailCampaign,\r\n    IEvent,\r\n    IEventSettings,\r\n    IIntegration,\r\n    IPage,\r\n    ITeam,\r\n    IUser,\r\n    Step,\r\n} from '@azavista/servicelib';\r\nimport { CrmStatus } from '@azavista/azavista-types';\r\nimport { BehaviorSubject, filter, firstValueFrom, map } from 'rxjs';\r\nimport { IField } from '@azavista/components/shared';\r\nimport {\r\n    CanvasWorkflowFactory,\r\n    WorkflowBuilderData,\r\n    CanvasControllerData,\r\n    CanvasWorkflowMap,\r\n} from './types';\r\n\r\nimport { getWorkflowFactory, objectKeys } from './utils';\r\n\r\nexport type WorkflowPropertyDataSourceType =\r\n    WorkflowPropertySelect['datasource'];\r\n\r\nexport type WorkflowPropertyDataSourceMaps = {\r\n    Form: IPage;\r\n    Page: IPage;\r\n    Email: IEmailCampaign;\r\n    CrmStatus: CrmStatus;\r\n    Workflow: CanvasWorkflowFactory<WorkflowType>;\r\n    ProfilePage: IPage;\r\n};\r\n\r\nexport const getCrmStatusArray = (): CrmStatus[] => {\r\n    return objectKeys(CrmStatus).reduce((result, data) => {\r\n        const crmStatus: CrmStatus | undefined = (CrmStatus as any)[data];\r\n        // eslint-disable-next-line eqeqeq\r\n        if (crmStatus != undefined) {\r\n            result.push(crmStatus);\r\n        }\r\n        return result;\r\n    }, [] as CrmStatus[]);\r\n};\r\nexport const crmStatusArray = getCrmStatusArray();\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AzavistaWorkflowBuilderController {\r\n    dataMap: CanvasWorkflowMap<CanvasControllerData<WorkflowType>> = {};\r\n\r\n    validityMap: CanvasWorkflowMap<boolean> = {};\r\n\r\n    dataProvider?: WorkflowBuilderProviderAbstract;\r\n\r\n    eventId?: string;\r\n\r\n    initStatus$ = new BehaviorSubject<'completed' | 'processing' | undefined>(\r\n        undefined,\r\n    );\r\n\r\n    isDebugCallback?: () => boolean;\r\n\r\n    async initFromProvider(\r\n        dataProvider: WorkflowBuilderProviderAbstract,\r\n        eventId: string,\r\n    ) {\r\n        this.initStatus$.next('processing');\r\n        this.eventId = eventId;\r\n        this.dataProvider = dataProvider;\r\n        this.init({\r\n            workflows: await this.dataProvider.getAllWorkflowsForInit(eventId),\r\n        });\r\n        this.initStatus$.next('completed');\r\n    }\r\n\r\n    init(workflowData: WorkflowBuilder | null) {\r\n        workflowData?.workflows.forEach(({ workflow, canvas }) => {\r\n            this.addWorkflow(workflow.type, canvas, workflow);\r\n        });\r\n    }\r\n\r\n    addWorkflow<W extends WorkflowType>(\r\n        type: W,\r\n        canvas: Canvas,\r\n        data?: CanvasWorkflowItem,\r\n    ) {\r\n        const factory = getWorkflowFactory(type, data);\r\n        const createdData = { factory, ...canvas };\r\n        this.dataMap[factory.getId()] = createdData;\r\n        this.updateValidityMap<W>(factory);\r\n        this.save();\r\n        return createdData;\r\n    }\r\n\r\n    updateWorkflowSettings<T extends WorkflowType>(\r\n        workflowId: string,\r\n        data: WorkflowSettings<T>,\r\n    ) {\r\n        const { factory } = this.dataMap[workflowId];\r\n        factory?.setValues(data);\r\n        this.updateValidityMap<T>(factory);\r\n        this.save();\r\n    }\r\n\r\n    updateWorkflowCoordinate(workflowId: string, coordinate: Coordinate) {\r\n        if (this.dataMap[workflowId]?.coordinate) {\r\n            this.dataMap[workflowId].coordinate = coordinate;\r\n            this.save();\r\n        }\r\n    }\r\n\r\n    updateWorkflowNextWorkflow(\r\n        outputType: OutputPin,\r\n        sourceWorkflowId: string | null,\r\n        targetWorkflowId: string | null,\r\n    ) {\r\n        if (!sourceWorkflowId) {\r\n            return;\r\n        }\r\n        const { factory } = this.dataMap[sourceWorkflowId];\r\n        factory?.setNextWorkflow(outputType, targetWorkflowId);\r\n        this.updateValidityMap(factory);\r\n        this.save();\r\n    }\r\n\r\n    updateWorkflowCanvas(workflowId: string, data: Partial<Canvas>) {\r\n        if (this.dataMap[workflowId]) {\r\n            this.dataMap[workflowId] = {\r\n                ...this.dataMap[workflowId],\r\n                ...data,\r\n            };\r\n            this.save();\r\n        }\r\n    }\r\n\r\n    updateWorkflowProcess(\r\n        workflowId: string,\r\n        attribute: string,\r\n        steps: Step[],\r\n    ) {\r\n        const { factory } = this.dataMap[workflowId];\r\n        factory?.setCustomProcess(attribute, steps);\r\n        this.updateValidityMap(factory);\r\n        this.save();\r\n    }\r\n\r\n    isValidNextWorkflow(\r\n        outputType: OutputPin,\r\n        sourceWorkflowId: string | null,\r\n        targetWorkflowId: string | null,\r\n        isNewConnection = false,\r\n    ): boolean {\r\n        const isTargetingSelf = sourceWorkflowId === targetWorkflowId;\r\n        const sourceWorkflow = sourceWorkflowId\r\n            ? this.dataMap[sourceWorkflowId]\r\n            : null;\r\n        const possibleWorkflows =\r\n            sourceWorkflow?.factory.getPossibleWorkflows(\r\n                outputType,\r\n                Object.values(this.dataMap).map(({ factory }) => factory),\r\n            ) ?? [];\r\n        const noOutputPin = possibleWorkflows.length === 0;\r\n\r\n        const inValidTargetPin =\r\n            targetWorkflowId && !possibleWorkflows.includes(targetWorkflowId);\r\n        const isAddingMultipleConnection = !!(\r\n            isNewConnection &&\r\n            sourceWorkflow?.factory.getNextWorkflows()[outputType]\r\n        );\r\n        const isAddingEmptySourceConnection =\r\n            isNewConnection && !sourceWorkflowId;\r\n        if (\r\n            noOutputPin ||\r\n            inValidTargetPin ||\r\n            isTargetingSelf ||\r\n            isAddingMultipleConnection ||\r\n            isAddingEmptySourceConnection\r\n        ) {\r\n            this.log('isValidNextWorkflow', {\r\n                isTargetingSelf,\r\n                sourceWorkflow,\r\n                possibleWorkflows,\r\n                noOutputPin,\r\n                inValidTargetPin,\r\n                isAddingMultipleConnection,\r\n                isAddingEmptySourceConnection,\r\n            });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    deleteWorkflow(workflowId: string) {\r\n        delete this.dataMap[workflowId];\r\n        delete this.validityMap[workflowId];\r\n        this.validityMap = {\r\n            ...this.validityMap,\r\n        };\r\n        this.save();\r\n    }\r\n\r\n    getCurrentState(): WorkflowBuilder {\r\n        const workflows = Object.entries(this.dataMap).reduce(\r\n            (result, [, { factory, coordinate, description, name }]) => {\r\n                return result.concat([\r\n                    {\r\n                        canvas: { coordinate, description, name },\r\n                        workflow: factory.getWorkflow(),\r\n                    },\r\n                ]);\r\n            },\r\n            [] as CanvasItem[],\r\n        );\r\n        return { workflows };\r\n    }\r\n\r\n    async save() {\r\n        this.log('save', {\r\n            eventId: this.eventId,\r\n            getCurrentState: this.getCurrentState(),\r\n        });\r\n        if (this.eventId) {\r\n            this.dataProvider?.saveBuilderData(\r\n                this.eventId,\r\n                this.getCurrentState(),\r\n            );\r\n        }\r\n    }\r\n\r\n    async publish() {\r\n        if (this.eventId) {\r\n            this.dataProvider?.publishBuilderData(\r\n                this.eventId,\r\n                this.getCurrentState(),\r\n            );\r\n        }\r\n    }\r\n\r\n    async getInitializedWorkflowsMap() {\r\n        return firstValueFrom(\r\n            this.initStatus$.pipe(\r\n                filter((status) => status === 'completed'),\r\n                map(() => this.dataMap),\r\n            ),\r\n        );\r\n    }\r\n\r\n    log(logName: string, ...params: any[]) {\r\n        if (this.isDebugCallback?.()) {\r\n            console.groupCollapsed(logName);\r\n            console.trace(params);\r\n            console.groupEnd();\r\n        }\r\n    }\r\n\r\n    private updateValidityMap<W extends WorkflowType>(\r\n        factory: CanvasWorkflowFactory<W>,\r\n    ) {\r\n        this.validityMap = {\r\n            ...this.validityMap,\r\n            [factory.getId()]: factory.isValidated(),\r\n        };\r\n    }\r\n}\r\n\r\nexport type WorkflowBuilderDataSourceCallbacksOptions = {\r\n    skippedWorkflowIds: string[];\r\n};\r\n\r\nexport type ProcessDataSourceCallbacks = {\r\n    users: () => Promise<IUser[]>;\r\n    integrations: () => Promise<Omit<IIntegration, 'settings'>[]>;\r\n    getEventFields: (eventId: string) => Promise<IField[]>;\r\n    event: (eventId: string) => Promise<{\r\n        detail: IEvent;\r\n        teams: ITeam[] | undefined;\r\n        templateEvents: IEvent[] | undefined;\r\n        participantFields: IField[];\r\n        assets: IAsset[];\r\n        settings: IEventSettings;\r\n    }>;\r\n};\r\n\r\n@Injectable()\r\nexport abstract class WorkflowBuilderProviderAbstract {\r\n    constructor(\r\n        protected workflowController: AzavistaWorkflowBuilderController,\r\n    ) {}\r\n\r\n    abstract dataSourceCallbacks: {\r\n        [dataSource in WorkflowPropertyDataSourceType]: (\r\n            eventId: string,\r\n            options: WorkflowBuilderDataSourceCallbacksOptions,\r\n        ) => Promise<WorkflowPropertyDataSourceMaps[dataSource][]>;\r\n    };\r\n\r\n    abstract processDataSourceCallback: ProcessDataSourceCallbacks;\r\n\r\n    abstract getAllWorkflowsForInit(eventId: string): Promise<CanvasItem[]>;\r\n\r\n    abstract saveBuilderData(\r\n        eventId: string,\r\n        data: WorkflowBuilder,\r\n    ): Promise<void>;\r\n\r\n    abstract publishBuilderData(\r\n        eventId: string,\r\n        data: WorkflowBuilder,\r\n    ): Promise<void>;\r\n\r\n    async getBuilderData(eventId: string): Promise<WorkflowBuilderData> {\r\n        const unformattedWorkflows = await this.getAllWorkflowsForInit(eventId);\r\n        return {\r\n            draftConnectors: [],\r\n            workflows: unformattedWorkflows,\r\n        };\r\n    }\r\n\r\n    async getAllWorkflowsForDataSource(skippedWorkflowIds: string[]) {\r\n        const dataMap =\r\n            await this.workflowController.getInitializedWorkflowsMap();\r\n\r\n        return Object.values(dataMap)\r\n            .filter(\r\n                (data) => !skippedWorkflowIds.includes(data.factory.getId()),\r\n            )\r\n            .map((data) => data.factory);\r\n    }\r\n}\r\n","import {\r\n    AzavistaApiService,\r\n    EventType,\r\n    EventWorkflowParentType,\r\n    IEvent,\r\n    ISearchTeamsRequest,\r\n    PageType,\r\n} from '@azavista/servicelib';\r\nimport {\r\n    flatSearchToRecursive,\r\n    FlatSearchParams,\r\n} from '@azavista/advanced-search';\r\nimport { CanvasItem, WorkflowBuilder } from '@azavista/workflow-builder-shared';\r\nimport { getAzavistaServiceLibCacheProxy } from './servicelib-cache.service';\r\nimport {\r\n    AzavistaWorkflowBuilderController,\r\n    ProcessDataSourceCallbacks,\r\n    WorkflowBuilderProviderAbstract,\r\n    crmStatusArray,\r\n} from '../workflow-builder.controller';\r\nimport { getOrderedIEventWorkflows } from '../utils';\r\n\r\n// eslint-disable-next-line max-len\r\nexport class WorkflowBuilderProviderApi extends WorkflowBuilderProviderAbstract {\r\n    cacheService = getAzavistaServiceLibCacheProxy(this.apiSvc, [\r\n        'getAllPages',\r\n        'getAllEventEmailCampaigns',\r\n        'getAllUsers',\r\n        'searchTeams',\r\n        'getAllEvents',\r\n        'getAllEventFields',\r\n        'getAllEventParticipantFields',\r\n        'getAllEventAssets',\r\n        'getEventSettings',\r\n        'getProcess',\r\n        'getEvent',\r\n        'searchIntegrations',\r\n    ]);\r\n\r\n    override dataSourceCallbacks: WorkflowBuilderProviderAbstract['dataSourceCallbacks'] =\r\n        {\r\n            Form: async (eventId: string) => this.getAllPageForms(eventId),\r\n            Page: (eventId: string) => this.getAllPagesNonForm(eventId),\r\n            Email: (eventId: string) =>\r\n                this.cacheService.getAllEventEmailCampaigns(eventId),\r\n            CrmStatus: async () => crmStatusArray,\r\n            Workflow: (eventId, options) =>\r\n                this.getAllWorkflowsForDataSource(options.skippedWorkflowIds),\r\n            ProfilePage: (eventId: string) =>\r\n                this.cacheService.getAllPages(PageType.profile, eventId),\r\n        };\r\n\r\n    override processDataSourceCallback: ProcessDataSourceCallbacks = {\r\n        users: () => this.cacheService.getAllUsers(),\r\n        event: async (eventId) => this.getProcessDataSourceEvent(eventId),\r\n        getEventFields: async (eventId: string) =>\r\n            this.cacheService.getAllEventFields(eventId),\r\n        integrations: () =>\r\n            this.apiSvc.getAllPagedItems(\r\n                (req) => this.cacheService.searchIntegrations(req),\r\n                (res) => res.integrations,\r\n            ),\r\n    };\r\n\r\n    constructor(\r\n        private apiSvc: AzavistaApiService,\r\n        protected controller: AzavistaWorkflowBuilderController,\r\n    ) {\r\n        super(controller);\r\n    }\r\n\r\n    private async getAllPageForms(eventId: string) {\r\n        const allPages = await this.cacheService.getAllPages(\r\n            PageType.page,\r\n            eventId,\r\n        );\r\n        return allPages.filter((page) => page.is_form && page.is_published);\r\n    }\r\n\r\n    private async getAllPagesNonForm(eventId: string) {\r\n        const allPages = await this.cacheService.getAllPages(\r\n            PageType.page,\r\n            eventId,\r\n        );\r\n        return allPages.filter((page) => !page.is_form && page.is_published);\r\n    }\r\n\r\n    override async getAllWorkflowsForInit(\r\n        eventId: string,\r\n    ): Promise<CanvasItem[]> {\r\n        const response = await this.apiSvc.getAllEventWorkflows(\r\n            EventWorkflowParentType.event,\r\n            eventId,\r\n        );\r\n        return getOrderedIEventWorkflows(response.workflows);\r\n    }\r\n\r\n    override async saveBuilderData(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        eventId: string,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        data: WorkflowBuilder,\r\n    ): Promise<void> {\r\n        // TODO: save workflows action\r\n    }\r\n\r\n    override async publishBuilderData(\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        eventId: string,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        data: WorkflowBuilder,\r\n    ): Promise<void> {\r\n        // TODO: publish workflows action\r\n    }\r\n\r\n    async getProcessDataSourceEvent(\r\n        eventId: string,\r\n    ): ReturnType<ProcessDataSourceCallbacks['event']> {\r\n        const eventDetail = await this.cacheService.getEvent(eventId);\r\n        const [\r\n            assets,\r\n            participantFields,\r\n            eventSettings,\r\n            teams,\r\n            templateEvents,\r\n        ] = await Promise.all([\r\n            this.cacheService.getAllEventAssets(eventId),\r\n            this.cacheService.getAllEventParticipantFields(eventId),\r\n            this.cacheService.getEventSettings(eventId),\r\n            this.getEventTeams(eventDetail),\r\n            this.getTemplateEvents(eventDetail),\r\n        ]);\r\n        return {\r\n            detail: eventDetail,\r\n            assets,\r\n            participantFields,\r\n            settings: eventSettings.settings,\r\n            teams,\r\n            templateEvents,\r\n        };\r\n    }\r\n\r\n    async getEventTeams(event: IEvent) {\r\n        if (event.type === EventType.workflow) {\r\n            const searchTeamsRequest: ISearchTeamsRequest = {\r\n                limit: 50,\r\n                offset: 0,\r\n            };\r\n            const params = [\r\n                {\r\n                    field: { name: 'id' },\r\n                    value: event.team_ids,\r\n                    operator: 'in',\r\n                },\r\n            ] as FlatSearchParams;\r\n            searchTeamsRequest.advancedQuery = flatSearchToRecursive(\r\n                params,\r\n                'name',\r\n            );\r\n            const searchTeamsResponse =\r\n                await this.cacheService.searchTeams(searchTeamsRequest);\r\n            return searchTeamsResponse.teams;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    async getTemplateEvents(event: IEvent) {\r\n        if (event.type === EventType.workflow) {\r\n            const allTemplateEvents = await this.apiSvc.getAllEvents(\r\n                EventType.template,\r\n            );\r\n            return allTemplateEvents;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AzavistaApiService } from '@azavista/servicelib';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, of, map } from 'rxjs';\nimport { WorkflowBuilderProviderApi } from './workflow-builder-provider.api';\nimport {\n    AzavistaWorkflowBuilderController,\n    WorkflowBuilderProviderAbstract,\n} from '../workflow-builder.controller';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class WorkflowBuilderService {\n    dataProvider: WorkflowBuilderProviderAbstract =\n        new WorkflowBuilderProviderApi(this.apiSvc, this.controller);\n\n    constructor(\n        private apiSvc: AzavistaApiService,\n        private controller: AzavistaWorkflowBuilderController,\n        private translate: TranslateService,\n    ) {}\n\n    translationsLoaded(): Observable<boolean> {\n        if (this.translate.store.translations[this.translate.currentLang]) {\n            return of(true);\n        }\n        return this.translate.onLangChange.pipe(map((res) => !!res));\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport {\r\n    AzavistaSharedService,\r\n    FieldComponentType,\r\n    IAttributeTranslation,\r\n    IField,\r\n} from '@azavista/components/shared';\r\nimport {\r\n    WorkflowProperty,\r\n    WorkflowPropertyWithSchema,\r\n    WorkflowSettings,\r\n    WorkflowType,\r\n} from '@azavista/workflow-builder-shared';\r\nimport { IEmailCampaign } from '@azavista/servicelib';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport {\r\n    AbstractControl,\r\n    AsyncValidatorFn,\r\n    FormArray,\r\n    FormControl,\r\n    FormGroup,\r\n    Validators,\r\n} from '@angular/forms';\r\nimport {\r\n    WORKFLOW_NAME_TRANSLATIONS,\r\n    WORKFLOW_EXPLANATION_TRANSLATIONS,\r\n    IBasicPage,\r\n    CanvasWorkflowFactory,\r\n} from '../types';\r\nimport {\r\n    WorkflowBuilderProviderAbstract,\r\n    WorkflowPropertyDataSourceMaps,\r\n    WorkflowPropertyDataSourceType,\r\n    crmStatusArray,\r\n} from '../workflow-builder.controller';\r\nimport { createFormGroupFromData, delay, mergeDeep } from '../utils';\r\n\r\ntype DataSourceOptions = {\r\n    eventId: string;\r\n    workflowId: string;\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AzavistaWorkflowBuilderFormFieldService {\r\n    getPageAttributeTranslation = (\r\n        pages: IBasicPage[],\r\n    ): IAttributeTranslation[] => {\r\n        return pages.map((page) => ({\r\n            value: page.id!,\r\n            trans: {\r\n                [this.translateSvc.currentLang]: page.name,\r\n            },\r\n        }));\r\n    };\r\n\r\n    getWorkflowAttributeTranslations = (\r\n        workflows: CanvasWorkflowFactory<WorkflowType>[],\r\n        skippedId?: string[],\r\n    ): IAttributeTranslation[] => {\r\n        return workflows.reduce((result, factory) => {\r\n            const id = factory.getId();\r\n            if (!skippedId?.includes(id)) {\r\n                const workflow = factory.getWorkflow();\r\n                result.push({\r\n                    value: id,\r\n                    trans: {\r\n                        [this.translateSvc.currentLang]: workflow.type,\r\n                    },\r\n                });\r\n            }\r\n\r\n            return result;\r\n        }, [] as IAttributeTranslation[]);\r\n    };\r\n\r\n    getEmailCampaignAttributeTranslations = (\r\n        emails: IEmailCampaign[],\r\n    ): IAttributeTranslation[] => {\r\n        return emails.map((email) => ({\r\n            value: email.id!,\r\n            trans: {\r\n                [this.translateSvc.currentLang]: email.name,\r\n            },\r\n        }));\r\n    };\r\n\r\n    getCrmAttributeTranslations = (): IAttributeTranslation[] => {\r\n        return crmStatusArray.map((crmStatus) => ({\r\n            value: crmStatus,\r\n            trans: {\r\n                [this.translateSvc.currentLang]: crmStatus,\r\n            },\r\n        }));\r\n    };\r\n\r\n    translationsMapCallback: {\r\n        [key in WorkflowPropertyDataSourceType]: (\r\n            rows: Array<WorkflowPropertyDataSourceMaps[key]>,\r\n        ) => IAttributeTranslation[];\r\n    } = {\r\n        CrmStatus: this.getCrmAttributeTranslations,\r\n        Email: this.getEmailCampaignAttributeTranslations,\r\n        Form: this.getPageAttributeTranslation,\r\n        Page: this.getPageAttributeTranslation,\r\n        ProfilePage: this.getPageAttributeTranslation,\r\n        Workflow: this.getWorkflowAttributeTranslations,\r\n    };\r\n\r\n    constructor(\r\n        private sharedSvc: AzavistaSharedService,\r\n        private translateSvc: TranslateService,\r\n    ) {}\r\n\r\n    getFormGroupFromWorkflowFactory(\r\n        properties: WorkflowProperty[],\r\n        factory: CanvasWorkflowFactory<WorkflowType>,\r\n    ) {\r\n        const formGroup = new FormGroup({});\r\n        properties.forEach((property) => {\r\n            formGroup.addControl(\r\n                property.attribute,\r\n                this.getFormControlFromWorkflowProperty(property, factory),\r\n            );\r\n        });\r\n        return formGroup as FormGroup;\r\n    }\r\n\r\n    getFormControlFromWorkflowProperty<\r\n        D extends WorkflowPropertyWithSchema['datasource'],\r\n    >(\r\n        property: WorkflowPropertyWithSchema & { datasource: D },\r\n        factory: CanvasWorkflowFactory<WorkflowType>,\r\n    ): FormControl | FormArray {\r\n        const { type } = property;\r\n        const workflowSettings = factory.getWorkflow().settings;\r\n        const validators = property.mandatory ? Validators.required : [];\r\n        const asyncValidators: AsyncValidatorFn = async (\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            control: AbstractControl,\r\n        ) => {\r\n            await delay(500);\r\n            control.markAsDirty();\r\n            control.markAsTouched();\r\n            return factory.validateAttribute(property)\r\n                ? null\r\n                : { validatorError: control.value };\r\n        };\r\n        switch (type) {\r\n            case 'multiselect': {\r\n                return new FormArray(\r\n                    (\r\n                        workflowSettings[\r\n                            property.attribute as keyof WorkflowSettings<\r\n                                string | null\r\n                            >\r\n                        ] as string[]\r\n                    )?.map((value) => {\r\n                        return new FormControl(value);\r\n                    }) ?? [],\r\n                    validators,\r\n                    asyncValidators,\r\n                );\r\n            }\r\n            case 'select':\r\n            case 'boolean':\r\n            case 'number':\r\n            case 'text': {\r\n                return new FormControl(\r\n                    (workflowSettings as any)[property.attribute],\r\n                    // property.mandatory ? Validators.required : [],\r\n                    validators,\r\n                    asyncValidators,\r\n                );\r\n            }\r\n            case 'process': {\r\n                return createFormGroupFromData(\r\n                    factory.getCustomProcess(property.attribute) ?? [],\r\n                ) as any;\r\n            }\r\n        }\r\n    }\r\n\r\n    async getFieldFromWorkflowProperty<\r\n        D extends WorkflowPropertyWithSchema['datasource'],\r\n    >(\r\n        property: WorkflowPropertyWithSchema & { datasource: D },\r\n        provider: WorkflowBuilderProviderAbstract,\r\n        options: DataSourceOptions,\r\n    ): Promise<IField> {\r\n        const { attribute, schema, datasource, label, mandatory, type } =\r\n            property;\r\n        const baseField: Pick<\r\n            IField,\r\n            | 'category'\r\n            | 'builtin'\r\n            | 'editable'\r\n            | 'id'\r\n            | 'name'\r\n            | 'label'\r\n            | 'mandatory_for_planners'\r\n        > = {\r\n            category: '',\r\n            builtin: true,\r\n            editable: true,\r\n            id: attribute,\r\n            name: attribute,\r\n            label: this.sharedSvc.translate(label),\r\n            mandatory_for_planners: mandatory,\r\n        };\r\n        switch (type) {\r\n            case 'select': {\r\n                const attributeTranslations =\r\n                    await this.getFieldDataSourceTranslations(\r\n                        datasource,\r\n                        provider,\r\n                        options,\r\n                    );\r\n                return {\r\n                    ...baseField,\r\n                    type: 'select',\r\n                    schema: mergeDeep(schema ?? {}, {\r\n                        type: 'string',\r\n                        enum: attributeTranslations.map(({ value }) => value),\r\n                    }) as any,\r\n                    attributeTranslations,\r\n                };\r\n            }\r\n            case 'multiselect': {\r\n                const attributeTranslations =\r\n                    await this.getFieldDataSourceTranslations(\r\n                        property.datasource,\r\n                        provider,\r\n                        options,\r\n                    );\r\n                return {\r\n                    ...baseField,\r\n                    type: 'multi-select',\r\n                    schema: mergeDeep(schema ?? {}, {\r\n                        type: 'array',\r\n                        items: {\r\n                            type: 'string',\r\n                            enum: attributeTranslations.map(\r\n                                ({ value }) => value,\r\n                            ),\r\n                        },\r\n                    }) as any,\r\n                    attributeTranslations,\r\n                };\r\n            }\r\n            case 'boolean':\r\n            case 'number':\r\n            case 'text': {\r\n                return {\r\n                    ...baseField,\r\n                    type: type,\r\n                    schema: mergeDeep(schema ?? {}, {\r\n                        type: type === 'text' ? 'string' : type,\r\n                    }) as any,\r\n                };\r\n            }\r\n            case 'process': {\r\n                return {\r\n                    ...baseField,\r\n                    type: 'boolean',\r\n                    schema: {\r\n                        type: 'boolean',\r\n                    },\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    async getFieldDataSourceTranslations<\r\n        D extends WorkflowPropertyDataSourceType,\r\n    >(\r\n        dataSource: D,\r\n        provider: WorkflowBuilderProviderAbstract,\r\n        options: DataSourceOptions,\r\n    ) {\r\n        const dataSourceCallback = provider.dataSourceCallbacks[dataSource];\r\n        const dataSourceRows = await dataSourceCallback(options.eventId, {\r\n            skippedWorkflowIds: [options.workflowId],\r\n        });\r\n        const translationsCallback = this.translationsMapCallback[dataSource];\r\n        return translationsCallback(dataSourceRows);\r\n    }\r\n\r\n    getCanvasDataFields = <T extends WorkflowType>(\r\n        workflowType: T,\r\n    ): IField[] => {\r\n        const baseField: Pick<\r\n            IField,\r\n            | 'category'\r\n            | 'builtin'\r\n            | 'editable'\r\n            | 'mandatory_for_planners'\r\n            | 'schema'\r\n        > = {\r\n            category: '',\r\n            builtin: true,\r\n            editable: true,\r\n            mandatory_for_planners: true,\r\n            schema: {\r\n                type: 'string',\r\n            },\r\n        };\r\n        return [\r\n            {\r\n                ...baseField,\r\n                id: 'name',\r\n                name: 'name',\r\n                label: this.sharedSvc.translate('NAME'),\r\n                placeholder: this.sharedSvc.translate(\r\n                    WORKFLOW_NAME_TRANSLATIONS[workflowType],\r\n                ),\r\n            },\r\n            {\r\n                ...baseField,\r\n                id: 'description',\r\n                name: 'description',\r\n                label: this.sharedSvc.translate('DESCRIPTION'),\r\n                placeholder: this.sharedSvc.translate(\r\n                    WORKFLOW_EXPLANATION_TRANSLATIONS[workflowType],\r\n                ),\r\n                component: FieldComponentType.textarea,\r\n            },\r\n        ];\r\n    };\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/** Obtain the arguments' types of a function except the first argument */\r\ntype RestArgument<T> = T extends (first: any, ...args: infer Rest) => any\r\n    ? Rest\r\n    : [];\r\n\r\n@Pipe({ name: 'apply' })\r\nexport class ApplyFunctionPipe implements PipeTransform {\r\n    /**\r\n     * @param callbackMethod method that is to be run using `ApplyFunctionPipe`.\r\n     ** please pass an arrow function instead of class method\r\n     */\r\n    transform<Callback extends (value: any, ...extra: any[]) => any>(\r\n        value: Parameters<Callback>[0],\r\n        callbackMethod: Callback,\r\n        ...extra: RestArgument<Callback>\r\n    ): ReturnType<Callback> {\r\n        return callbackMethod(value, ...extra);\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Canvas, WorkflowType } from '@azavista/workflow-builder-shared';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { debounceTime } from 'rxjs';\nimport { AzavistaSharedService } from '@azavista/components/shared';\nimport {\n    CanvasControllerData,\n    FormGroupType,\n    WORKFLOW_EXPLANATION_TRANSLATIONS,\n    WORKFLOW_NAME_TRANSLATIONS,\n} from '../../types';\n\ntype HeaderFormGroupData = Pick<Canvas, 'name' | 'description'>;\n\ntype HeaderFormGroup = FormGroup<FormGroupType<HeaderFormGroupData>>;\n\n@Component({\n    selector: 'azavista-workflow-builder-node-form-header',\n    templateUrl: `./workflow-builder-node-form-header.component.html`,\n    styleUrls: ['./workflow-builder-node-form-header.component.scss'],\n})\nexport class WorkflowBuilderNodeFormHeaderComponent<\n    T extends WorkflowType = WorkflowType,\n> implements OnInit\n{\n    @Input() editMode = false;\n\n    @Input() controllerData?: CanvasControllerData<T>;\n\n    @Output() canvasChanges = new EventEmitter<Partial<HeaderFormGroupData>>();\n\n    formGroup?: HeaderFormGroup;\n\n    constructor(private sharedSvc: AzavistaSharedService) {}\n\n    ngOnInit(): void {\n        if (this.controllerData) {\n            this.formGroup = this.createFormGroup(this.controllerData);\n            this.formGroup.valueChanges\n                .pipe(debounceTime(200))\n                .subscribe((changes) =>\n                    this.canvasChanges.emit(changes as any),\n                );\n        }\n    }\n\n    createFormGroup(controllerData: CanvasControllerData<T>): HeaderFormGroup {\n        return new FormGroup({\n            description: new FormControl<string>(controllerData.description),\n            name: new FormControl<string>(controllerData.name),\n        });\n    }\n\n    toggleEditMode(forceValue?: boolean) {\n        this.editMode = forceValue ?? !this.editMode;\n    }\n\n    getWorkflowName = (formValueName: string | null | undefined) => {\n        return (\n            formValueName ||\n            (this.controllerData?.factory.type\n                ? this.sharedSvc.translate(\n                      WORKFLOW_NAME_TRANSLATIONS[\n                          this.controllerData?.factory.type\n                      ],\n                  )\n                : '')\n        );\n    };\n\n    getWorkflowDescription = (\n        formValueDescription: string | null | undefined,\n    ) => {\n        return (\n            formValueDescription ||\n            (this.controllerData?.factory.type\n                ? this.sharedSvc.translate(\n                      WORKFLOW_EXPLANATION_TRANSLATIONS[\n                          this.controllerData?.factory.type\n                      ],\n                  )\n                : '')\n        );\n    };\n}\n","<div class=\"workflow-builder-node-item__header\" [class.edit-mode]=\"editMode\">\r\n  <ng-container *ngIf=\"!editMode\">\r\n    <a\r\n      class=\"workflow-builder-node-item__header__name\"\r\n    >\r\n      {{ formGroup?.value?.name | apply : getWorkflowName}}\r\n      <button (click)=\"toggleEditMode(true)\" mat-icon-button>\r\n        <mat-icon>create</mat-icon>\r\n      </button>\r\n    </a>\r\n    <div class=\"workflow-builder-node-item__header__description\">\r\n      {{ formGroup?.value?.description | apply: getWorkflowDescription }}\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"editMode && formGroup\">\r\n    <div class=\"workflow-builder-node-item__header__name\">\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          [formControl]=\"formGroup.controls.name\"\r\n          [placeholder]=\"'NAME' | translate\"\r\n        />\r\n        <mat-icon (click)=\"toggleEditMode(false)\" matSuffix>create</mat-icon>\r\n      </mat-form-field>\r\n\r\n    </div>\r\n    <div class=\"workflow-builder-node-item__header__description\">\r\n      <mat-form-field>\r\n        <textarea\r\n          matInput\r\n          cdkTextareaAutosize\r\n          [formControl]=\"formGroup.controls.description\"\r\n          [placeholder]=\"'DESCRIPTION' | translate\"\r\n        ></textarea>\r\n      </mat-form-field>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { WorkflowProperty } from '@azavista/workflow-builder-shared';\n\n@Component({ template: '' })\nexport class WorkflowBuilderNodeFormFieldBaseComponent<T> {\n    @Input() property?: WorkflowProperty;\n\n    @Input() control?: FormControl<T>;\n\n    @Input() workflowId?: string;\n\n    @Input() eventId?: string;\n}\n\n@Component({\n    selector: 'azavista-workflow-builder-node-form-field-text',\n    templateUrl: `./workflow-builder-node-form-field-text.component.html`,\n    styleUrls: ['./workflow-builder-node-form-field-text.component.css'],\n})\nexport class WorkflowBuilderNodeFormFieldTextComponent<\n    T,\n> extends WorkflowBuilderNodeFormFieldBaseComponent<T> {\n    @Input() override property?: WorkflowProperty & { type: 'text' | 'number' };\n}\n","<mat-form-field\r\n  *ngIf=\"property && control\"\r\n  [hideRequiredMarker]=\"false\"\r\n  [class.mat-form-field-mandatory]=\"property.mandatory\"\r\n  [class.mat-form-field-not-empty]=\"control.value\"\r\n>\r\n  <mat-label>{{ property.label | translate }}</mat-label>\r\n  <input\r\n    [type]=\"property.type\"\r\n    [formControl]=\"control\"\r\n    [required]=\"property.mandatory\"\r\n    placeholder=\"{{ property.label | translate }}\"\r\n    matInput\r\n  />\r\n  <!-- <mat-error *ngIf=\"!control.valid\"></mat-error> -->\r\n</mat-form-field>\r\n","import { Component, Input, NgZone, OnInit, ViewChild } from '@angular/core';\nimport { MatSelect } from '@angular/material/select';\nimport { WorkflowPropertySelect } from '@azavista/workflow-builder-shared';\nimport { IAttributeTranslation } from '@azavista/components/shared';\nimport { TranslateService } from '@ngx-translate/core';\nimport { FormArray, FormControl } from '@angular/forms';\nimport { WorkflowBuilderNodeFormFieldBaseComponent } from '../workflow-builder-node-form-field-text/workflow-builder-node-form-field-text.component';\nimport { AzavistaWorkflowBuilderFormFieldService } from '../../services/workflow-builder.form-field.service';\nimport { AzavistaWorkflowBuilderController } from '../../workflow-builder.controller';\nimport { trackByAttributeTranslations } from '../../utils';\n\n@Component({\n    selector: 'azavista-workflow-builder-node-form-field-select',\n    templateUrl: `./workflow-builder-node-form-field-select.component.html`,\n    styleUrls: ['./workflow-builder-node-form-field-select.component.scss'],\n})\nexport class WorkflowBuilderNodeFormFieldSelectComponent<T>\n    extends WorkflowBuilderNodeFormFieldBaseComponent<T>\n    implements OnInit\n{\n    @Input() override property?: WorkflowPropertySelect;\n\n    attributeTranslations?: IAttributeTranslation[];\n\n    currentLang = this.translateSvc.currentLang;\n\n    trackByAttributeTranslations = trackByAttributeTranslations;\n\n    isExpanded = false;\n\n    @ViewChild('selectElement')\n    selectElement?: MatSelect;\n\n    dataSourceIcon: Record<WorkflowPropertySelect['datasource'], string> = {\n        Page: 'language',\n        Email: 'email',\n        Form: 'web',\n        CrmStatus: 'event_available',\n        ProfilePage: 'account_circle',\n        Workflow: 'dataset_outline',\n    };\n\n    dataSourceColor: Record<WorkflowPropertySelect['datasource'], string> = {\n        Page: '#4C83FF',\n        Email: '#FF786A',\n        Form: '#FEB002',\n        CrmStatus: '#98CA71',\n        ProfilePage: '#0F1A43',\n        Workflow: '#5D5FEF',\n    };\n\n    constructor(\n        private fieldSvc: AzavistaWorkflowBuilderFormFieldService,\n        private controller: AzavistaWorkflowBuilderController,\n        private translateSvc: TranslateService,\n        private ngZone: NgZone,\n    ) {\n        super();\n    }\n\n    async ngOnInit() {\n        if (\n            this.property &&\n            this.controller.dataProvider &&\n            this.eventId &&\n            this.workflowId\n        ) {\n            this.attributeTranslations =\n                await this.fieldSvc.getFieldDataSourceTranslations(\n                    this.property.datasource,\n                    this.controller.dataProvider,\n                    {\n                        eventId: this.eventId,\n                        workflowId: this.workflowId,\n                    },\n                );\n        }\n    }\n\n    async onSelectOpen() {\n        this.isExpanded = !this.isExpanded;\n        this.selectElement?.close();\n    }\n\n    onItemSelected(itemTranslation: IAttributeTranslation) {\n        if (this.control) {\n            this.control.markAsDirty();\n            if (this.control instanceof FormArray) {\n                const arrayValues = this.control.value as any[];\n                const shouldAdd = !arrayValues.includes(itemTranslation.value);\n                if (shouldAdd) {\n                    this.control.push(new FormControl(itemTranslation.value));\n                } else {\n                    const index = arrayValues.findIndex(\n                        (value) => value === itemTranslation.value,\n                    );\n                    this.control.removeAt(index);\n                }\n            } else {\n                // single select\n                this.control.setValue(itemTranslation.value as any);\n                this.isExpanded = false;\n            }\n        }\n    }\n\n    isValueEmpty(controlValue: any | any[]) {\n        return !(this.property?.type === 'multiselect' &&\n        controlValue instanceof Array\n            ? controlValue.length > 0\n            : controlValue);\n    }\n}\n","<mat-expansion-panel\r\n  *ngIf=\"control && property\"\r\n  [(expanded)]=\"isExpanded\"\r\n  [class.mat-expansion-panel-field-not-empty]=\"\r\n    property.type === 'multiselect'\r\n      ? $any(control.value).length > 0\r\n      : control.value\r\n  \"\r\n  [class.mat-expansion-panel-field-valid]=\"control.valid\"\r\n>\r\n  <mat-expansion-panel-header>\r\n    <mat-panel-title>\r\n      <mat-form-field *ngIf=\"attributeTranslations\"\r\n        appearance=\"outline\"\r\n        [hideRequiredMarker]=\"false\"\r\n        [class.mat-form-field-mandatory]=\"property.mandatory\"\r\n        [class.mat-form-field-not-empty]=\"\r\n          property.type === 'multiselect'\r\n            ? $any(control.value).length > 0\r\n            : control.value\r\n        \"\r\n      >\r\n        <mat-label>{{ property.label | translate }}</mat-label>\r\n        <mat-icon\r\n          *ngIf=\"\r\n            property.type === 'multiselect'\r\n              ? $any(control.value).length > 0\r\n              : control.value\r\n          \"\r\n          matPrefix\r\n          [style.color]=\"dataSourceColor[property.datasource] + ' !important'\"\r\n          >{{ dataSourceIcon[property.datasource] }}</mat-icon\r\n        >\r\n\r\n        <mat-select\r\n          [required]=\"property.mandatory\"\r\n          #selectElement\r\n          (opened)=\"onSelectOpen()\"\r\n          [value]=\"control.value\"\r\n          [multiple]=\"property.type === 'multiselect'\"\r\n          [panelClass]=\"'panel-select-' + property.attribute\"\r\n          placeholder=\"{{ property.label | translate }}\"\r\n        >\r\n          <mat-option\r\n            *ngFor=\"\r\n              let item of attributeTranslations;\r\n              trackBy: trackByAttributeTranslations\r\n            \"\r\n            [value]=\"item.value\"\r\n            >{{ item.trans[currentLang] }}</mat-option\r\n          >\r\n        </mat-select>\r\n        <mat-error *ngIf=\"!control.valid\"></mat-error>\r\n      </mat-form-field>\r\n    </mat-panel-title>\r\n  </mat-expansion-panel-header>\r\n\r\n  <mat-selection-list\r\n    [multiple]=\"property.type === 'multiselect'\"\r\n    color=\"primary\"\r\n  >\r\n    <mat-list-option\r\n      *ngFor=\"\r\n        let item of attributeTranslations;\r\n        trackBy: trackByAttributeTranslations\r\n      \"\r\n      (click)=\"onItemSelected(item)\"\r\n      [value]=\"item.value\"\r\n      [selected]=\"$any(control.value)?.includes?.(item.value)\"\r\n    >\r\n      {{ item.trans[currentLang] }}\r\n    </mat-list-option>\r\n  </mat-selection-list>\r\n</mat-expansion-panel>\r\n","import { Component } from '@angular/core';\nimport { WorkflowBuilderNodeFormFieldBaseComponent } from '../workflow-builder-node-form-field-text/workflow-builder-node-form-field-text.component';\n\n@Component({\n    selector: 'azavista-workflow-builder-node-form-field-toggle',\n    templateUrl: `./workflow-builder-node-form-field-toggle.component.html`,\n    styleUrls: ['./workflow-builder-node-form-field-toggle.component.scss'],\n})\n// eslint-disable-next-line max-len\nexport class WorkflowBuilderNodeFormFieldToggleComponent extends WorkflowBuilderNodeFormFieldBaseComponent<boolean> {}\n","<mat-slide-toggle\r\n  *ngIf=\"control && property\"\r\n  class=\"example-margin\"\r\n  color=\"primary\"\r\n  labelPosition=\"before\"\r\n  [checked]=\"control.value\"\r\n  (change)=\"control.setValue($event.checked)\"\r\n>\r\n  {{property.label | translate}}\r\n</mat-slide-toggle>\r\n","import {\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    ViewChild,\n} from '@angular/core';\nimport {\n    EventType,\n    IEvent,\n    ILanguageItem,\n    IProcessFull,\n    IStage,\n    Step,\n} from '@azavista/servicelib';\nimport {\n    AzavistaSharedService,\n    IAclObject,\n    IFieldIdWithOptions,\n    IIdWithLabel,\n    INumericIdWithLabel,\n    NotificationMessageType,\n    NotificationsService,\n} from '@azavista/components/shared';\nimport {\n    AzavistaFlowBuilderComponent,\n    FlowBuilderAddNewConfig,\n    FlowBuilderEmailTemplate,\n    FlowBuilderEntityTypeFields,\n    FlowBuilderStepActionType,\n    FlowBuilderStepEntityType,\n    FlowBuilderStepType,\n    IIntegrationPartial,\n    ITemplateEventFieldsSubjectFieldsAvailableMessageBody,\n    ITemplateEventFieldsSubjectFieldsRequiredMessageBody,\n    ITemplateEventFieldsSubjectMessage,\n    TemplateEventFieldsSubjectMessageType,\n} from '@azavista/components/flow-builder';\nimport { Subject, takeUntil } from 'rxjs';\nimport { ISO_LANGUAGES, ProcessType } from '../../types';\nimport {\n    AzavistaWorkflowBuilderController,\n    WorkflowBuilderDataSourceCallbacksOptions,\n} from '../../workflow-builder.controller';\n\n@Component({\n    selector: 'azavista-workflow-builder-process-builder',\n    templateUrl: `./workflow-builder-process-builder.component.html`,\n    styleUrls: ['./workflow-builder-process-builder.component.scss'],\n})\nexport class WorkflowBuilderProcessBuilderComponent implements OnInit {\n    @Input() eventId?: string;\n\n    @Input() getAclObjectForCurrentUser?: () => IAclObject;\n\n    event?: IEvent;\n\n    @Input() fullProcess?: IProcessFull;\n\n    @Input() showOnlyFlowBuilder = false;\n\n    @Input() processType: ProcessType = ProcessType.participant;\n\n    // canEditStepsAcl?: IAclObject;\n\n    // canEditPausedAcl?: IAclObject;\n\n    // canInterruptAcl?: IAclObject;\n\n    addNewConfig?: FlowBuilderAddNewConfig;\n\n    stages: IStage[] = [];\n\n    /** Field stage options */\n    fieldsOptions: IFieldIdWithOptions[] = [];\n\n    fields?: FlowBuilderEntityTypeFields[];\n\n    loaded = false;\n\n    emailTemplates?: FlowBuilderEmailTemplate[];\n\n    workflowTeams?: INumericIdWithLabel[] | undefined;\n\n    emailCampaigns?: IIdWithLabel[];\n\n    languages?: IIdWithLabel[];\n\n    templateEvents: IIdWithLabel[] | undefined;\n\n    integrations?: IIntegrationPartial[];\n\n    users?: INumericIdWithLabel[];\n\n    templateEventFieldsSubject =\n        new Subject<ITemplateEventFieldsSubjectMessage>();\n\n    docxDocuments?: IIdWithLabel[];\n\n    documentFields?: IIdWithLabel[];\n\n    @ViewChild(AzavistaFlowBuilderComponent)\n    azFlowBuilder?: AzavistaFlowBuilderComponent;\n\n    @Output() stepsSaved = new EventEmitter<Step[]>();\n\n    private destroyed$ = new Subject<void>();\n\n    constructor(\n        private controller: AzavistaWorkflowBuilderController,\n        private cmpSharedSvc: AzavistaSharedService,\n        private notificationsSvc: NotificationsService,\n    ) {}\n\n    async ngOnInit() {\n        if (this.eventId) {\n            await this.initData(this.eventId);\n        }\n    }\n\n    private async initData(eventId: string) {\n        if (this.controller.dataProvider) {\n            this.loaded = false;\n            const getWorkflowData =\n                this.controller.dataProvider.dataSourceCallbacks;\n            const getProcessData =\n                this.controller.dataProvider.processDataSourceCallback;\n            const [integrations, users, eventData] = await Promise.all([\n                getProcessData.integrations(),\n                getProcessData.users(),\n                getProcessData.event(eventId),\n            ]);\n            this.integrations = integrations as IIntegrationPartial[];\n            this.users = users.map(({ id, first_name, last_name }) => ({\n                id: id!,\n                label: `${first_name} ${last_name}`.trim(),\n            }));\n            this.event = eventData.detail;\n            this.languages = this.getSelectedLanguageItems(\n                eventData.settings.languages,\n                ISO_LANGUAGES,\n            );\n            this.templateEvents = eventData.templateEvents?.map(\n                ({ id, name }) => ({\n                    id: id!,\n                    label: name,\n                }),\n            );\n            // eslint-disable-next-line max-len\n            const getWorkflowDataOptions: WorkflowBuilderDataSourceCallbacksOptions =\n                { skippedWorkflowIds: [] };\n\n            this.emailTemplates = (\n                await getWorkflowData.Email(eventId, getWorkflowDataOptions)\n            ).map((email) => ({ ...email, id: email.id! }));\n            this.workflowTeams = eventData.teams?.map(({ id, name }) => ({\n                id: id!,\n                label: name,\n            }));\n            this.docxDocuments = eventData.assets\n                .filter((x) => x.filename.toLowerCase().endsWith('.docx'))\n                .map((x) => ({ id: x.id!, label: x.name }));\n            this.documentFields = eventData.participantFields\n                .filter(\n                    (x) =>\n                        this.cmpSharedSvc.getFieldTypeFromField(x) ===\n                        'document',\n                )\n                .map((x) => x as IIdWithLabel);\n            const eventFields = (\n                await getProcessData.getEventFields(eventId)\n            ).map((field) => ({\n                ...field,\n                editable: true,\n            }));\n            this.addNewConfig = this.getAddNewConfig();\n            const participantFields = eventData.participantFields\n                .filter((x) => (x.type as any) !== 'relation')\n                .map((field) => ({\n                    ...field,\n                    editable: true,\n                }));\n            this.fields = [\n                {\n                    entityTypeName: FlowBuilderStepEntityType.event,\n                    fields: eventFields,\n                    eventFields,\n                },\n                {\n                    entityTypeName: FlowBuilderStepEntityType.participant,\n                    fields: participantFields,\n                    eventFields,\n                },\n            ];\n            this.emailCampaigns = (\n                await getWorkflowData.Email(eventId, getWorkflowDataOptions)\n            ).map((x) => ({ id: x.id, label: x.name }) as IIdWithLabel);\n\n            this.templateEventFieldsSubject\n                .pipe(takeUntil(this.destroyed$))\n                .subscribe({\n                    next: (data) => this.processEventFieldsSubject(data),\n                });\n            this.loaded = true;\n        }\n    }\n    // constructor(\n    //     private eventSvc: EventService,\n    //     private activatedRoute: ActivatedRoute,\n    //     private apiSvc: AzavistaApiService,\n    //     private aclSvc: AclService,\n    //     private rsSvc: RequiredScopesService,\n    //     private sharedSvc: SharedService,\n    //     private notificationsSvc: NotificationsService,\n    //     private cmpSharedSvc: AzavistaSharedService,\n    //     private readonly processesSharedSvc: ProcessesSharedService,\n    // ) {}\n\n    // async ngOnInit(): Promise<void> {\n    //     this.processType =\n    //         this.processType ||\n    //         (this.activatedRoute.snapshot.queryParamMap.get(\n    //             'type',\n    //         ) as ProcessType) ||\n    //         ProcessType.event;\n    //     if (!this.event) {\n    //         this.eventSvc.setEventIdQueryParam(this.activatedRoute);\n    //         this.event = this.eventSvc.getEvent();\n    //         if (!this.event) {\n    //             const eventId =\n    //                 this.activatedRoute.snapshot.queryParamMap.get('eventId');\n    //             this.event = await this.eventSvc.loadEvent(eventId);\n    //         }\n    //     }\n    //     if (!this.fullProcess) {\n    //         const processId =\n    //             this.activatedRoute.snapshot.queryParamMap.get('processId');\n    //         if (processId) {\n    //             await this.loadProcess(processId);\n    //         }\n    //     } else {\n    //         this.changeEmailFromFieldToEmailFromEventField(\n    //             this.fullProcess.steps,\n    //         );\n    //     }\n    //     const campaigns = await this.getPublishedEmailCampaigns();\n    //     this.emailTemplates = campaigns.map(\n    //         (x) => ({ id: x.id, name: x.name }) as FlowBuilderEmailTemplate,\n    //     );\n\n    //     this.languages = await this.getLanguages();\n    //     this.emailCampaigns = this.getEmailCampaignsAsIdWithLabel(campaigns);\n\n    //     this.integrations = await this.sharedSvc.getPartialIntegrations();\n    //     const allUsers = await this.apiSvc.getAllUsers();\n    //     this.sharedSvc.sortAlphabetically(allUsers, (x) => x.email);\n    //     this.users = allUsers.map(\n    //         (x) => ({ id: x.id, label: x.email }) as INumericIdWithLabel,\n    //     );\n\n    //     if (this.event.type === EventType.workflow) {\n    //         const searchTeamsRequest: ISearchTeamsRequest = {\n    //             limit: 50,\n    //             offset: 0,\n    //         };\n    //         searchTeamsRequest.advancedQuery =\n    //             this.sharedSvc.createIdInSearchParams(this.event.team_ids);\n    //         const searchTeamsResponse =\n    //             await this.apiSvc.searchTeams(searchTeamsRequest);\n    //         this.workflowTeams = searchTeamsResponse.teams.map(\n    //             (x) => ({ id: x.id, label: x.name }) as INumericIdWithLabel,\n    //         );\n    //         const allTemplateEvents = await this.apiSvc.getAllEvents(\n    //             EventType.template,\n    //         );\n    //         this.templateEvents = allTemplateEvents.map(\n    //             (x) => ({ id: x.id, label: x.name }) as IIdWithLabel,\n    //         );\n    //     }\n    //     this.stages = await this.apiSvc.getAllStages('event', this.event.id);\n\n    //     this.createAclObjects();\n    //     const allEventFields = await this.apiSvc.getAllEventFields(\n    //         this.event.id,\n    //     );\n    //     const allEventParticipantFields =\n    //         await this.apiSvc.getAllEventParticipantFields(this.event.id);\n    //     const allProfilePages = await this.sharedSvc.getAllProfilePages();\n    //     await this.sharedSvc.addProfilePageIdField(\n    //         allEventParticipantFields,\n    //         true,\n    //         allProfilePages,\n    //     );\n    //     this.sharedSvc.addParticipantStageIdField(\n    //         allEventParticipantFields,\n    //         this.stages,\n    //     );\n    //     this.fieldsOptions = [];\n    //     await this.sharedSvc.addFieldOptionsForProfilePageField(\n    //         this.fieldsOptions,\n    //         allEventParticipantFields,\n    //         allProfilePages,\n    //     );\n    //     this.sharedSvc.addFieldOptionsForStageField(\n    //         this.stages,\n    //         this.fieldsOptions,\n    //     );\n    //     const eventFields = this.prepareFields(allEventFields);\n    //     this.sharedSvc.sortAlphabetically(eventFields, (item) => item.label);\n    //     const eventParticipantFields = this.prepareFields(\n    //         allEventParticipantFields,\n    //     );\n    //     this.sharedSvc.sortAlphabetically(\n    //         eventParticipantFields,\n    //         (item) => item.label,\n    //     );\n    //     const allEventAssets = await this.apiSvc.getAllEventAssets(\n    //         this.event.id,\n    //     );\n    //     this.docxDocuments = allEventAssets\n    //         .filter((x) => x.filename.toLowerCase().endsWith('.docx'))\n    //         .map((x) => ({ id: x.id, label: x.name }) as IIdWithLabel);\n    //     this.documentFields = eventParticipantFields\n    //         .filter(\n    //             (x) =>\n    //                 this.cmpSharedSvc.getFieldTypeFromField(x) === 'document',\n    //         )\n    //         .map((x) => x as IIdWithLabel);\n\n    //     this.addNewConfig = this.getAddNewConfig();\n\n    //     this.fields = [\n    //         {\n    //             entityTypeName: FlowBuilderStepEntityType.event,\n    //             fields: eventFields,\n    //             eventFields: eventFields,\n    //         },\n    //         {\n    //             entityTypeName: FlowBuilderStepEntityType.participant,\n    //             fields: this.sharedSvc.filterOutRelationFields(\n    //                 eventParticipantFields,\n    //             ),\n    //             eventFields: eventFields,\n    //         },\n    //     ];\n    //     this.templateEventFieldsSubject\n    //         .pipe(takeUntil(this.destroyed$))\n    //         .subscribe({\n    //             next: (data) => this.processEventFieldsSubject(data),\n    //         });\n    //     this.loaded = true;\n    // }\n\n    async processEventFieldsSubject(\n        data: ITemplateEventFieldsSubjectMessage,\n    ): Promise<void> {\n        if (\n            data.type === TemplateEventFieldsSubjectMessageType.fieldsRequired\n        ) {\n            const body =\n                // eslint-disable-next-line max-len\n                data.body as ITemplateEventFieldsSubjectFieldsRequiredMessageBody;\n            const requesterFields = this.fields?.find(\n                (x) =>\n                    x.entityTypeName === FlowBuilderStepEntityType.participant,\n            )?.fields;\n            const templateEventFields =\n                // eslint-disable-next-line max-len\n                await this.controller.dataProvider?.processDataSourceCallback.getEventFields(\n                    body.eventTemplateId,\n                );\n            // eslint-disable-next-line max-len\n            const msgBody: ITemplateEventFieldsSubjectFieldsAvailableMessageBody =\n                {\n                    eventFields: templateEventFields ?? [],\n                    requesterFields: requesterFields ?? [],\n                    eventTemplateId: body.eventTemplateId,\n                    step: body.step,\n                };\n            this.templateEventFieldsSubject.next({\n                type: TemplateEventFieldsSubjectMessageType.fieldsAvailable,\n                body: msgBody,\n            });\n        }\n    }\n\n    // getEmailCampaignsAsIdWithLabel(\n    //     campaigns: IEmailCampaign[],\n    // ): IIdWithLabel[] {\n    //     return campaigns.map(\n    //         (x) => ({ id: x.id, label: x.name }) as IIdWithLabel,\n    //     );\n    // }\n\n    // async getPublishedEmailCampaigns(): Promise<IEmailCampaign[]> {\n    //     const req = {\n    //         eventId: this.event.id,\n    //         limit: 50,\n    //         offset: 0,\n    //         sortFieldName: 'name',\n    //         sortDirection: 'asc',\n    //     } as ISearchEventEmailCampaignsRequest;\n    //     const { campaigns } = await this.apiSvc.searchEventEmailCampaigns(req);\n    //     const publishedCampaigns: IEmailCampaign[] = [];\n    //     const allEmailTemplates = await this.apiSvc.getAllPages(\n    //         PageType.emailTemplate,\n    //         this.event.id,\n    //     );\n    //     let emailTemplate: IPage;\n    //     for (const campaign of campaigns) {\n    //         emailTemplate = allEmailTemplates.find(\n    //             (template) => template.id === campaign.emailtemplate_id,\n    //         );\n    //         emailTemplate && emailTemplate.is_published\n    //             ? publishedCampaigns.push(campaign)\n    //             : null;\n    //     }\n    //     return publishedCampaigns;\n    // }\n\n    // async getLanguages(): Promise<IIdWithLabel[]> {\n    //     const eventSettings = await this.apiSvc.getEventSettings(this.event.id);\n    //     const allSupportedLanguages =\n    //         await this.sharedSvc.getAllSupportedIsoLanguages();\n    //     const languages = this.sharedSvc.getSelectedLanguageItems(\n    //         eventSettings.settings.languages,\n    //         allSupportedLanguages,\n    //     );\n    //     return languages;\n    // }\n\n    async onChangesSaved(steps: Step[]) {\n        try {\n            // Some of the participant entity types and specific actions should be sent differently to the server\n            // For example if action type is FlowBuilderStepActionType.emailFromEventField it must be changed to\n            // FlowBuilderStepActionType.emailFromField and the field.type to FlowBuilderStepEntityType.event\n            this.changeEmailFromEventFieldToEmailFromField(steps);\n            this.changeDecisionConfigs(steps);\n\n            this.stepsSaved.emit(steps);\n\n            // TODO: handle on reload process\n            // await this.apiSvc.setProcessSteps(this.fullProcess.id, steps);\n            // await this.loadProcess(this.fullProcess.id);\n        } catch (e) {\n            if (this.azFlowBuilder) {\n                this.azFlowBuilder.editMode = true;\n            }\n        }\n    }\n\n    changeDecisionConfigs(steps: Step[]) {\n        // Decisions for participants can have two types if the user selects one and the other\n        // TODO: Should we move this logic to the components library ?\n        for (const step of steps) {\n            // const stepAny = step as any;\n            if (step.type === FlowBuilderStepType.decision) {\n                // The 'decision' type should not have 'config' attribute\n                delete (step as any).config;\n            } else if (step.type === FlowBuilderStepType.decisionExternalCRM) {\n                // The 'decision_externalcrm' type should not have 'condition' attribute\n                delete (step as any).condition;\n            }\n        }\n    }\n\n    changeEmailFromEventFieldToEmailFromField(steps: Step[]): void {\n        for (const step of steps) {\n            const stepAny = step as any;\n            if (\n                stepAny.config?.action ===\n                FlowBuilderStepActionType.emailFromEventField\n            ) {\n                stepAny.config.action =\n                    FlowBuilderStepActionType.emailFromField;\n                stepAny.config.field.type = FlowBuilderStepEntityType.event;\n            }\n        }\n    }\n\n    changeEmailFromFieldToEmailFromEventField(steps: Step[]): void {\n        for (const step of steps) {\n            const stepAny = step as any;\n            if (\n                stepAny.config?.action ===\n                    FlowBuilderStepActionType.emailFromField &&\n                stepAny.config.field?.type === FlowBuilderStepEntityType.event\n            ) {\n                stepAny.config.action =\n                    FlowBuilderStepActionType.emailFromEventField;\n                stepAny.config.field.type =\n                    FlowBuilderStepEntityType.participant;\n            }\n        }\n    }\n\n    // createAclObjects(): void {\n    //     const eventTeamIds = this.event.team_ids;\n    //     if (this.processType === ProcessType.event) {\n    //         this.canEditStepsAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanUpdateEvent(),\n    //         );\n    //         this.canEditPausedAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanPauseEvent(),\n    //         );\n    //         this.canInterruptAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanInterruptEvent(),\n    //         );\n    //     } else if (this.processType === ProcessType.participant) {\n    //         this.canEditStepsAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanUpdateParticipant(),\n    //         );\n    //         this.canEditPausedAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanPauseParticipant(),\n    //         );\n    //         this.canInterruptAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanInterruptParticipant(),\n    //         );\n    //     } else if (this.processType === ProcessType.booking) {\n    //         // TODO: Scopes\n    //         this.canEditStepsAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanUpdateParticipant(),\n    //         );\n    //         this.canEditPausedAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanPauseParticipant(),\n    //         );\n    //         this.canInterruptAcl = this.aclSvc.getAclObject(\n    //             eventTeamIds,\n    //             this.rsSvc.getProcessScopesCanInterruptParticipant(),\n    //         );\n    //     }\n    // }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async loadProcess(processId: string): Promise<void> {\n        // TODO: handle reload process\n        // this.fullProcess = await this.apiSvc.getProcess(processId);\n        // this.changeEmailFromFieldToEmailFromEventField(this.fullProcess.steps);\n    }\n\n    // prepareFields(fields: IField[]): IField[] {\n    //     if (!fields) {\n    //         return [];\n    //     }\n    //     return fields\n    //         .filter((x) => {\n    //             const fieldType = this.cmpSharedSvc.getFieldTypeFromField(x);\n    //             return fieldType !== 'virtual-relation';\n    //         })\n    //         .map((x) => {\n    //             x.editable = true;\n    //             return x;\n    //         });\n    // }\n\n    getAvailableStepTypes(): FlowBuilderStepType[] {\n        const availableStepTypes: FlowBuilderStepType[] = [\n            FlowBuilderStepType.wait,\n            FlowBuilderStepType.waitUntilField,\n            FlowBuilderStepType.action,\n        ];\n        const updateLightAcl = this.getAclObjectForCurrentUser?.();\n        if (updateLightAcl?.allowed) {\n            availableStepTypes.push(\n                ...[\n                    FlowBuilderStepType.decision,\n                    FlowBuilderStepType.decisionExternalCRM,\n                    FlowBuilderStepType.decisionNow,\n                    // FlowBuilderStepType.stageChange, // TODO: should be enabled when the stage/workflow(s) are provided\n                ],\n            );\n        }\n        return availableStepTypes;\n    }\n\n    getAddNewConfig(): FlowBuilderAddNewConfig {\n        // const eventActions: FlowBuilderStepActionType[] = [\n        //     FlowBuilderStepActionType.emailFromField,\n        //     FlowBuilderStepActionType.sendWebhook\n        // ];\n        const eventActions: FlowBuilderStepActionType[] = [\n            FlowBuilderStepActionType.setField,\n            FlowBuilderStepActionType.addTeam,\n            FlowBuilderStepActionType.removeTeam,\n            FlowBuilderStepActionType.setDateTimeFieldToCurrent,\n            FlowBuilderStepActionType.sendWebhook,\n            FlowBuilderStepActionType.sendGenericEmail,\n            FlowBuilderStepActionType.setReferenceNumber,\n            FlowBuilderStepActionType.sendObject,\n            FlowBuilderStepActionType.copyEventDates,\n        ];\n        const participantActions: FlowBuilderStepActionType[] = [\n            FlowBuilderStepActionType.setField,\n            FlowBuilderStepActionType.email,\n            FlowBuilderStepActionType.setDateTimeFieldToCurrent,\n            FlowBuilderStepActionType.generateCertificate,\n        ];\n\n        const bookingActions: FlowBuilderStepActionType[] = [\n            FlowBuilderStepActionType.sendWebhook,\n        ];\n\n        if (this.event?.type === EventType.workflow) {\n            // Add two more participant action types\n            participantActions.push(FlowBuilderStepActionType.addTeam);\n            participantActions.push(FlowBuilderStepActionType.removeTeam);\n            participantActions.push(FlowBuilderStepActionType.createEvent);\n        }\n        participantActions.push(FlowBuilderStepActionType.generalEmail);\n        participantActions.push(FlowBuilderStepActionType.emailFromField);\n        participantActions.push(FlowBuilderStepActionType.emailFromEventField);\n        participantActions.push(FlowBuilderStepActionType.sendWebhook);\n        participantActions.push(FlowBuilderStepActionType.setReferenceNumber);\n        participantActions.push(FlowBuilderStepActionType.sendObject);\n        participantActions.push(FlowBuilderStepActionType.countSelectField);\n        participantActions.push(FlowBuilderStepActionType.copyEventTextField);\n        participantActions.push(FlowBuilderStepActionType.messageToParticipant);\n        participantActions.push(FlowBuilderStepActionType.sendMessageToUser);\n\n        let availableEntityTypeNames: FlowBuilderStepEntityType[];\n        if (this.processType === ProcessType.event) {\n            availableEntityTypeNames = [FlowBuilderStepEntityType.event];\n        } else {\n            availableEntityTypeNames = [\n                FlowBuilderStepEntityType.participant,\n                FlowBuilderStepEntityType.event,\n            ];\n        }\n        const addNewConfig = {\n            availableStepTypes: this.getAvailableStepTypes(),\n            decisionStepConfig: {\n                entityTypeNames: availableEntityTypeNames,\n            },\n            actionStepConfig: {\n                entityTypes: [\n                    // {\n                    //     entityTypeName: FlowBuilderStepEntityType.participant,\n                    //     actions: participantActions\n                    // },\n                    // {\n                    //     entityTypeName: FlowBuilderStepEntityType.event,\n                    //     actions: eventActions\n                    // }\n                ],\n            },\n        } as FlowBuilderAddNewConfig;\n        if (this.processType === ProcessType.participant) {\n            addNewConfig.actionStepConfig?.entityTypes.push({\n                entityTypeName: FlowBuilderStepEntityType.participant,\n                actions: participantActions,\n            });\n        } else if (this.processType === ProcessType.event) {\n            addNewConfig.actionStepConfig?.entityTypes.push({\n                entityTypeName: FlowBuilderStepEntityType.event,\n                actions: eventActions,\n            });\n        } else if (this.processType === ProcessType.booking) {\n            addNewConfig.actionStepConfig?.entityTypes.push({\n                entityTypeName: FlowBuilderStepEntityType.booking,\n                actions: bookingActions,\n            });\n        }\n        return addNewConfig;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async onFlowPausedChanged(paused: boolean): Promise<void> {\n        // TODO: on flow pause\n        // await this.processesSharedSvc.onFlowPausedChanged(\n        //     paused,\n        //     this.fullProcess,\n        // );\n    }\n\n    async onFlowInterrupted(): Promise<void> {\n        const confirmResult = await this.showProcessInterruptionConfirmation();\n        if (!confirmResult) {\n            return;\n        }\n        try {\n            // TODO: onFlowInterrupted\n            // await this.apiSvc.interruptProcess(this.fullProcess.id);\n            // await this.loadProcess(this.fullProcess.id);\n        } catch (e) {\n            /* empty */\n        }\n    }\n\n    // eslint-disable-next-line max-len\n    async showProcessInterruptionConfirmation(): Promise<boolean> {\n        return true;\n        // TODO: create confirmation\n        // return this.cmpSharedSvc.showConfirmationDialog(\n        //     this.cmpSharedSvc.translate(TranslationKey.interruptWorkflow),\n        //     [\n        //         this.cmpSharedSvc.translate(\n        //             TranslationKey.interruptWorkflowDialogAreYouSure,\n        //         ),\n        //     ],\n        // );\n    }\n\n    onNotConfigured() {\n        const msg = this.cmpSharedSvc.translate('PROCESS_STEPS_NOT_CONFIGURED');\n        this.notificationsSvc.showMessage(NotificationMessageType.warning, msg);\n    }\n\n    // ngOnDestroy(): void {\n    //     this.destroyed$.next();\n    //     this.destroyed$.complete();\n    // }\n\n    getSelectedLanguageItems(\n        selectedIds: string[],\n        languageItems: ILanguageItem[],\n    ): ILanguageItem[] {\n        const selectedItems: ILanguageItem[] = [];\n        for (const eventLang of selectedIds) {\n            const isoLang = languageItems.find((x) => x.id === eventLang);\n            if (isoLang) {\n                selectedItems.push(isoLang);\n            }\n        }\n        return selectedItems;\n    }\n}\n","<azavista-flow-builder\r\n    *ngIf=\"loaded\"\r\n    [steps]=\"fullProcess?.steps ?? []\"\r\n    [title]=\"fullProcess?.name ?? ''\"\r\n    [canEditSteps]=\"true\"\r\n    [canEditStatus]=\"false\"\r\n    [flowPaused]=\"!!fullProcess?.paused\"\r\n    [addNewConfig]=\"$any(addNewConfig)\"\r\n    [emailTemplates]=\"emailTemplates ?? []\"\r\n    [teams]=\"workflowTeams ?? []\"\r\n    [emailCampaigns]=\"emailCampaigns ?? []\"\r\n    [integrations]=\"$any(integrations) ?? []\"\r\n    [users]=\"users ?? []\"\r\n    [languages]=\"languages ?? []\"\r\n    [templateEvents]=\"templateEvents ?? []\"\r\n    [templateEventFieldsSubject]=\"templateEventFieldsSubject\"\r\n    [stages]=\"stages \"\r\n    [fields]=\"fields ?? []\"\r\n    [fieldsOptions]=\"fieldsOptions\"\r\n    [docxDocuments]=\"docxDocuments ?? []\"\r\n    [documentFields]=\"documentFields ?? []\"\r\n    (changesSaved)=\"onChangesSaved($event)\"\r\n    (notConfigured)=\"onNotConfigured()\"\r\n    (flowPausedChanged)=\"onFlowPausedChanged($event)\"\r\n    (flowInterrupted)=\"onFlowInterrupted()\"\r\n></azavista-flow-builder>\r\n\r\n\r\n<!-- <azavista-flow-builder\r\n    *ngIf=\"loaded\"\r\n    [canEditStepsAcl]=\"canEditStepsAcl\"\r\n    [canEditPausedAcl]=\"canEditPausedAcl\"\r\n    [canInterruptAcl]=\"canInterruptAcl\"\r\n    [steps]=\"fullProcess?.steps\"\r\n    [title]=\"fullProcess?.name\"\r\n    [canEditSteps]=\"true\"\r\n    [canEditStatus]=\"true\"\r\n    [flowPaused]=\"fullProcess?.paused\"\r\n    [addNewConfig]=\"addNewConfig\"\r\n    [emailTemplates]=\"emailTemplates\"\r\n    [teams]=\"workflowTeams\"\r\n    [emailCampaigns]=\"emailCampaigns\"\r\n    [integrations]=\"integrations\"\r\n    [users]=\"users\"\r\n    [languages]=\"languages\"\r\n    [templateEvents]=\"templateEvents\"\r\n    [templateEventFieldsSubject]=\"templateEventFieldsSubject\"\r\n    [stages]=\"stages\"\r\n    [fields]=\"fields\"\r\n    [fieldsOptions]=\"fieldsOptions\"\r\n    [docxDocuments]=\"docxDocuments\"\r\n    [documentFields]=\"documentFields\"\r\n    (changesSaved)=\"onChangesSaved($event)\"\r\n    (notConfigured)=\"onNotConfigured()\"\r\n    (flowPausedChanged)=\"onFlowPausedChanged($event)\"\r\n    (flowInterrupted)=\"onFlowInterrupted()\"\r\n></azavista-flow-builder> -->\r\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Step } from '@azavista/servicelib';\nimport { WorkflowBuilderProcessBuilderComponent } from '../workflow-builder-process-builder/workflow-builder-process-builder.component';\n\nexport type WorkflowBuilderProcessBuilderDialogData = Pick<\n    WorkflowBuilderProcessBuilderComponent,\n    | 'eventId'\n    | 'getAclObjectForCurrentUser'\n    | 'fullProcess'\n    | 'showOnlyFlowBuilder'\n    | 'processType'\n>;\n\n@Component({\n    selector: 'azavista-workflow-builder-process-builder-dialog',\n    templateUrl: `./workflow-builder-process-builder-dialog.component.html`,\n    styleUrls: ['./workflow-builder-process-builder-dialog.component.css'],\n})\nexport class WorkflowBuilderProcessBuilderDialogComponent {\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        public data: WorkflowBuilderProcessBuilderDialogData,\n        private dialogRef: MatDialogRef<\n            WorkflowBuilderProcessBuilderDialogData,\n            Step[]\n        >,\n    ) {}\n\n    onStepsSaved(steps: Step[]) {\n        this.dialogRef.close(steps);\n    }\n}\n","<div mat-dialog-content>\r\n  <azavista-workflow-builder-process-builder\r\n    [eventId]=\"data.eventId\"\r\n    [fullProcess]=\"data.fullProcess\"\r\n    [getAclObjectForCurrentUser]=\"data.getAclObjectForCurrentUser\"\r\n    [processType]=\"data.processType\"\r\n    [showOnlyFlowBuilder]=\"data.showOnlyFlowBuilder\"\r\n    (stepsSaved)=\"onStepsSaved($event)\"\r\n  ></azavista-workflow-builder-process-builder>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { IProcessFull, Step } from '@azavista/servicelib';\nimport { WorkflowProperty } from '@azavista/workflow-builder-shared';\nimport { firstValueFrom } from 'rxjs';\nimport { FormArray } from '@angular/forms';\nimport { WorkflowBuilderNodeFormFieldBaseComponent } from '../workflow-builder-node-form-field-text/workflow-builder-node-form-field-text.component';\nimport {\n    WorkflowBuilderProcessBuilderDialogComponent,\n    WorkflowBuilderProcessBuilderDialogData,\n} from '../workflow-builder-process-builder-dialog/workflow-builder-process-builder-dialog.component';\nimport { ProcessType } from '../../types';\nimport { createFormGroupFromData } from '../../utils';\nimport { AzavistaWorkflowBuilderController } from '../../workflow-builder.controller';\n\n@Component({\n    selector: 'azavista-workflow-builder-node-form-field-process',\n    templateUrl: `./workflow-builder-node-form-field-process.component.html`,\n    styleUrls: ['./workflow-builder-node-form-field-process.component.scss'],\n})\n// eslint-disable-next-line max-len\nexport class WorkflowBuilderNodeFormFieldProcessComponent extends WorkflowBuilderNodeFormFieldBaseComponent<\n    Step[]\n> {\n    @Input() override property?: WorkflowProperty & { type: 'process' };\n\n    constructor(\n        private dialog: MatDialog,\n        private controller: AzavistaWorkflowBuilderController,\n    ) {\n        super();\n    }\n\n    async openSteps() {\n        const fullProcess: IProcessFull = {\n            name: '',\n            steps:\n                this.control && Array.isArray(this.control?.value)\n                    ? this.control.value\n                    : [],\n            // TODO: define trigger\n            trigger: undefined as any,\n            stage_submit: '',\n            paused: false,\n        };\n\n        const dialogData: WorkflowBuilderProcessBuilderDialogData = {\n            eventId: this.eventId,\n            processType: ProcessType.participant,\n            showOnlyFlowBuilder: true,\n            fullProcess,\n            getAclObjectForCurrentUser: () => ({\n                allowed: true,\n                availableScopes: [],\n                requiredScopes: [],\n            }),\n        };\n        const results: Step[] | undefined = await firstValueFrom(\n            this.dialog\n                .open(WorkflowBuilderProcessBuilderDialogComponent, {\n                    data: dialogData,\n                    width: `800px`,\n                })\n                .afterClosed(),\n        );\n\n        if (results && this.control && this.control instanceof FormArray) {\n            const controlArray = this.control as FormArray;\n            controlArray.controls.forEach(() => {\n                controlArray.removeAt(-1);\n            });\n\n            results.forEach((step) =>\n                controlArray.push(createFormGroupFromData(step)),\n            );\n\n            // controlArray.insert(new FormGroup<FormGroupType<Step>({\n\n            // }))\n            if (this.workflowId && this.property) {\n                this.controller.updateWorkflowProcess(\n                    this.workflowId,\n                    this.property?.attribute,\n                    results,\n                );\n            }\n        }\n    }\n}\n","<ng-container *ngIf=\"property\">\r\n  <button\r\n    mat-flat-button\r\n    (click)=\"openSteps()\"\r\n    [class.has-steps]=\"control?.value?.length\"\r\n  >\r\n    <mat-icon *ngIf=\"!control?.value?.length\">add</mat-icon>\r\n    <mat-icon *ngIf=\"control?.value?.length\">settings</mat-icon>\r\n    {{ property.label | translate }}\r\n  </button>\r\n</ng-container>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostBinding,\r\n    HostListener,\r\n    Input,\r\n    NgZone,\r\n    OnInit,\r\n    Output,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n    AzavistaSharedService,\r\n    IAzavistaGroupedFieldsComponentData,\r\n    IField,\r\n    IValueChangesWithObject,\r\n    omit,\r\n} from '@azavista/components/shared';\r\nimport {\r\n    Canvas,\r\n    CanvasWorkflowItem,\r\n    WorkflowProperty,\r\n    WorkflowType,\r\n} from '@azavista/workflow-builder-shared';\r\nimport {\r\n    NgResizeObserver,\r\n    ngResizeObserverProviders,\r\n} from 'ng-resize-observer';\r\nimport { AzavistaGroupedFieldsComponent } from '@azavista/components/grouped-fields';\r\nimport { debounceTime, firstValueFrom } from 'rxjs';\r\nimport { FormGroup } from '@angular/forms';\r\nimport {\r\n    getFormDirtyValues,\r\n    getWorkflowIdFromNodeId,\r\n    objectKeys,\r\n    trackByWorkflowProperty,\r\n} from '../../utils';\r\nimport { AzavistaWorkflowBuilderController } from '../../workflow-builder.controller';\r\nimport {\r\n    CanvasControllerData,\r\n    CanvasWorkflowFactory,\r\n    WORKFLOW_EXPLANATION_TRANSLATIONS,\r\n    WORKFLOW_NAME_TRANSLATIONS,\r\n} from '../../types';\r\nimport { AzavistaWorkflowBuilderFormFieldService } from '../../services/workflow-builder.form-field.service';\r\nimport { WorkflowBuilderNodeFormHeaderComponent } from '../workflow-builder-node-form-header/workflow-builder-node-form-header.component';\r\n\r\n@Component({\r\n    selector: 'azavista-workflow-builder-node-form',\r\n    templateUrl: './workflow-builder-node-form.component.html',\r\n    styleUrls: ['./workflow-builder-node-form.component.scss'],\r\n    providers: [...ngResizeObserverProviders],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\nexport class WorkflowBuilderNodeFormComponent implements OnInit {\r\n    @Input() node!: NodeModel<string>;\r\n\r\n    @Input() eventId!: string;\r\n\r\n    @Input() diagramEl!: Diagram;\r\n\r\n    @HostBinding('attr.nodeId') attrNodeId = '';\r\n\r\n    @Output() workflowSettingsChanges =\r\n        new EventEmitter<IValueChangesWithObject>();\r\n\r\n    @Output() canvasChanges = new EventEmitter<Partial<Canvas>>();\r\n\r\n    @Output() removeNode = new EventEmitter<void>();\r\n\r\n    @ViewChild('workflowSettingsGroupedField', {\r\n        read: AzavistaGroupedFieldsComponent,\r\n    })\r\n    workflowSettingsGroupedFieldEl!: AzavistaGroupedFieldsComponent;\r\n\r\n    @ViewChild('formHeader')\r\n    formHeader?: WorkflowBuilderNodeFormHeaderComponent;\r\n\r\n    workflowSettingsGroupedFieldData?:\r\n        | IAzavistaGroupedFieldsComponentData\r\n        | undefined;\r\n\r\n    canvasGroupFieldData?: IAzavistaGroupedFieldsComponentData | undefined;\r\n\r\n    workflowItem?: CanvasWorkflowItem;\r\n\r\n    properties: WorkflowProperty[] = [];\r\n\r\n    fields: IField[] = [];\r\n\r\n    trackByWorkflowProperty = trackByWorkflowProperty;\r\n\r\n    formGroup?: FormGroup;\r\n\r\n    get workflowId() {\r\n        return getWorkflowIdFromNodeId(this.node.id);\r\n    }\r\n\r\n    get controllerData(): CanvasControllerData<WorkflowType> | undefined {\r\n        return this.controller.dataMap[this.workflowId];\r\n    }\r\n\r\n    get isWorkflowValid() {\r\n        return this.controller.validityMap[this.workflowId];\r\n    }\r\n\r\n    constructor(\r\n        private sharedSvc: AzavistaSharedService,\r\n        private host: ElementRef<HTMLElement>,\r\n        public controller: AzavistaWorkflowBuilderController,\r\n        private resize$: NgResizeObserver,\r\n        private ngZone: NgZone,\r\n        private formFieldService: AzavistaWorkflowBuilderFormFieldService,\r\n    ) {}\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.attrNodeId = this.node.id;\r\n        const { controllerData } = this;\r\n        if (!controllerData) {\r\n            return;\r\n        }\r\n        this.workflowSettingsGroupedFieldData =\r\n            await this.createWorkflowSettingsGroupFieldData(controllerData);\r\n\r\n        this.initFormGroup(controllerData);\r\n        this.canvasGroupFieldData =\r\n            this.createCanvasGroupedFieldsData(controllerData);\r\n\r\n        await firstValueFrom(this.ngZone.onStable);\r\n        this.loadFieldsCssClass();\r\n\r\n        this.resize$.pipe(debounceTime(50)).subscribe(async () => {\r\n            const rect = this.host.nativeElement.getBoundingClientRect();\r\n            const nodeInstance = this.getNodeInstance();\r\n            if (nodeInstance) {\r\n                nodeInstance.height = rect?.height;\r\n            }\r\n        });\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        // prevent when typing on form get treated as moving or deleting workflow item\r\n        event.stopPropagation();\r\n    }\r\n\r\n    private initFormGroup(controllerData: CanvasControllerData<WorkflowType>) {\r\n        const { factory } = controllerData;\r\n        this.properties = factory.getProperties();\r\n        this.formGroup = this.formFieldService.getFormGroupFromWorkflowFactory(\r\n            this.properties,\r\n            factory,\r\n        );\r\n        this.formGroup.valueChanges.pipe(debounceTime(200)).subscribe(() => {\r\n            this.controller.updateWorkflowSettings(\r\n                this.workflowId,\r\n                getFormDirtyValues(this.formGroup!) as any,\r\n            );\r\n        });\r\n    }\r\n\r\n    async createWorkflowSettingsGroupedFieldFields(\r\n        factory: CanvasWorkflowFactory<WorkflowType>,\r\n    ): Promise<IField[]> {\r\n        const { dataProvider } = this.controller;\r\n        if (!dataProvider) {\r\n            return [];\r\n        }\r\n        return Promise.all(\r\n            factory.getPropertiesWithSchema().map((property) => {\r\n                return this.formFieldService.getFieldFromWorkflowProperty(\r\n                    property,\r\n                    dataProvider,\r\n                    {\r\n                        eventId: this.eventId,\r\n                        workflowId: this.workflowId,\r\n                    },\r\n                );\r\n            }),\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    async createWorkflowSettingsGroupFieldData<T extends WorkflowType>(\r\n        controllerData: CanvasControllerData<T>,\r\n    ): Promise<IAzavistaGroupedFieldsComponentData> {\r\n        const { factory } = controllerData;\r\n        this.properties = factory.getProperties();\r\n        const fields =\r\n            await this.createWorkflowSettingsGroupedFieldFields(factory);\r\n        this.fields = fields;\r\n        this.workflowItem = factory.getWorkflow();\r\n        return {\r\n            singleColumn: true,\r\n            editModeForAllFields: true,\r\n            disableAutoOrdering: true,\r\n            fieldsOptions: [\r\n                {\r\n                    fieldId: 'sad',\r\n                    options: {},\r\n                },\r\n            ],\r\n            fieldsWithEntity: {\r\n                entity: factory.getWorkflow().settings,\r\n                fields,\r\n            },\r\n            expandPanels: false,\r\n        };\r\n    }\r\n\r\n    async toggleExpandPanels() {\r\n        if (this.workflowSettingsGroupedFieldData) {\r\n            this.workflowSettingsGroupedFieldData.expandPanels =\r\n                !this.workflowSettingsGroupedFieldData.expandPanels;\r\n        }\r\n    }\r\n\r\n    createCanvasGroupedFieldsData<T extends WorkflowType>(\r\n        controllerData: CanvasControllerData<T>,\r\n    ): IAzavistaGroupedFieldsComponentData {\r\n        const {\r\n            name,\r\n            description,\r\n            factory: { type },\r\n        } = controllerData;\r\n        return {\r\n            expandPanels: true,\r\n            editModeForAllFields: true,\r\n            singleColumn: true,\r\n            disableAutoOrdering: true,\r\n            fieldsWithEntity: {\r\n                fields: this.formFieldService.getCanvasDataFields(type),\r\n                entity: {\r\n                    name:\r\n                        name ??\r\n                        this.sharedSvc.translate(\r\n                            WORKFLOW_NAME_TRANSLATIONS[type],\r\n                        ),\r\n                    description:\r\n                        description ??\r\n                        this.sharedSvc.translate(\r\n                            WORKFLOW_EXPLANATION_TRANSLATIONS[type],\r\n                        ),\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    onUpdateCanvasFields(data: Partial<Canvas>) {\r\n        this.canvasChanges.emit(data);\r\n        if (this.canvasGroupFieldData?.fieldsWithEntity.entity) {\r\n            this.canvasGroupFieldData.fieldsWithEntity.entity = {\r\n                ...this.canvasGroupFieldData?.fieldsWithEntity.entity,\r\n                ...data,\r\n            };\r\n        }\r\n    }\r\n\r\n    onUpdateWorkflowSettingsFields(data: IValueChangesWithObject) {\r\n        if (\r\n            this.workflowSettingsGroupedFieldEl?.invalidFieldsWithValues\r\n                ?.length > 0 ||\r\n            data.obj == null ||\r\n            objectKeys(data.obj).length === 0\r\n        ) {\r\n            return;\r\n        }\r\n        /**\r\n         * We hack the way to display the process button by creating a checkbox as a button.\r\n         * Therefore, we intercept the changes from the process-field and use the checkbox to open a popup\r\n         */\r\n        const workflowProcessProperties =\r\n            this.controllerData?.factory\r\n                .getProperties()\r\n                .filter(({ type }) => type === 'process') ?? [];\r\n        const isProcessField = workflowProcessProperties.some(\r\n            ({ attribute }) =>\r\n                attribute === data.changedFieldWithValue?.field.id,\r\n        );\r\n        if (isProcessField) {\r\n            this.openProcessPopup();\r\n            return;\r\n        }\r\n        this.workflowSettingsChanges.emit({\r\n            ...data,\r\n            obj: data.obj\r\n                ? omit(\r\n                      data.obj,\r\n                      workflowProcessProperties.map(\r\n                          ({ attribute }) => attribute,\r\n                      ),\r\n                  )\r\n                : data.obj,\r\n        });\r\n    }\r\n\r\n    loadFieldsCssClass() {\r\n        this.controllerData?.factory.getProperties().forEach((properties) => {\r\n            const { attribute, datasource } = properties;\r\n            if (datasource) {\r\n                this.host.nativeElement\r\n                    .querySelector(\r\n                        `azavista-input-field[field-id=${attribute}]`,\r\n                    )\r\n                    ?.classList.add(`datasource-${datasource}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    openProcessPopup() {\r\n        alert('Opening Process Popup');\r\n    }\r\n\r\n    private getNodeInstance() {\r\n        return this.diagramEl.nodes.find(({ id }) => id === this.node.id);\r\n    }\r\n}\r\n","<div\r\n  class=\"workflow-builder-node-item\"\r\n  *ngIf=\"workflowSettingsGroupedFieldData && canvasGroupFieldData\"\r\n>\r\n  <azavista-workflow-builder-node-form-header\r\n    #formHeader\r\n    [controllerData]=\"controllerData\"\r\n    (canvasChanges)=\"onUpdateCanvasFields($event)\"\r\n  ></azavista-workflow-builder-node-form-header>\r\n\r\n  <div class=\"workflow-builder-node-item__fields\">\r\n    <ng-container *ngIf=\"workflowSettingsGroupedFieldData.expandPanels\">\r\n      <ng-container\r\n        *ngFor=\"let property of properties; trackBy: trackByWorkflowProperty\"\r\n      >\r\n        <ng-container\r\n          *ngIf=\"formGroup?.controls?.[property.attribute] as formControl\"\r\n        >\r\n          <azavista-workflow-builder-node-form-field-select\r\n            *ngIf=\"\r\n              property.type === 'select' || property.type === 'multiselect'\r\n            \"\r\n            [eventId]=\"eventId\"\r\n            [workflowId]=\"workflowId\"\r\n            [property]=\"property\"\r\n            [control]=\"$any(formControl)\"\r\n          >\r\n          </azavista-workflow-builder-node-form-field-select>\r\n          <azavista-workflow-builder-node-form-field-text\r\n            *ngIf=\"property.type === 'text' || property.type === 'number'\"\r\n            [eventId]=\"eventId\"\r\n            [workflowId]=\"workflowId\"\r\n            [property]=\"$any(property)\"\r\n            [control]=\"$any(formControl)\"\r\n          >\r\n          </azavista-workflow-builder-node-form-field-text>\r\n          <azavista-workflow-builder-node-form-field-toggle\r\n            *ngIf=\"property.type === 'boolean'\"\r\n            [eventId]=\"eventId\"\r\n            [workflowId]=\"workflowId\"\r\n            [property]=\"$any(property)\"\r\n            [control]=\"$any(formControl)\"\r\n          >\r\n          </azavista-workflow-builder-node-form-field-toggle>\r\n          <azavista-workflow-builder-node-form-field-process\r\n            *ngIf=\"property.type === 'process'\"\r\n            [eventId]=\"eventId\"\r\n            [workflowId]=\"workflowId\"\r\n            [property]=\"$any(property)\"\r\n            [control]=\"$any(formControl)\"\r\n          >\r\n          </azavista-workflow-builder-node-form-field-process>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n  </div>\r\n  <div\r\n    class=\"workflow-builder-node-item__footer\"\r\n    *ngIf=\"workflowSettingsGroupedFieldData.fieldsWithEntity.fields.length > 0\"\r\n  >\r\n    <azavista-button (click)=\"toggleExpandPanels()\" color=\"primary\">{{\r\n      (workflowSettingsGroupedFieldData.expandPanels\r\n        ? \"CLOSE\"\r\n        : isWorkflowValid\r\n          ? \"OPEN\"\r\n          : \"SETUP\"\r\n      ) | translate\r\n    }}</azavista-button>\r\n  </div>\r\n  <div\r\n    class=\"workflow-builder-node-item__absolute-elements\">\r\n    <button *ngIf=\"!formHeader.editMode\" class=\"workflow-builder-node-item__absolute-elements__button-delete\" mat-icon-button (click)=\"removeNode.emit()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n","import { Component, HostListener, NgZone } from '@angular/core';\nimport { PaletteModel, SymbolInfo } from '@syncfusion/ej2-angular-diagrams';\nimport { AzavistaSharedService } from '@azavista/components/shared';\nimport { ExpandMode } from '@syncfusion/ej2-navigations';\nimport { firstValueFrom } from 'rxjs';\nimport {\n    PALETTE_CATEGORIES_MAP,\n    PALETTE_CATEGORIES_ORDER,\n    PaletteCategory,\n    PaletteSymbol,\n    WORKFLOW_NAME_TRANSLATIONS,\n} from '../../types';\nimport { WorkflowBuilderService } from '../../services/workflow-builder.service';\nimport { getNodeModelForPalette } from '../../utils';\n\n@Component({\n    selector: 'azavista-workflow-builder-workflow-builder-palette',\n    templateUrl: `./workflow-builder-palette.component.html`,\n    styleUrls: ['./workflow-builder-palette.component.scss'],\n})\nexport class WorkflowBuilderPaletteComponent {\n    palettes: PaletteModel[] = [];\n\n    paletteCategories = PALETTE_CATEGORIES_ORDER;\n\n    expandMode: ExpandMode = 'Multiple';\n\n    paletteCategoryMap = PALETTE_CATEGORIES_MAP;\n\n    trackByString = (index: number, data: string) => data;\n\n    constructor(\n        public sharedSvc: AzavistaSharedService,\n        private ngZone: NgZone,\n        private builderService: WorkflowBuilderService,\n    ) {\n        this.getPalettesFromPaletteCategories('').then((palettes) => {\n            this.palettes = palettes;\n        });\n    }\n\n    @HostListener('click', ['$event'])\n    onHostClick(event: PointerEvent) {\n        const srcElement = event.srcElement as HTMLElement;\n        const paletteCategoryHeaderEl =\n            this.getPaletteCategoryHeaderElementFromParent(srcElement);\n\n        if (paletteCategoryHeaderEl) {\n            const paletteCategoryContainerEl =\n                this.getPaletteCategoryContainerElementFromParent(\n                    paletteCategoryHeaderEl,\n                );\n            paletteCategoryContainerEl?.classList.toggle(\n                'e-acrdn-item--hide-content',\n            );\n        }\n    }\n\n    getPalettesFromPaletteCategories = async (\n        searchText: string,\n    ): Promise<PaletteModel[]> => {\n        await firstValueFrom(this.builderService.translationsLoaded());\n\n        return PALETTE_CATEGORIES_ORDER.map((category) =>\n            this.getPaletteModelFromPaletteCategory(searchText, category),\n        );\n    };\n\n    /** `getSymbolInfo` should use arrow-function instead of method, because the method later is bind with syncfusion instead of current component  */\n    getSymbolInfo = (\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        symbol: NodeModelForPalette<PaletteSymbol>,\n    ): SymbolInfo => {\n        return {\n            fit: true,\n            width: 100,\n            height: 80,\n            tooltip: ' ',\n            description: {\n                text: '',\n                wrap: 'Wrap',\n                overflow: 'Wrap',\n                margin: {\n                    left: 0,\n                    right: 0,\n                    top: 0,\n                    bottom: 0,\n                },\n            },\n        };\n    };\n\n    getPaletteModelFromPaletteCategory = (\n        searchText: string,\n        category: PaletteCategory,\n    ): PaletteModel => {\n        const symbols =\n            this.paletteCategoryMap[category]\n                ?.filter((paletteSymbol) =>\n                    this.isWorkflowNameContainsSearchText(\n                        searchText,\n                        paletteSymbol,\n                    ),\n                )\n                ?.map((paletteSymbol) =>\n                    getNodeModelForPalette(paletteSymbol, this.sharedSvc),\n                ) ?? [];\n        const paletteModel = {\n            id: category,\n            title: `${this.sharedSvc.translate(category)} ${\n                searchText ? `(${symbols?.length ?? 0})` : ''\n            }`,\n            expanded: true,\n            symbols,\n        };\n        return paletteModel;\n    };\n\n    isWorkflowNameContainsSearchText = (\n        searchText: string,\n        paletteSymbol: PaletteSymbol,\n    ): boolean => {\n        return this.sharedSvc\n            .translate(WORKFLOW_NAME_TRANSLATIONS[paletteSymbol])\n            .toLowerCase()\n            ?.includes(searchText.toLowerCase());\n    };\n\n    getPaletteCategoryHeaderElementFromParent(\n        element: HTMLElement,\n    ): HTMLElement | null {\n        if (element.classList.contains('e-acrdn-header')) {\n            return element;\n        }\n        if (\n            this.isElementPaletteCategoryContainer(element) ||\n            this.isElementHostContainer(element)\n        ) {\n            return null;\n        }\n        return element.parentElement\n            ? this.getPaletteCategoryHeaderElementFromParent(\n                  element.parentElement,\n              )\n            : null;\n    }\n\n    getPaletteCategoryContainerElementFromParent(\n        element: HTMLElement,\n    ): HTMLElement | null {\n        if (this.isElementPaletteCategoryContainer(element)) {\n            return element;\n        }\n        if (this.isElementHostContainer(element)) {\n            return null;\n        }\n        return element.parentElement\n            ? this.getPaletteCategoryContainerElementFromParent(\n                  element.parentElement,\n              )\n            : null;\n    }\n\n    private isElementHostContainer(element: HTMLElement): boolean {\n        return (\n            element.tagName ===\n            'azavista-workflow-builder-workflow-builder-palette'\n        );\n    }\n\n    private isElementPaletteCategoryContainer(element: HTMLElement) {\n        return element.classList.contains('e-acrdn-item');\n    }\n}\n","<mat-form-field>\n  <input #searchText matInput [placeholder]=\"'TYPE_TO_FILTER_BLOCKS' | translate\" />\n</mat-form-field>\n\n<ejs-symbolpalette\n  #symbolpalette\n  id=\"symbolpalette\"\n  [enableAnimation]=\"true\"\n  [expandMode]=\"expandMode\"\n  [palettes]=\"searchText.value| apply : getPalettesFromPaletteCategories | async\"\n  [getSymbolInfo]=\"getSymbolInfo\"\n>\n</ejs-symbolpalette>\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\r\nimport {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnInit,\r\n    QueryList,\r\n    ViewChild,\r\n    ViewChildren,\r\n} from '@angular/core';\r\nimport {\r\n    Connector,\r\n    ConnectorConstraints,\r\n    DiagramConstraints,\r\n    DiagramTools,\r\n    ICollectionChangeEventArgs,\r\n    IConnectionChangeEventArgs,\r\n    IDraggingEventArgs,\r\n    IElementDrawEventArgs,\r\n    IScrollChangeEventArgs,\r\n    ISelectionChangeEventArgs,\r\n    Node,\r\n    NodeConstraints,\r\n    SnapConstraints,\r\n    SymbolPaletteComponent,\r\n    NodeModel as NodeModelSyncfusion,\r\n} from '@syncfusion/ej2-angular-diagrams';\r\nimport {\r\n    NgResizeObserver,\r\n    ngResizeObserverProviders,\r\n} from 'ng-resize-observer';\r\nimport { debounceTime, startWith } from 'rxjs';\r\nimport {\r\n    AzavistaSharedService,\r\n    IValueChangesWithObject,\r\n} from '@azavista/components/shared';\r\n\r\nimport { Canvas, OutputPin } from '@azavista/workflow-builder-shared';\r\nimport {\r\n    ConnectionPointChangeEvent,\r\n    DEFAULT_CONNECTOR,\r\n    DEFAULT_ERROR_STROKE_COLOR,\r\n    DEFAULT_STROKE_COLOR,\r\n    DEFAULT_STROKE_WIDTH,\r\n    ElementDrawConnectorEvent,\r\n    OUTPUT_PIN_PAIR,\r\n    PREFIX_NODE,\r\n    PREFIX_PORT,\r\n    WORKFLOW_EXPLANATION_TRANSLATIONS,\r\n    WORKFLOW_NAME_TRANSLATIONS,\r\n} from './types';\r\nimport {\r\n    delay,\r\n    getConnectorAnnotation,\r\n    getMapByValue,\r\n    getNodeAndConnectorsFromCanvasControllerData,\r\n    getNodeFromCanvasControllerData,\r\n    getOutputPinFromConnector,\r\n    getWorkflowIdFromNodeId,\r\n    workflowTypeArray,\r\n} from './utils';\r\nimport { WorkflowBuilderService } from './services/workflow-builder.service';\r\nimport {\r\n    AzavistaWorkflowBuilderController,\r\n    WorkflowBuilderProviderAbstract,\r\n} from './workflow-builder.controller';\r\nimport { WorkflowBuilderNodeFormComponent } from './components/workflow-builder-node-form/workflow-builder-node-form.component';\r\n\r\nexport const ZOOM_FACTOR_OPTIONS: number[] = [\r\n    0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1,\r\n];\r\n\r\n@Component({\r\n    selector: 'azavista-workflow-builder',\r\n    templateUrl: './workflow-builder.component.html',\r\n    styleUrls: ['./workflow-builder.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    providers: [...ngResizeObserverProviders],\r\n})\r\nexport class WorkflowBuilderComponent implements OnInit, AfterViewInit {\r\n    /** Fill this to use custom dataProvider */\r\n    @Input() dataProvider: WorkflowBuilderProviderAbstract =\r\n        this.builderSvc.dataProvider;\r\n\r\n    @Input() eventId!: string;\r\n\r\n    @Input() debugMode = false;\r\n\r\n    diagramConfig: Partial<\r\n        Pick<\r\n            Diagram,\r\n            | 'constraints'\r\n            | 'snapSettings'\r\n            | 'getConnectorDefaults'\r\n            | 'height'\r\n            | 'width'\r\n            | 'drawingObject'\r\n            | 'tooltip'\r\n        >\r\n    > = {\r\n        constraints: DiagramConstraints.Default,\r\n        snapSettings: {\r\n            constraints: SnapConstraints.SnapToObject,\r\n        },\r\n        getConnectorDefaults: () => DEFAULT_CONNECTOR,\r\n        drawingObject: { ...DEFAULT_CONNECTOR },\r\n    };\r\n\r\n    tool: DiagramTools = DiagramTools.SingleSelect | DiagramTools.ZoomPan;\r\n\r\n    paletteConfig: Pick<SymbolPaletteComponent, 'palettes' | 'getSymbolInfo'> =\r\n        {\r\n            palettes: [],\r\n            getSymbolInfo: () => {},\r\n        };\r\n\r\n    isInitialized = false;\r\n\r\n    zoomOptions = ZOOM_FACTOR_OPTIONS;\r\n\r\n    currentZoomFactor = 1;\r\n\r\n    @ViewChild('diagram') diagramEl!: Diagram;\r\n\r\n    @ViewChildren(WorkflowBuilderNodeFormComponent)\r\n    nodeForms?: QueryList<WorkflowBuilderNodeFormComponent>;\r\n\r\n    constructor(\r\n        private builderSvc: WorkflowBuilderService,\r\n        public controller: AzavistaWorkflowBuilderController,\r\n        private host: ElementRef<HTMLElement>,\r\n        private resize$: NgResizeObserver,\r\n        private sharedSvc: AzavistaSharedService,\r\n    ) {}\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.controller.isDebugCallback = () => this.debugMode;\r\n        if (this.dataProvider) {\r\n            this.builderSvc.dataProvider = this.dataProvider;\r\n        }\r\n        if (!this.eventId) {\r\n            throw new Error(\r\n                'Please assign eventId to WorkflowBuilderComponent',\r\n            );\r\n        }\r\n    }\r\n\r\n    async ngAfterViewInit() {\r\n        await delay(0); // delay to wait until html is fully rendered\r\n        this.resize$.pipe(startWith(), debounceTime(100)).subscribe(() => {\r\n            this.updateDiagramSize();\r\n        });\r\n    }\r\n\r\n    async onDiagramLoad() {\r\n        await this.controller.initFromProvider(this.dataProvider, this.eventId);\r\n        const { connectors, nodes } =\r\n            getNodeAndConnectorsFromCanvasControllerData(\r\n                Object.values(this.controller.dataMap),\r\n            );\r\n        nodes.forEach((node) =>\r\n            this.diagramEl.addNode({\r\n                ...node,\r\n                shape: {\r\n                    type: 'HTML',\r\n                },\r\n                style: {\r\n                    fill: 'blue',\r\n                },\r\n            }),\r\n        );\r\n        connectors.forEach((connector) =>\r\n            this.diagramEl.addConnector(connector),\r\n        );\r\n        this.log(\r\n            'onDiagramLoad - controller.dataMap',\r\n            this.controller.dataMap,\r\n            nodes,\r\n            connectors,\r\n        );\r\n\r\n        this.diagramEl.pan(0, 0);\r\n    }\r\n\r\n    async onPublish() {\r\n        this.log('onPublish', this.controller.getCurrentState());\r\n        this.controller.publish();\r\n    }\r\n\r\n    log(logName: string, ...params: any[]) {\r\n        if (this.debugMode) {\r\n            console.groupCollapsed(logName);\r\n            console.trace(params);\r\n            console.groupEnd();\r\n        }\r\n    }\r\n\r\n    public getSymbolInfo(symbol: any) {\r\n        // Defines the symbol description\r\n        return {\r\n            width: 75,\r\n            height: 40,\r\n            description: { text: symbol.addInfo['description'] },\r\n        };\r\n    }\r\n\r\n    onConnectionPointChange(event: ConnectionPointChangeEvent) {\r\n        this.log('connectionPointChange', event);\r\n        const { connector, state } = event;\r\n        if (state !== 'Completed') {\r\n            return;\r\n        }\r\n        this.handleConnectorPorts(connector);\r\n    }\r\n\r\n    async onElementDraw(event: IElementDrawEventArgs) {\r\n        this.log('elementDraw', event);\r\n        const { objectType, state } = event;\r\n        if (state === 'Start') {\r\n            // this is required to remove the selection-border that causes the connector to lose its sourceId\r\n            this.diagramEl.unSelect(event.source);\r\n        }\r\n        if (state !== 'Completed') {\r\n            return;\r\n        }\r\n        switch (objectType) {\r\n            case 'Connector': {\r\n                const connectorEvent =\r\n                    event as any as ElementDrawConnectorEvent;\r\n                return this.onConnectionAddedByDrawing(connectorEvent.source);\r\n            }\r\n        }\r\n    }\r\n\r\n    async onCollectionChange(event: ICollectionChangeEventArgs) {\r\n        this.log('collectionChange', event);\r\n        const { type, state, element } = event;\r\n        if (state !== 'Changed') {\r\n            return;\r\n        }\r\n        if (element instanceof Node) {\r\n            switch (type) {\r\n                case 'Addition': {\r\n                    await delay(300);\r\n                    this.onDropPalette(element as any);\r\n                    break;\r\n                }\r\n                case 'Removal': {\r\n                    this.deleteWorkflow(\r\n                        getWorkflowIdFromNodeId(element.id as any),\r\n                    );\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (element instanceof Connector) {\r\n            switch (type) {\r\n                case 'Removal': {\r\n                    const sourceWorkflowId = getWorkflowIdFromNodeId(\r\n                        element.sourceID as any,\r\n                    );\r\n                    const targetWorkflowId = getWorkflowIdFromNodeId(\r\n                        element.targetID as any,\r\n                    );\r\n                    const elementConnector =\r\n                        element as ConnectorModel<OutputPin>;\r\n                    const sourceWorkflow =\r\n                        this.controller.dataMap[sourceWorkflowId];\r\n                    const outputPin =\r\n                        getOutputPinFromConnector(elementConnector);\r\n                    if (\r\n                        targetWorkflowId ===\r\n                        sourceWorkflow?.factory.getNextWorkflows()[outputPin]\r\n                    ) {\r\n                        this.controller.updateWorkflowNextWorkflow(\r\n                            outputPin,\r\n                            sourceWorkflowId,\r\n                            null,\r\n                        );\r\n                    }\r\n                    break;\r\n                }\r\n                case 'Addition': {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async onSelectionChange(event: ISelectionChangeEventArgs) {\r\n        this.log('selectionChange', event);\r\n        const { state } = event;\r\n        if (state !== 'Changed') {\r\n            return;\r\n        }\r\n\r\n        // handle connectors selection indicator\r\n        const selectedConnectorsMaps = getMapByValue(\r\n            this.diagramEl.selectedItems.connectors ?? [],\r\n            'id',\r\n        );\r\n        this.diagramEl.connectors.forEach((item) => {\r\n            const selectedStrokeWidth = DEFAULT_STROKE_WIDTH * 2;\r\n            const isSelectedItem = !!selectedConnectorsMaps[item.id!];\r\n            if (item.style?.strokeWidth) {\r\n                if (\r\n                    item.style.strokeWidth !== DEFAULT_STROKE_WIDTH &&\r\n                    !isSelectedItem\r\n                ) {\r\n                    item.style.strokeWidth = DEFAULT_STROKE_WIDTH;\r\n                }\r\n                if (\r\n                    item.style.strokeWidth !== selectedStrokeWidth &&\r\n                    isSelectedItem\r\n                ) {\r\n                    item.style.strokeWidth = selectedStrokeWidth;\r\n                }\r\n            }\r\n        });\r\n\r\n        // make selected node on top of z-index\r\n        const selectedNodesMaps = getMapByValue(\r\n            this.diagramEl.selectedItems.nodes ?? [],\r\n            'id',\r\n        );\r\n        this.diagramEl.nodes.forEach((item) => {\r\n            const isSelectedItem = !!selectedNodesMaps[item.id];\r\n            const nodeElement =\r\n                this.host.nativeElement.querySelector<HTMLDivElement>(\r\n                    `#${item.id}_content_html_element`,\r\n                );\r\n            if (nodeElement) {\r\n                nodeElement.classList.toggle(\r\n                    'diagram-node__selected',\r\n                    isSelectedItem,\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    onScrollChange(event: IScrollChangeEventArgs) {\r\n        this.log('onScrollChange', event);\r\n        this.currentZoomFactor = event.newValue.CurrentZoom;\r\n    }\r\n\r\n    deleteWorkflow(workflowId: string) {\r\n        this.controller.deleteWorkflow(workflowId);\r\n    }\r\n\r\n    /** Handle when dragging the tip end/start of a connector */\r\n    async onConnectionChange(event: IConnectionChangeEventArgs) {\r\n        this.log('connectionChange', event);\r\n        const { state, newValue, oldValue, connectorEnd, connector } = event;\r\n        if (state !== 'Changed') {\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const newValueNodeId: string | undefined = newValue.nodeId;\r\n        // @ts-ignore\r\n        const oldValueNodeId: string | undefined = oldValue.nodeId;\r\n        const connectorModel = connector as ConnectorModel<OutputPin>;\r\n        const outputPin = getOutputPinFromConnector(connectorModel);\r\n        if (\r\n            newValueNodeId != null &&\r\n            oldValueNodeId != null &&\r\n            newValueNodeId !== oldValueNodeId\r\n        ) {\r\n            if (connectorEnd === 'ConnectorSourceEnd') {\r\n                const oldWorkflowSourceId = getWorkflowIdFromNodeId(\r\n                    oldValueNodeId as any,\r\n                );\r\n                const newWorkflowSourceId = getWorkflowIdFromNodeId(\r\n                    newValueNodeId as any,\r\n                );\r\n                const newWorkflowTargetId = connector.targetID\r\n                    ? getWorkflowIdFromNodeId(connector.targetID as any)\r\n                    : null;\r\n                const isValidNextWorkflow = this.controller.isValidNextWorkflow(\r\n                    outputPin,\r\n                    newWorkflowSourceId,\r\n                    newWorkflowTargetId,\r\n                );\r\n                if (isValidNextWorkflow) {\r\n                    this.controller.updateWorkflowNextWorkflow(\r\n                        outputPin,\r\n                        oldWorkflowSourceId,\r\n                        null,\r\n                    );\r\n                    if (newValueNodeId) {\r\n                        this.controller.updateWorkflowNextWorkflow(\r\n                            outputPin,\r\n                            newWorkflowSourceId,\r\n                            newWorkflowTargetId,\r\n                        );\r\n                    }\r\n                } else {\r\n                    connector.sourceID = oldValueNodeId;\r\n                }\r\n            }\r\n            if (\r\n                connectorEnd === 'ConnectorTargetEnd' &&\r\n                connector.sourceID?.startsWith(PREFIX_NODE)\r\n            ) {\r\n                const workflowSourceId = getWorkflowIdFromNodeId(\r\n                    connector.sourceID as any,\r\n                );\r\n                const newWorkflowTargetId = newValueNodeId\r\n                    ? getWorkflowIdFromNodeId(newValueNodeId as any)\r\n                    : null;\r\n                const isValidNextWorkflow = this.controller.isValidNextWorkflow(\r\n                    outputPin,\r\n                    workflowSourceId,\r\n                    newWorkflowTargetId,\r\n                );\r\n                if (isValidNextWorkflow) {\r\n                    this.controller.updateWorkflowNextWorkflow(\r\n                        outputPin,\r\n                        workflowSourceId,\r\n                        newWorkflowTargetId,\r\n                    );\r\n                } else {\r\n                    connector.targetID = oldValueNodeId;\r\n                }\r\n            }\r\n        }\r\n        this.checkConnector(connector.id!);\r\n    }\r\n\r\n    private async onDropPalette(node: NodeModelForPalette | NodeModel) {\r\n        const paletteAddInfo: NodeModelForPalette['addInfo'] | undefined = (\r\n            node as NodeModelForPalette\r\n        )?.addInfo;\r\n        if (workflowTypeArray.includes(paletteAddInfo?.type)) {\r\n            const newControllerData = this.controller.addWorkflow(\r\n                paletteAddInfo?.type,\r\n                {\r\n                    coordinate: {\r\n                        x: node.offsetX!,\r\n                        y: node.offsetY!,\r\n                    },\r\n                    name: this.sharedSvc.translate(\r\n                        WORKFLOW_NAME_TRANSLATIONS[paletteAddInfo.type],\r\n                    ),\r\n                    description: this.sharedSvc.translate(\r\n                        WORKFLOW_EXPLANATION_TRANSLATIONS[paletteAddInfo.type],\r\n                    ),\r\n                },\r\n            );\r\n            const newNodeData =\r\n                getNodeFromCanvasControllerData(newControllerData);\r\n            this.diagramEl.addNode(newNodeData);\r\n            this.diagramEl.remove(node);\r\n        }\r\n    }\r\n\r\n    onPositionChange(event: IDraggingEventArgs) {\r\n        this.log('positionChange', event);\r\n        const { state, newValue, source } = event;\r\n        if (state !== 'Completed') {\r\n            return;\r\n        }\r\n        const sourceNode: Partial<Node> = source as any;\r\n        if (sourceNode?.id?.startsWith(PREFIX_NODE)) {\r\n            this.controller.updateWorkflowCoordinate(\r\n                getWorkflowIdFromNodeId(sourceNode.id as any),\r\n                {\r\n                    x: newValue.offsetX!,\r\n                    y: newValue.offsetY!,\r\n                },\r\n            );\r\n        }\r\n    }\r\n\r\n    private async onConnectionAddedByDrawing(connector: Connector) {\r\n        this.log('onConnectionAddedByDrawing', connector);\r\n        const workflowSourceId = getWorkflowIdFromNodeId(\r\n            connector.sourceID as any,\r\n        );\r\n        const workflowTargetId = getWorkflowIdFromNodeId(\r\n            connector.targetID as any,\r\n        );\r\n        const connectorModel = connector as ConnectorModel;\r\n        const outputPin = getOutputPinFromConnector(connectorModel);\r\n        const isValidNextWorkflow = this.controller.isValidNextWorkflow(\r\n            outputPin,\r\n            workflowSourceId,\r\n            workflowTargetId,\r\n            true,\r\n        );\r\n        if (isValidNextWorkflow) {\r\n            this.controller.updateWorkflowNextWorkflow(\r\n                outputPin,\r\n                workflowSourceId,\r\n                workflowTargetId,\r\n            );\r\n        } else {\r\n            await delay(300);\r\n            this.diagramEl.remove(connector);\r\n        }\r\n        this.checkConnector(connector.id);\r\n    }\r\n\r\n    private checkConnector(connectorId: string) {\r\n        const connector = this.diagramEl.connectors.find(\r\n            ({ id }) => id === connectorId,\r\n        );\r\n        if (!connector) {\r\n            return;\r\n        }\r\n        connector.style = {\r\n            ...connector.style,\r\n            strokeColor:\r\n                connector.sourceID &&\r\n                connector.targetID &&\r\n                connector.sourceID !== connector.targetID\r\n                    ? DEFAULT_STROKE_COLOR\r\n                    : DEFAULT_ERROR_STROKE_COLOR,\r\n        };\r\n        const connectorInstance = connector as Connector;\r\n        const connectorModel = connector as ConnectorModel;\r\n        const outputPin = getOutputPinFromConnector(connectorModel);\r\n        connectorInstance.constraints =\r\n            ConnectorConstraints.Default - ConnectorConstraints.DragSourceEnd;\r\n        if (connectorInstance.annotations?.[0]) {\r\n            connectorInstance.annotations[0].content =\r\n                getConnectorAnnotation(outputPin)[0].content;\r\n        } else {\r\n            this.diagramEl.addConnectorLabels(\r\n                connector,\r\n                getConnectorAnnotation(outputPin),\r\n            );\r\n        }\r\n        this.handleConnectorPorts(connectorInstance);\r\n        this.diagramEl.dataBind();\r\n    }\r\n\r\n    private handleConnectorPorts(connector: Connector) {\r\n        const connectorModel = connector as ConnectorModel;\r\n        const outputPin = getOutputPinFromConnector(connectorModel);\r\n        if (\r\n            outputPin &&\r\n            connectorModel.sourceID &&\r\n            !connectorModel.sourcePortID\r\n        ) {\r\n            connectorModel.sourcePortID = `${PREFIX_PORT}_${outputPin}_pin`;\r\n        }\r\n        if (\r\n            outputPin &&\r\n            connectorModel.targetID &&\r\n            !connectorModel.targetPortID\r\n        ) {\r\n            connectorModel.targetPortID = `${PREFIX_PORT}_${OUTPUT_PIN_PAIR[outputPin]}_pin`;\r\n        }\r\n    }\r\n\r\n    updateWorkflowSettings(nodeId: string, data: IValueChangesWithObject) {\r\n        if (data?.obj) {\r\n            this.controller.updateWorkflowSettings(\r\n                getWorkflowIdFromNodeId(nodeId as any),\r\n                data.obj as any,\r\n            );\r\n        }\r\n    }\r\n\r\n    updateWorkflowCanvas(nodeId: string, data: Partial<Canvas>) {\r\n        this.controller.updateWorkflowCanvas(\r\n            getWorkflowIdFromNodeId(nodeId as any),\r\n            data,\r\n        );\r\n    }\r\n\r\n    deleteNode(nodeModel: NodeModel) {\r\n        const nodeInstance = this.diagramEl.nodes.find(\r\n            ({ id }) => id === nodeModel.id,\r\n        ) as Node;\r\n        nodeInstance.constraints = NodeConstraints.Default;\r\n        this.diagramEl.remove(nodeInstance);\r\n    }\r\n\r\n    private async updateDiagramSize() {\r\n        const rect = this.host.nativeElement\r\n            .querySelector('ejs-diagram')\r\n            ?.getBoundingClientRect();\r\n        this.diagramConfig.height = rect?.height;\r\n        this.diagramConfig.width = rect?.width;\r\n    }\r\n\r\n    saveState() {\r\n        // TODO\r\n    }\r\n\r\n    hasNodeSelectedAndExpanded = (selectedNodes: NodeModelSyncfusion[]) => {\r\n        const selectedNodeMap = getMapByValue(selectedNodes, 'id');\r\n        return !!this.nodeForms?.some(\r\n            (node) =>\r\n                !!selectedNodeMap[node.node.id] &&\r\n                (!!node.formHeader?.editMode ||\r\n                    !!node.workflowSettingsGroupedFieldData?.expandPanels),\r\n        );\r\n    };\r\n\r\n    hasNodeSelectedAndExpanded2() {\r\n        const selectedNodeMap = getMapByValue(\r\n            this.diagramEl?.selectedItems.nodes ?? [],\r\n            'id',\r\n        );\r\n        return !!this.nodeForms?.some(\r\n            (node) =>\r\n                !!selectedNodeMap[node.node.id] &&\r\n                !!node.workflowSettingsGroupedFieldData?.expandPanels,\r\n        );\r\n    }\r\n\r\n    areWorkflowsValid = (\r\n        validityMap: AzavistaWorkflowBuilderController['validityMap'],\r\n    ) => {\r\n        return Object.values(validityMap).every((isValid) => isValid);\r\n    };\r\n}\r\n","<div class=\"workflow-builder-div\">\r\n  <div class=\"workflow-builder-div__diagram-area\">\r\n    <div class=\"workflow-builder-div__diagram-area__toolbar\">\r\n      <div class=\"workflow-builder-div__diagram-area__toolbar__left\">\r\n        <azavista-button\r\n          [disabled]=\"!(controller.validityMap| apply : areWorkflowsValid)\"\r\n          (click)=\"onPublish()\"\r\n          color=\"primary\">{{\r\n          \"PUBLISH\" | translate\r\n        }}</azavista-button>\r\n      </div>\r\n      <div class=\"workflow-builder-div__diagram-area__toolbar__right\">\r\n        <mat-select\r\n          [value]=\"1\"\r\n          (selectionChange)=\"diagram.zoom($event.value / currentZoomFactor)\"\r\n          class=\"workflow-builder-div__diagram-area__toolbar__tool-zoom\"\r\n        >\r\n          <mat-option class=\"workflow-builder-div__diagram-area__toolbar__tool-zoom__option\" *ngFor=\"let factor of zoomOptions\" [value]=\"factor\"\r\n            >{{ factor * 100 }} %</mat-option\r\n          >\r\n        </mat-select>\r\n      </div>\r\n    </div>\r\n    <ejs-diagram\r\n      #diagram\r\n      id=\"diagram\"\r\n      [width]=\"diagramConfig.width\"\r\n      [height]=\"diagramConfig.height\"\r\n      [tool]=\"tool\"\r\n      [tooltip]=\"diagramConfig.tooltip\"\r\n      [constraints]=\"diagramConfig.constraints\"\r\n      [snapSettings]=\"diagramConfig.snapSettings\"\r\n      [getConnectorDefaults]=\"diagramConfig.getConnectorDefaults\"\r\n      [class.ejs-diagram--has-node-selected]=\"\r\n        diagram.selectedItems.nodes && diagram.selectedItems.nodes.length > 0\r\n      \"\r\n      [class.ejs-diagram--has-node-selected-and-expanded]=\"\r\n        hasNodeSelectedAndExpanded2()\r\n      \"\r\n      (created)=\"onDiagramLoad()\"\r\n      (connectionChange)=\"onConnectionChange($event)\"\r\n      (elementDraw)=\"onElementDraw($event)\"\r\n      (commandExecute)=\"log('commandExecute', $event)\"\r\n      (created)=\"log('created', $event)\"\r\n      (dataLoaded)=\"log('dataLoaded', $event)\"\r\n      (dragEnter)=\"log('dragEnter', $event)\"\r\n      (dragLeave)=\"log('dragLeave', $event)\"\r\n      (dragOver)=\"log('dragOver', $event)\"\r\n      (drop)=\"log('drop', $event)\"\r\n      (fixedUserHandleClick)=\"log('fixedUserHandleClick', $event)\"\r\n      (load)=\"log('load', $event)\"\r\n      (positionChange)=\"onPositionChange($event)\"\r\n      (propertyChange)=\"log('propertyChange', $event)\"\r\n      (rotateChange)=\"log('rotateChange', $event)\"\r\n      (scrollChange)=\"onScrollChange($event)\"\r\n      (segmentChange)=\"log('segmentChange', $event)\"\r\n      (segmentCollectionChange)=\"log('segmentCollectionChange', $event)\"\r\n      (selectionChange)=\"onSelectionChange($event)\"\r\n      (sizeChange)=\"log('sizeChange', $event)\"\r\n      (sourcePointChange)=\"onConnectionPointChange($event)\"\r\n      (targetPointChange)=\"onConnectionPointChange($event)\"\r\n      (collectionChange)=\"onCollectionChange($event)\"\r\n    >\r\n      <ng-template #nodeTemplate let-data>\r\n        <azavista-workflow-builder-node-form\r\n          [node]=\"data\"\r\n          [diagramEl]=\"diagramEl\"\r\n          [eventId]=\"eventId\"\r\n          (workflowSettingsChanges)=\"updateWorkflowSettings(data.id, $event)\"\r\n          (canvasChanges)=\"updateWorkflowCanvas(data.id, $event)\"\r\n          (removeNode)=\"deleteNode(data)\"\r\n        ></azavista-workflow-builder-node-form>\r\n      </ng-template>\r\n    </ejs-diagram>\r\n  </div>\r\n  <div class=\"workflow-builder-div__palette-area\">\r\n    <mat-tab-group>\r\n      <mat-tab label=\"{{ 'WORK_BLOCKS' | translate }}\">\r\n        <azavista-workflow-builder-workflow-builder-palette></azavista-workflow-builder-workflow-builder-palette>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport {\n    DiagramModule,\n    SymbolPaletteModule,\n} from '@syncfusion/ej2-angular-diagrams';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatSelectModule } from '@angular/material/select';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { AzavistaServicelibModule } from '@azavista/servicelib';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\nimport { AzavistaButtonModule } from '@azavista/components/button';\nimport { AzavistaFlowBuilderModule } from '@azavista/components/flow-builder';\nimport { WorkflowBuilderComponent } from './workflow-builder.component';\n\nimport { WorkflowBuilderPaletteComponent } from './components/workflow-builder-palette/workflow-builder-palette.component';\nimport { WorkflowBuilderNodeFormComponent } from './components/workflow-builder-node-form/workflow-builder-node-form.component';\nimport { WorkflowBuilderProcessBuilderComponent } from './components/workflow-builder-process-builder/workflow-builder-process-builder.component';\nimport { WorkflowBuilderNodeFormHeaderComponent } from './components/workflow-builder-node-form-header/workflow-builder-node-form-header.component';\nimport { WorkflowBuilderNodeFormFieldTextComponent } from './components/workflow-builder-node-form-field-text/workflow-builder-node-form-field-text.component';\nimport { WorkflowBuilderNodeFormFieldSelectComponent } from './components/workflow-builder-node-form-field-select/workflow-builder-node-form-field-select.component';\nimport { ApplyFunctionPipe } from './pipes/apply-function.pipe';\nimport { WorkflowBuilderNodeFormFieldToggleComponent } from './components/workflow-builder-node-form-field-toggle/workflow-builder-node-form-field-toggle.component';\nimport { WorkflowBuilderNodeFormFieldProcessComponent } from './components/workflow-builder-node-form-field-process/workflow-builder-node-form-field-process.component';\nimport { WorkflowBuilderProcessBuilderDialogComponent } from './components/workflow-builder-process-builder-dialog/workflow-builder-process-builder-dialog.component';\n\n@NgModule({\n    declarations: [\n        WorkflowBuilderComponent,\n        WorkflowBuilderPaletteComponent,\n        WorkflowBuilderNodeFormComponent,\n        WorkflowBuilderNodeFormHeaderComponent,\n        WorkflowBuilderNodeFormFieldTextComponent,\n        WorkflowBuilderNodeFormFieldSelectComponent,\n        WorkflowBuilderNodeFormFieldToggleComponent,\n        WorkflowBuilderNodeFormFieldProcessComponent,\n        WorkflowBuilderProcessBuilderComponent,\n        WorkflowBuilderProcessBuilderDialogComponent,\n\n        ApplyFunctionPipe,\n    ],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n\n        FormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatButtonModule,\n        MatIconModule,\n        MatExpansionModule,\n        MatSelectModule,\n        MatCheckboxModule,\n        MatListModule,\n        MatSlideToggleModule,\n        MatTabsModule,\n        MatDialogModule,\n\n        TranslateModule,\n\n        DiagramModule,\n        SymbolPaletteModule,\n\n        // AzavistaGroupedFieldsModule,\n        AzavistaServicelibModule,\n        // AzavistaInputFieldModule,\n        AzavistaButtonModule,\n        AzavistaFlowBuilderModule,\n    ],\n    exports: [WorkflowBuilderComponent],\n})\nexport class AzavistaWorkflowBuilderModule {}\n","/*\n * Public API Surface of workflow-builder\n */\nexport * from './lib/types';\nexport * from './lib/utils';\nexport * from './lib/services/workflow-builder.service';\nexport * from './lib/services/workflow-builder-provider.api';\nexport * from './lib/workflow-builder.component';\nexport * from './lib/workflow-builder.module';\nexport * from './lib/workflow-builder.controller';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i2.AzavistaWorkflowBuilderController","i1","i2","i3","i4","i5","i9","i10.ApplyFunctionPipe","i1.AzavistaWorkflowBuilderFormFieldService","i6","i7","i8","i1.AzavistaWorkflowBuilderController","i2.WorkflowBuilderProcessBuilderComponent","omit","i4.AzavistaWorkflowBuilderFormFieldService","i9.WorkflowBuilderNodeFormHeaderComponent","i10.WorkflowBuilderNodeFormFieldTextComponent","i11.WorkflowBuilderNodeFormFieldSelectComponent","i12.WorkflowBuilderNodeFormFieldToggleComponent","i13.WorkflowBuilderNodeFormFieldProcessComponent","i14","i2.WorkflowBuilderService","i8.ApplyFunctionPipe","i1.WorkflowBuilderService","i10","i11.WorkflowBuilderPaletteComponent","i12.WorkflowBuilderNodeFormComponent","i13","i14.ApplyFunctionPipe"],"mappings":"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"}